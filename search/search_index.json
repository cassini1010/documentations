{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udc4b Welcome","text":""},{"location":"#hi-im-jeevan","title":"Hi, I'm Jeevan \ud83d\udc68\u200d\ud83d\udcbb","text":"<p>I'm a Python developer passionate about automating redundant and boring stuff. </p>"},{"location":"#my-skills","title":"\ud83d\udee0\ufe0f My Skills","text":"<ul> <li>\ud83d\udc0d Languages &amp; Frameworks: Python, FastAPI, SQLModel, Pytest  </li> <li>\ud83d\uddc4\ufe0f Databases: PostgreSQL, SQLite, SQL, Alembic  </li> <li>\ud83d\udee0\ufe0f DevOps &amp; Tools: Docker, Docker Compose, GitHub Actions, Postman, Adminer </li> <li>\ud83d\udd0c API &amp; Testing: REST APIs, JIRA REST API, Postman, Pytest  </li> <li>\ud83d\udcdd Documentation: Markdown, Material for MkDocs  </li> <li>\ud83d\udccb Project Tools: JIRA, Confluence, CI/CD  </li> <li>\ud83d\udd10 Domain Knowledge: ECU Certificate-based Authentication, Automotive Diagnostics, ODX-D</li> <li>\ud83d\udc0d Python Libraries: Pywinauto, FastAPI, PyTorch</li> <li>\ud83d\udce6 Packaging &amp; Build: setuptools, uv, pyinstaller</li> <li>\ud83e\udde0 Machine Learning: PyTorch, COCO, Mask R-CNN</li> <li>\ud83d\udda5\ufe0f UI Testing: PyWinAuto</li> <li>\ud83d\udcd8 Documentation: MkDocs, Markdown</li> </ul>"},{"location":"#socials","title":"\ud83c\udf10 Socials","text":"<ul> <li>GitHub</li> <li>LinkedIn</li> </ul>"},{"location":"#get-in-touch","title":"\ud83d\udceb Get in Touch","text":"<p>You can reach me via email or open an issue on GitHub.</p>"},{"location":"AI_ML/MachineLearning/","title":"Machine Learning","text":"<p>In Keras, the typical workflow involves creating a model, adding layers, compiling the model, training it with data, and then testing and using it. However, there are variations depending on the complexity of the model and the specific use case. Here\u2019s a detailed explanation of the standard workflow and its applicability:</p>"},{"location":"AI_ML/MachineLearning/#standard-workflow","title":"Standard Workflow","text":"<ol> <li> <p>Create a Model:</p> </li> <li> <p>Define the architecture of the neural network by creating a model. This can be done using the Sequential API for simple models or the Functional API for more complex architectures.</p> </li> <li> <p>Add Layers:</p> </li> <li> <p>Add layers to the model to build the architecture. In the Sequential API, layers are added one after another. In the Functional API, layers can be added in a more flexible manner, allowing for shared layers, branching, and other complex structures.</p> </li> <li> <p>Compile the Model:</p> </li> <li> <p>Specify the optimizer, loss function, and metrics to monitor during training. This step configures the learning process.</p> </li> <li> <p>Train the Model:</p> </li> <li> <p>Fit the model to the training data using the <code>fit</code> method. This involves feeding the model with data and adjusting weights based on the loss function.</p> </li> <li> <p>Evaluate the Model:</p> </li> <li> <p>Assess the model\u2019s performance on a test set using the <code>evaluate</code> method. This step helps in understanding how well the model generalizes to new data.</p> </li> <li> <p>Make Predictions:</p> </li> <li> <p>Use the trained model to make predictions on new data using the <code>predict</code> method.</p> </li> </ol>"},{"location":"AI_ML/MachineLearning/#example","title":"Example","text":"<pre><code>import numpy as np\nimport math\nimport tensorflow as tf\nfrom keras import Sequential, layers\nimport matplotlib.pyplot as plt\n\nrng = np.random.default_rng()\n\nx_value = rng.uniform(low=0, high=(2*math.pi), size=10000)\ny_value = np.sin(x_value) + (0.1 *rng.random(size=10000))\nx_validation, x_test, x_training = x_value[0:2000], x_value[2000:4000], x_value[:]\ny_validation, y_test, y_training = y_value[0:2000], y_value[2000:4000], y_value[:]\n\n# plt.plot(x_validation, y_validation, 'r.', label = \"Validation\")\nplt.plot(x_test, y_test, 'g.', label = \"test\")\n# plt.plot(x_training, y_training, 'b.', label = \"training\")\nplt.legend()\n\n\n# Create Model\nmodel = Sequential()\n\n# Add layers to the model\nmodel.add(layers.Dense(16, activation='relu', input_shape=(1,)))\nmodel.add(layers.Dense(16, activation='relu'))\nmodel.add(layers.Dense(1))\n\n# Look at the summary of the model (optional)\nmodel.summary()\n\n# Compile model with right optimizer, loss function and metrics to model\nmodel.compile(optimizer='rmsprop', loss='mae', metrics=['mae'])\n\n# Train the model\ntrained_model = model.fit(x_training, y_training, epochs=500,\n                           batch_size=100)\n\n\n# Evaluate the trained model with test data\nloss_val, metric_val = model.evaluate(x_validation, y_validation)\n\n# Use the model to predict using the unknown data\npredicted_y = model.predict(x_test)\nplt.plot(x_test, predicted_y, 'r.')\n\n\nplt.show()\n\n# save the model in to a .h5 file\nmodel.save('sine.h5')\n</code></pre>"},{"location":"AI_ML/MachineLearning/#calculating-loss","title":"Calculating loss","text":"<p>Loss is measured using the simple technique where we square the distance between the predicted and actual value, add them up, then get the square root of the added result. </p> <p>Squaring up the distances makes sure that the negative and positive distances don't cancel up with each other.</p>"},{"location":"AI_ML/PyTorch/","title":"PyTorch","text":""},{"location":"AI_ML/PyTorch/#torchvision","title":"torchvision","text":""},{"location":"AI_ML/PyTorch/#object-detection-models","title":"Object detection models","text":"<ul> <li> <p><code>fasterrcnn_mobilenet_v3_large_320_fpn</code></p> </li> <li> <p><code>fasterrcnn_mobilenet_v3_large_fpn</code></p> </li> <li> <p><code>fasterrcnn_resnet50_fpn</code></p> </li> <li> <p><code>fasterrcnn_resnet50_fpn_v2</code></p> </li> <li> <p><code>fcos_resnet50_fpn</code></p> </li> <li> <p><code>retinanet_resnet50_fpn_v2</code></p> </li> <li> <p><code>retinanet_resnet50_fpn</code></p> </li> </ul>"},{"location":"AI_ML/PyTorch/#model-building-in-pytorch","title":"Model building in PyTorch","text":"<p>Modle building in pytorch is certerd around two classes in <code>torch.nn</code> module.</p> <ul> <li> <p>torch.nn.Module : contains models and its componets such as nural network layers</p> </li> <li> <p>torch.nn.Parameter: comprises of lerning weights</p> </li> </ul>"},{"location":"AI_ML/PyTorch/#layers","title":"Layers","text":"<p>Linear Layer</p> <p>Convolutional Nural network Layer (CNN)</p> <p>Recurrent Nural network Layer (RNN)</p> <p>Transformers : These are teh multi pursose nural networks mostly used for NLP</p>"},{"location":"AI_ML/PyTorch/#other-layerrs-and-funciton","title":"other layerrs and funciton","text":""},{"location":"AI_ML/PyTorch/#max-pooling-and-min-pooling","title":"Max pooling and Min pooling","text":"<p>Reduces the size of the tensor by combining cells together and assigning the maximum/minimum value of the input cell respectively to the output cell respectively.</p>"},{"location":"AI_ML/PyTorch/#autograd-in-pytorch","title":"Autograd in PyTorch","text":"<p><code>Autograd</code> is the differentianion engine in pytorch. </p> <pre><code>import torch\n\n# Step 1: Create a tensor with requires_grad=True\nx = torch.tensor(2.0, requires_grad=True)\n\n# Step 2: Define a function (computational graph)\ny = x**2 + 3*x + 4   # y = x\u00b2 + 3x + 4\n\n# Step 3: Backpropagate\ny.backward()  # Computes dy/dx\n\n# Step 4: Check the gradient\nprint(x.grad)  # Output: tensor(7.)\n</code></pre>"},{"location":"AI_ML/PyTorch/#math-involved","title":"Math Involved","text":"<p>$$ y=x^2+3x+4</p> <p>$$</p> <p>Taking differentiation of an expression and equating it to zero gives the minima of the function.</p> \\[ \\frac{d}{dx}=2x+3 \\] <p>Since tensor has value of 2.0</p> \\[ \\frac{d}{dx} = 2*2+3 = 7 \\] <p><code>x.grad</code> also gave <code>7</code> as output.</p> <p>Often weights and biases are manually updatde in each iteration by calculating the difference between the predicted value and the actual value. Hence often differentiation of loss w.r.t weight and bias are done</p> \\[ \\frac{\ua77a}{\ua77aweight}loss \\] \\[ \\frac{\ua77a}{\ua77a bias}loss \\]"},{"location":"AI_ML/PyTorch/#example","title":"Example","text":"<p>If the model is Linear, the prediction is done using linear expression (equation of a straight line).</p> <p>w = weight</p> <p>b = bias</p> <p>Y = actual value</p> <p>yp = predicted value</p> \\[ y_p=wx+b \\] <p>You want to learn the best <code>w</code> and <code>b</code> that minimize the error between predicted price and actual price. This error is captured by the loss function:</p> \\[ Loss=\\frac{1}{n} \\sum_1^n(y_{prediction}\u2212Y)^2 \\] <p>To reduce the loss, you must update <code>w</code> and <code>b</code> in the right direction. This is where gradients (derivatives) help:</p> <ul> <li> <p>The derivative tells you the slope of the loss function w.r.t. each parameter.</p> </li> <li> <p>Using gradient descent, you update parameters like this:</p> </li> </ul> \\[ w=w-lr*(\ua77aloss/\ua77aw) \\] \\[ b=b-lr(\ua77aloss/\ua77ab) \\] <p><code>lr</code> is the learning rate. Weight/bias is reduced if gradiant is positive and is increased if gradiant is negative.</p> <pre><code>import torch\n\n# Sample data: house size vs price\nX = torch.tensor([[1.0], [2.0], [3.0], [4.0]])\nY = torch.tensor([[3.0], [5.0], [7.0], [9.0]])\n\n# Parameters to learn: w (weight), b (bias)\nw = torch.randn(1, requires_grad=True)\nb = torch.randn(1, requires_grad=True)\n\n# Learning rate\nlr = 0.01\n\n# Training loop\nfor epoch in range(1000):\n    # Forward pass\n    y_pred = X * w + b\n    loss = ((y_pred - Y) ** 2).mean()\n\n    # Backward pass\n    loss.backward()\n\n    # Update weights manually\n    with torch.no_grad():\n        w -= lr * w.grad\n        b -= lr * b.grad\n\n        # Zero the gradients\n        w.grad.zero_()\n        b.grad.zero_()\n\n    # Print progress\n    if epoch % 100 == 0:\n        print(f\"Epoch {epoch}: Loss = {loss.item():.4f}, w = {w.item():.4f}, b = {b.item():.4f}\")\n</code></pre>"},{"location":"AI_ML/PyTorch/#training-a-model-manually","title":"Training a model manually","text":"<p>Consider below input(X) and expected output(Y), stating with a random weight and bias 0.0. Note that predeined weight and bias can be anything.</p> <pre><code>X = numpy.array([1,2,3,4,5], dtype=numpy.float32)\nY = numpy.array([6, 11, 16, 21, 26], dtype=numpy.float32)\n# weights and bias\npre_weight = 0.0\npre_bias = 0.0\n</code></pre> <p>Define a linear regression model of expression <code>y=mx+c</code> in the forward method. This is the model that we are going to train and bring the weights and bias towards perfection.</p> <p>Loss function gives out mean squared value of difference between prediction and actual expected value.</p> <p>Backward function computes the differentiation of the loss function and finds the minima of weight and bias respectively.</p> <p>Loss function:</p> <p>$$ Loss = \\frac{1}{n}\\sum_1<sup>n(y_{predicted}-y_{actual})</sup>2</p> <p>$$</p> <p>Expanding <code>Y prediction</code> gives:</p> \\[ Loss = \\frac{1}{n}\\sum_1^n(w*X+b-y_{actual})^2 \\] <p>Minima of loss functoin w.r.t weight:</p> \\[ \\frac{d}{dw}Loss=\\frac{1}{n}\\sum_1^n2(w.X+b-y_{actual})*X \\] <p>Minima of loss function w.r.t bias:</p> \\[ \\frac{d}{db}Loss=\\frac{1}{n}\\sum_1^n2(w.X+b-y_{actual}) \\] <p>Updating of the weights and biases are done using below expression:</p> \\[ weights = weights - (lerningRate*\\frac{d}{dw}Loss) \\] \\[ Bias= Bias- (lerningRate*\\frac{d}{db}Loss) \\] <p>Below is the code for all the steps mentioned above</p> <pre><code># model prediction\ndef forward(input, w, b):\n    return w*input+b\n\n# loss function\ndef loss(prediction, actual):\n    return ((prediction-actual)**2).mean()\n\n# calculate Gradiant\ndef backward(input, prediction, actual):\n    weight_grad = numpy.dot(2*input, prediction-actual).mean()\n    bias_grad = numpy.dot(2, prediction-actual).mean()\n    return weight_grad, bias_grad\n\ndef update_weight_bias(w, b, lr, dw, db):\n    updated_weight = w - (lr*dw)\n    updated_bias = b -(lr*db)\n    return updated_weight, updated_bias\n</code></pre> <p>Training of the model is done in 10000 epochs as shown below</p> <pre><code>for i in range(10000):\n    y_prediction = forward(X, pre_weight, pre_bias)\n    # print(f\" Predicted y is {y_prediction}\")\n    loss_value = loss(y_prediction, Y)\n    # print(f\"Calculated loss is {loss_value}\")\n    wgrad, bgrad = backward(X, y_prediction, Y)\n    # print(f\"weight gradiant is {wgrad} and bias gradiant is {bgrad}\")\n    pre_weight, pre_bias = update_weight_bias(pre_weight, pre_bias, 0.01, wgrad, bgrad)\n    # print(f\"updated weight  {pre_weight} and updated bias is {pre_bias}\")\n\nprint(f\"updated weight  {pre_weight} and updated bias is {pre_bias}\")\n</code></pre>"},{"location":"Automotive/Certificate_Based_Authentication/","title":"Certificate Based Authentication","text":""},{"location":"Automotive/Certificate_Based_Authentication/#unified-diagnostic-service-uds-service-0x29","title":"Unified Diagnostic Service (UDS) : Service 0x29","text":"<p>Used for diagnostic tester authentication.</p> <p>Split in to two different sections <code>Authentication with PKI Certificate Exchange (APCE)</code> and <code>Authentication with Challenge-Response</code> </p> <p>Uses Asymmetric cryptography</p>"},{"location":"Automotive/Certificate_Based_Authentication/#security-access-uds-service0x27","title":"Security Access : UDS Service0x27","text":"<p>Uses symmetric cryptography </p>"},{"location":"Automotive/Certificate_Based_Authentication/#pki-public-key-infrastructure","title":"PKI (Public Key Infrastructure)","text":"<p>PKI is an asymmetrical cryptographic system which uses a pair of mathematically related  keys to send and receive message in a secure way. A message encrypted with private key can only be decrypted using public key and Vice versa is also feasible.</p>"},{"location":"Automotive/Certificate_Based_Authentication/#digital-certificates","title":"Digital Certificates","text":"<p>Digital certificates utilize the public key infrastructure (PKI).\u00a0A PKI system has two main components: a certificate authority (CA) and certificates. These certificates will be used to exchange the public keys.</p> <p>The digital certificates are used for security reasons and many use cases:</p> <ul> <li>Secure over-the-air updates (OTA) and code signing.</li> <li>Transport Layer Security (TLS).</li> <li>Secure diagnostics and service 0x29.</li> <li>Vehicle to Grid (V2G) technology.</li> <li>Vehicle to everything (V2V) technology.</li> <li>Vehicle to everything (V2X) technology.</li> </ul> <p>Certificate consist of 3 main sections</p> <ul> <li> <p>certificate data</p> </li> <li> <p>Algorithm used for signature.</p> </li> <li> <p>Signature.</p> </li> </ul>"},{"location":"Automotive/Certificate_Based_Authentication/#ecu-authentication-with-pki-certificate-exchange","title":"ECU\u00a0Authentication with PKI Certificate Exchange","text":""},{"location":"Automotive/Certificate_Based_Authentication/#proof-of-ownership","title":"Proof of ownership","text":"<p>When an ECU receives the certificate, it doesn't know if the tester owns the private key. So it sends challenge to the tester to encrypt it using the testers private key. ECU verifies the received response using testers public key, hence verifying the ownership.</p> <p>Proof of ownership can be bidirectional if needed to protect the tester from ECU (Some systems use this kind of proof of ownership). In this case the certificate sent by the tester consists of public key, signature and a challenge to the ECU. ECU verifies the sends its certificate to the tester with public key, signature and response to the challenge</p>"},{"location":"Automotive/Certificate_Based_Authentication/#creating-a-certificate-chain-of-trust-using-openssl","title":"Creating a certificate chain of trust using OpenSSL","text":"<p>In most ECUs that contain certificates, the certificates are organized in a hierarchical structure known as a certificate chain. The chain starts with the root CA certificate, which is self-signed and acts as the trust anchor for the complete chain. One or multiple Intermediate CAs certificates can follow the root CA certificate. The Intermediate CAs certificates are then used to sign and issue end entity certificates.</p> <p></p>"},{"location":"Automotive/Certificate_Based_Authentication/#create-rootca","title":"Create RootCA","text":"<p>Openssl needs to be installed. <code>openssl.cnf</code> can be found in the installed folders.</p> <pre><code>openssl genrsa -out CA_KeyFile.pem 2048 # generate private key\nopenssl req -new -x509 -days 365 -sha256 -key CA_KeyFile.pem -config openssl.cnf -out CA_Certificate.crt\nopenssl x509 -in CA_Certificate.crt -text -noout # check certificate content\n</code></pre>"},{"location":"Automotive/Certificate_Based_Authentication/#create-intermediate-certificate","title":"Create intermediate certificate","text":"<pre><code>openssl genrsa -out Inter_KeyFile.pem 2048 # generate private key\n\n# generate CSR consisting of public key of Intermediate certificate.\nopenssl req -new -sha256 -key Inter_KeyFile.pem -config openssl.cnf -out Inter_CSR_Certificate.csr\n\n# Using the csr generate the certificate\nopenssl x509 -days 365 -req -in Inter_CSR_Certificate.csr -CA CA_Certificate.crt -CAkey CA_KeyFile.pem -CAcreateserial -out Inter_Certificate.crt\n</code></pre>"},{"location":"Automotive/Certificate_Based_Authentication/#create-end-user-certificate","title":"Create end user certificate","text":"<pre><code>openssl genrsa -out User_KeyFile.pem 2048 # generate private key\n\n# generate csr consisting of public key\nopenssl req -new -sha256 -key User_KeyFile.pem -config openssl.cnf -out User_CSR_Certificate.csr\n\nopenssl x509 -days 365 -req -in User_CSR_Certificate.csr -CA Inter_Certificate.crt -CAkey Inter_KeyFile.pem -CAcreateserial -out User_Certificate.crt\n</code></pre>"},{"location":"Automotive/Certificate_Based_Authentication/#odx","title":"ODX","text":""},{"location":"Automotive/Certificate_Based_Authentication/#what-is-odx","title":"What is ODX?","text":"<p>Open Diagnostic data Exchange - ISO 22901 - 1</p> <p><code>ODX-D</code> is diagnostic data. most commonly used odx file. </p> <p><code>ODX-V</code> vehicle information</p> <p><code>ODX-F</code> Software update / Flash information. <code>Flashing an ECU</code> is nothing but a software update to the ECU. ODX-F only tells about the data that needs to be flashed. Its the job of tester tool to know which request to send in what order.</p> <p><code>ODX-E</code> ECU configuration data.</p> <p><code>ODX-FD</code> Function oriented Diagnostics</p> <p>Between ODX files and within ODX files linking, Referencing and Inheritance can be seen. Understanding of which is very essential to work on ODX data.</p> <p><code>PDX</code> Packaged ODX containers has various different ODX files</p> <p>ECU - &gt; Electronic control unit</p> <p>New generation of ECus are <code>HCPs</code> High performance computing platforms</p>"},{"location":"Automotive/Certificate_Based_Authentication/#autosar","title":"AUTOSAR","text":"<p>For <code>HCPs</code>  -&gt; AUTOSAR Adaptive platform</p> <p>for other <code>ECUs</code> -&gt;  AUTOSAR classic platform</p> <p>File formate used is <code>ARXML</code></p> <p>HCPs/HPCs  are GPUs that have high performance compared to ECUs. HPCs have data centric capabilities while the ECUs have hardware centric capabilities. A vehicle will have both HPC and ECU for both hardware and data work together.</p>"},{"location":"Git/Github_Workflow/","title":"Github Workflow","text":""},{"location":"Git/Github_Workflow/#adding-actions-from-public-repo","title":"Adding actions from public repo","text":"<p>Github actions can be added to your workflow from below possible places:</p> <ul> <li> <p>The same repository as your workflow file</p> </li> <li> <p>Any public repository</p> </li> <li> <p>A published Docker container image on Docker Hub</p> </li> </ul> <p>Public repositories can be found in github marketplace. https://github.com/marketplace/actions/</p>"},{"location":"Git/Github_Workflow/#adding-actions-from-same-repo","title":"Adding actions from same repo","text":"<p>If an action is defined in the same repository where your workflow file uses the action, you can reference the action with either the \u200c<code>{owner}/{repo}@{ref}</code>\u00a0or\u00a0<code>./path/to/dir</code>\u00a0syntax in your workflow file.</p> <p>Example repository file structure:</p> <pre><code>|-- hello-world (repository)\n|   |__ .github\n|       \u2514\u2500\u2500 workflows\n|           \u2514\u2500\u2500 my-first-workflow.yml\n|       \u2514\u2500\u2500 actions\n|           |__ hello-world-action\n|               \u2514\u2500\u2500 action.yml\n</code></pre>"},{"location":"Git/Github_Workflow/#save-reports-in-artifact","title":"Save reports in artifact","text":"<p>Reports and log files generated in the project could be saved in an artifact using the below workflow:</p> <pre><code>- name: Upload output file\n  uses: actions/upload-artifact@v4\n  with:\n    name: output-log-file\n    path: output.log\n</code></pre> <p>Download of this report or log file can be done from the artifact using below workflow. The download is often done using a separate workflow. If the download is supposed to be done in the same workflow file, use the <code>needs: &lt;upload job name&gt;</code> in the below workflow to specify that upload job has to run before hte download job.</p> <pre><code>steps:\n- name: Download a single artifact\n  uses: actions/download-artifact@v4\n  with:\n    name: output-log-file\n</code></pre>"},{"location":"Git/git/","title":"Git","text":"<p>Git is a Distributed version control system  (DVCS)</p>"},{"location":"Git/git/#getting-started","title":"Getting started","text":"<p>Git has three main states that your files can reside in\u00a0modified,\u00a0staged, and\u00a0committed.</p> <p>The most official build is available for download on the Git website. Just go to\u00a0Git - Downloading Package\u00a0and the download will start automatically. </p> <p>Note that this is a project called Git for Windows, which is separate from Git itself; for more information on it, go to\u00a0https://gitforwindows.org.</p>"},{"location":"Git/git/#config","title":"Config","text":"<p>You can view all of your settings and where they are coming from using</p> <pre><code>git config --list --show-origin\n</code></pre> <p>To view only settings</p> <pre><code>git config --list\n</code></pre> <p>There are <code>--system</code> <code>--local</code> <code>--global</code> configurations in git. To list global settings/configurations and their origin</p> <pre><code>git config --list --global --show-origin\n</code></pre>"},{"location":"Git/git/#help","title":"Help","text":"<p>Use\u00a0<code>--help</code>\u00a0to get a full-blown man page</p> <p>Use\u00a0<code>-h</code>\u00a0to get a short refresher man page</p> <pre><code>git status --help \n</code></pre>"},{"location":"Git/git/#_1","title":"Git","text":""},{"location":"Git/git/#git-basics","title":"Git Basics","text":""},{"location":"Git/git/#turn-an-existing-directory-into-git-repository","title":"Turn an existing directory into Git repository","text":"<p>Run <code>git init</code> in that directory.</p> <pre><code>git init\n</code></pre>"},{"location":"Git/git/#clone","title":"Clone","text":"<p>This is another way to have a git repository. To have a desired name for the repository to be cloned use below command.</p> <pre><code>git clone https://github.com/libgit2/libgit2 mylibgit\n</code></pre> <p>Here mylibgit is a desired name given to the cloned repo.</p> <p>Above example uses the\u00a0<code>https://</code>\u00a0protocol, but you may also see\u00a0<code>git://</code>\u00a0or\u00a0<code>user@server:path/to/repo.git</code>, which uses the SSH transfer protocol.</p>"},{"location":"Git/git/#status","title":"status","text":"<pre><code>git status        # to check the status of the local repo\ngit status -s     # gives a short status\n</code></pre>"},{"location":"Git/git/#add-and-commit","title":"add and commit","text":"<pre><code>git add &lt;file/folder names&gt; ....   # adds files/folders into staging area\ngit commit -m &lt;commit message&gt;     # uses the files in staging area to make a new commit.\n</code></pre> <p>Status, add and commit are the mostly used commands on daily basis in git.</p>"},{"location":"Git/git/#diff","title":"diff","text":"<p>To see what you\u2019ve changed but not yet staged, type\u00a0<code>git diff</code>\u00a0with no other arguments. This command compares what is in your 'working directory' with what is in your 'staging area'.</p> <pre><code>git diff\n</code></pre> <p>If you want to see what you\u2019ve staged that will go into your next commit, you can use. This command compares your staged changes to your\u00a0last\u00a0commit.</p> <pre><code>git diff --staged\n</code></pre> <p>If you run\u00a0<code>git difftool</code>\u00a0instead of\u00a0<code>git diff</code>, you can\u00a0view any of these diffs in\u00a0software\u00a0like emerge, vimdiff and many more (including\u00a0commercial products). Run\u00a0<code>git difftool --tool-help</code>\u00a0to see what is available on your system.</p>"},{"location":"Git/git/#to-skip-the-git-add-part-and-directly-commit-the-changes-use-git-commit-a-m-commit-message-adding-the-a-option-to-the-git-commit-command-makes-git-automatically-stage-every-file-that-is-already-tracked-before-doing-the-commit-letting-you-skip-the-git-add-part","title":"To skip the\u00a0<code>git add</code>\u00a0part and directly commit the changes use\u00a0<code>git commit -a -m \"&lt;commit message&gt;\"</code>. Adding the\u00a0<code>-a</code>\u00a0option to the\u00a0<code>git commit</code>\u00a0command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the\u00a0<code>git add</code>\u00a0part","text":""},{"location":"Git/git/#removing-a-file","title":"Removing a file","text":"<pre><code>git rm &lt;file name&gt; ## to remove a file from git tracked local repo\ngit rm --cached &lt;filename&gt; ## to remove the file from staging area if the file was staged already\n</code></pre>"},{"location":"Git/git/#rename-file","title":"Rename file","text":"<p>If you want to rename a file in Git, you can run something like</p> <pre><code>$ git mv file_from file_to\n</code></pre>"},{"location":"Git/git/#log-commit-history","title":"Log / commit history","text":"<pre><code>git log\n\ngit log --patch ##shows the difference introduced in each commit.\ngit log --patch -2 ## to limit the results to latest 2 commits\n\ngit log --graph ## gives a good graphical representation of branching.\n\ngit log --oneline ## prints a brief description of every commit.\n</code></pre> <pre><code>git log --since=2.weeks\n</code></pre> <p>This command works with lots of formats\u2009\u2014\u2009you can specify a specific date like\u00a0<code>\"2008-01-15\"</code>, or a relative date such as\u00a0<code>\"2 years 1 day 3 minutes ago\"</code>.</p> <pre><code>git log -- path/to/file\n</code></pre> <p>If you specify a directory or file name, you can limit the log output to commits that introduced a change to those files.</p> <pre><code>git log &lt;branch name&gt;  ## commit history of desired branch\n\nMuch useful one:\ngit log --oneline --graph --all  ## oneline commit history of all branches and a nice graph representation \n</code></pre>"},{"location":"Git/git/#amend","title":"amend","text":"<pre><code>git commit --amend -m &lt;commit message&gt;\n</code></pre> <p>The obvious value to amending commits is to make minor improvements to your last commit, without cluttering your repository history with commit messages of the form, \u201cOops, forgot to add a file\u201d or \u201cDarn, fixing a typo in last commit\u201d.</p>"},{"location":"Git/git/#remote","title":"remote","text":"<pre><code>git remote -v ##To list all the remotes that you have.\n\ngit remote add mint https://github.com/wingardium/leviousa ## adds a remote called mint to the list of remotes\n\n\ngit remote update \n</code></pre>"},{"location":"Git/git/#fetch","title":"fetch","text":"<pre><code>git fetch origin\ngit fetch mint ## fetches the changes that remote has and local doesn't have\n</code></pre>"},{"location":"Git/git/#to-see-details-about-remote","title":"To see details about remote","text":"<pre><code>git remote show &lt;origin&gt;\n</code></pre>"},{"location":"Git/git/#renaming-remote","title":"renaming remote","text":"<pre><code>git remote rename mint ginger ##rename remote `mint` to `ginger`\n</code></pre>"},{"location":"Git/git/#remove-a-remote","title":"remove a remote","text":"<pre><code>git remote remove ginger  ## removes ginger remote.\n</code></pre>"},{"location":"Git/git/#aliasing","title":"aliasing","text":"<pre><code>git config --global alias.co checkout\n</code></pre> <p>here\u00a0<code>checkout</code>\u00a0is aliased as co and you can use\u00a0<code>git co</code>\u00a0to run the commit command. This could be helpful to perform repetitive commands in a efficient way.</p>"},{"location":"Git/git/#tagging","title":"Tagging","text":"<p>Tags represent specific points in a repository\u2019s history as being\u00a0important.</p> <pre><code>git tag [optional -l] ## lists the existing tags in the repository\n\n\ngit tag -a v1.0.0 -m \"&lt;message for tagging&gt;\" ## annotated tagging, consists of detailed info on a commit \ngit tag v1.0.0 ## light-weight tagging, only contains the checksum of the commit\n</code></pre> <p>To tag a commit in the later point;</p> <pre><code>git tag -a v1.0.0 &lt;commit number&gt;\n</code></pre> <p>When pushing a commit to a remote repo the tags are not pushed. It has to be pushed explicitly.</p> <pre><code>git push origin &lt;tag-name&gt;\n</code></pre> <p>To delete a tag;</p> <pre><code># Both the commands below are necessary to completely remove a tag from repo.\n# first command removes it from local, while second from remote.\ngit tag -d &lt;tag-name&gt;\ngit push origin --delete &lt;tag-name&gt;\n</code></pre>"},{"location":"Git/git/#git-graphical-interface","title":"Git graphical interface","text":"<p>When git is installed graphical visualization tools like\u00a0<code>gitk</code>\u00a0and\u00a0<code>git-gui</code>\u00a0are also installed.</p> <p><code>gitk</code>\u00a0is a graphical history viewer. Can be used as a powerful version of the\u00a0<code>git log</code></p> <p><code>git-gui</code>, on the other hand, is primarily a tool for crafting commits.</p>"},{"location":"Git/git/#pygit2","title":"pygit2","text":"<p>The bindings for Libgit2 in Python are called Pygit2, and can be found at\u00a0https://www.pygit2.org.</p>"},{"location":"Git/git/#git-branching","title":"Git Branching","text":"<pre><code>git checkout &lt;branch name&gt; OR  git switch &lt;branch name&gt; ## to switch to an existing branch\n\n\ngit checkout -b &lt;branch name&gt; OR git switch -c &lt;branch name&gt; ## to create and checkout to the new branch.\n</code></pre>"},{"location":"Git/git/#merge-a-branch","title":"Merge a branch","text":"<p>If you take a new branch to implement a new feature and create a lot of commits in that branch. You still can keep the commit history clean before merging to the master branch by using below command</p> <pre><code>git merge --sqaush &lt;branch name&gt;\n</code></pre> <p>If you want to use a graphical tool to resolve merge issues, you can run\u00a0<code>git mergetool</code>, which fires up an appropriate visual merge tool and walks you through the conflicts.</p> <pre><code>git mergetool --tool=&lt;tool&gt;\n</code></pre> <p>To see what branches are merged/not merged to the current branch,</p> <pre><code>git branch --merged [optional branch name]\ngit branch --no-merged [optional branch name]\n</code></pre>"},{"location":"Git/git/#list-branches-in-remote","title":"list branches in remote","text":"<pre><code>git branch -r\n</code></pre>"},{"location":"Git/git/#rebasing","title":"Rebasing","text":"<p>With the\u00a0<code>rebase</code>\u00a0command, you can take all the changes that were committed on one branch and replay them on a different branch.</p>"},{"location":"Git/git/#renaming-a-branch","title":"Renaming a branch","text":"<p>To change the branch name use\u00a0<code>--move</code>\u00a0flag in branch command. To change the name in remote too, push the changes to remote.</p> <pre><code>git branch --move &lt;oldt name&gt; &lt;new name&gt;\ngit push --set-upstream origin &lt;new name&gt;\n</code></pre> <p>After pushing the changed branch name to remote, it now has both the old branch and new branch. To delete the old branch from remote;</p> <pre><code>git push origin --delete &lt;old-branch-name&gt;\n</code></pre> <p>Ex; If the goal is to rename branch from <code>master</code> to <code>main</code> , run `git </p>"},{"location":"Git/git/#git-plumbing-and-porceline","title":"Git Plumbing and Porceline","text":"<p>All the user friendly commands that we use like \u00a0<code>checkout</code>,\u00a0<code>branch</code>,\u00a0<code>remote</code>, and so on, are called \u201cporcelain\u201d commands.</p> <p>\"Plumbing\" commands are lower-level commands, because\u00a0they give you access to the inner workings of\u00a0Git.</p>"},{"location":"Git/git/#git-tools","title":"Git Tools","text":""},{"location":"Git/git/#git-interactive-staging","title":"Git interactive staging","text":"<p>If you run\u00a0<code>git add</code>\u00a0with the\u00a0<code>-i</code>\u00a0or\u00a0<code>--interactive</code>\u00a0option, Git enters an interactive shell mode for staging.</p>"},{"location":"Git/git/#stash","title":"Stash","text":"<p>To save your half done work in order to switch to a different branch, use;</p> <pre><code>git stash\n</code></pre> <p>To see which stashes you\u2019ve stored, you can use;</p> <pre><code>git stash list\n</code></pre> <p>To apply the stash after you are back to the branch with half done work use below command. This will apply the latest stash available in the list.</p> <pre><code>git stash apply # apply latest stash\n\ngit stash apply stash@{3} # apply a specific stash with number 3 on the list.\n</code></pre>"},{"location":"Git/git/#clean","title":"Clean","text":"<p>The better way to use <code>git clean</code> command is with <code>interactive</code> flag;</p> <pre><code>git clean -i -x\n</code></pre>"},{"location":"Git/git/#grep","title":"grep","text":"<p>Git ships with a command called\u00a0<code>grep</code>\u00a0that allows you to easily search through any committed tree, the working directory, or even the index for a string or regular expression.</p> <p>In the below command git shows the line number where it has found the match.</p> <pre><code>git grep -n main # here main is the search string.\n</code></pre> <p>To show the search result in a summary use</p> <pre><code>git grep --count main # main is the search string\n</code></pre>"},{"location":"Linux/ubuntu_server/","title":"Ubuntu-server","text":""},{"location":"Linux/ubuntu_server/#ssh","title":"ssh","text":"<p>To enable <code>ssh</code> in system in linux system;</p> <pre><code>sudo apt install openssh-server # for server\nsudo apt install openssh-client # for client\n</code></pre> <p>To enable <code>ssh</code> in windows system;</p> <p>Navigate to System -&gt; Optional Features -&gt; Add an optional feature in windows settings and find <code>OpenSSH Server</code> and enable it.</p> <p>Go to services and make the service run <code>automatically</code>.</p> <p>Similar steps could be followed to enable <code>OpenSSH Client</code> feature in Optional Features. Or <code>PuTTY</code> can be used as a client.</p> <p>To <code>ssh</code> from a Debian WSL to an Ubuntu-Server first you need to have <code>openssh-client</code> in the WSL. Now type the below command to enter into your server.</p> <pre><code>ssh username@&lt;ip-add of server&gt;\n</code></pre>"},{"location":"Linux/ubuntu_server/#to-get-rid-of-entering-password-to-login-to-remote-server","title":"To get rid of entering password to login to remote-server","text":"<p>Use SSH public key encryption to get rid of typing the password all the time when you login to your server. This requires you to generate ssh keypairs.</p> <p>To generate the SSH public and Private key</p> <pre><code>ssh-keygen -t rsa\n</code></pre> <p><code>rsa</code> is one algorithm among the list of algorithms <code>[dsa | ecdsa | ecdsa-sk | ed25519 | ed25519-sk | rsa]</code>. You can provide the <code>passphrase</code> if you wish. The default storage location of the public/private key file is <code>C:\\User\\\\&lt;user-name\\.ssh</code>.</p> <p>Copy the content of  <code>id_rsa.pub</code> file to a file called <code>authorized_keys</code> in <code>~/.ssh</code> folder in linux server.</p>"},{"location":"Linux/ubuntu_server/#scp","title":"scp","text":"<p><code>scp</code> is a file copy/file transfer protocol unlike ftp. It is most secure way of transferring files between the remote systems.</p> <pre><code>scp \"D:\\girishree studio\\KIS_9487.JPG\" jeevan@192.168.30.6:/home/jeevan/Movies\n</code></pre>"},{"location":"Linux/ubuntu_server/#users","title":"users","text":""},{"location":"Linux/ubuntu_server/#add-user","title":"add user","text":"<pre><code>sudo adduser kite\n</code></pre> <p>This asks the <code>sudo</code> password and the new password to be created for the new user.</p>"},{"location":"Linux/ubuntu_server/#change-password","title":"change password","text":"<pre><code>sudo passwd &lt;username&gt;\n</code></pre>"},{"location":"Linux/ubuntu_server/#remove-user","title":"remove user","text":"<pre><code>sudo deluser &lt;username&gt;\n</code></pre>"},{"location":"Linux/ubuntu_server/#to-see-list-of-user","title":"to see list of user","text":"<pre><code>cat /etc/passwd\n</code></pre>"},{"location":"Linux/ubuntu_server/#x11","title":"X11","text":"<p>In order to run a GUI application in server X11 server can be used. </p> <ul> <li> <p>Start an X11 server in windows system Ex; Xming server</p> </li> <li> <p>Open PuTTY and enable the X11 configuration and login to server.</p> </li> <li> <p>Start a GUI application Ex; gedit</p> </li> </ul> <pre><code>sudo apt install gedit\ngedit\n</code></pre> <ul> <li>This will open the GUI in windows machine.</li> </ul>"},{"location":"Linux/ubuntu_server/#public-private-key-encryption","title":"Public-Private key encryption","text":"<p>Public key encrypts the data. Private key decrypts the data.</p>"},{"location":"Linux/ubuntu_server/#how-public-private-key-cryptography-works","title":"How Public-Private Key Cryptography Works","text":"<p>If A wants to send a message to B, A takes public key of B and encrypts the message with it and sends it to B. B uses the private key associated with his public key to decrypt the message. Since message is encrypted with B's Public key, it can only be decrypted by B's private key. So no middle man in between can decrypt the message and message is safe.</p> <p>However, with this form of messaging there is no way to authenticate the source of the message. Anonymous person C can act like A to send message to B. Bjust thinks that the message came from A but actually its not.</p> <p>To overcome this problem below methods are followed:</p>"},{"location":"Linux/ubuntu_server/#digital-signature","title":"Digital signature","text":"<p>B would not trust any message with which do not have a digital signature. In addition to message, A sends a Digital signature with it created by his private key. Since B knows A's public key, B can make sure the private key belongs to A by using A's public key. </p>"},{"location":"Linux/ubuntu_server/#adding-a-new-repository-to-apt","title":"Adding a new repository to <code>apt</code>","text":"<p>When <code>apt install python</code> is run, <code>apt</code> directs to standard repositories that are configured in <code>/etc/apt/sources.list</code> directory to find python package.</p> <p>If certain intended package is not found while running <code>apt install &lt;app-name&gt;</code> command, that signifies that the package that you are finding is not part of the standard links that are configured in the <code>source.list</code> file.</p> <p>For example;</p> <pre><code>sudo apt install cloudflared\n\nOUTPUT:\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nE: Unable to locate package cloudflared\n</code></pre> <p>apt is unable to locate the package because the application cloudflare is not part of the standard repository links pre-configured in the source.list file</p>"},{"location":"Linux/ubuntu_server/#add-new-configurations-to-sourcelistd","title":"Add new configurations to source.list.d","text":"<p>New repository links must be added in case a package is not found in the standard links. User added links must be added to a folder called <code>source.list.d</code> by creating a new file. User defined repository links must not be added in the standard <code>source.list</code> file.</p> <p>Example, In case of <code>cloudflare</code> below commands are run inorder to add a new repository to <code>apt</code></p> <pre><code># Add cloudflare gpg key\nsudo mkdir -p --mode=0755 /usr/share/keyrings\ncurl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-main.gpg &gt;/dev/null\n\n# Add this repo to your apt repositories\necho 'deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared any main' | sudo tee /etc/apt/sources.list.d/cloudflared.list\n\n# install cloudflared\nsudo apt-get update &amp;&amp; sudo apt-get install cloudflared\n</code></pre> <p>The GPG key (GNU Privacy Guard key) is a cryptographic key used to verify the authenticity of software packages and the repository they're coming from.</p>"},{"location":"Linux/ubuntu_server/#why-add-a-gpg-key-before-adding-a-repository","title":"\ud83d\udccc Why Add a GPG Key Before Adding a Repository?","text":"<p>When you install software using <code>apt</code> from an external source (like Cloudflare), you want to make sure:</p> <ul> <li> <p>The packages really came from Cloudflare.</p> </li> <li> <p>The packages haven't been tampered with.</p> </li> </ul> <p>To do this, apt uses GPG keys to verify the digital signatures of the packages in the repository.</p> <p>So the flow is:</p> <ol> <li> <p>Cloudflare signs its packages with its private GPG key.</p> </li> <li> <p>You add the public GPG key to your system (the first command).</p> </li> <li> <p>When you run <code>apt</code>, it:</p> </li> <li> <p>Checks the signature of the packages.</p> </li> <li> <p>Verifies the signature using the public key you installed.</p> </li> <li> <p>Refuses to install if the signature doesn\u2019t match.</p> </li> </ol>"},{"location":"Miscellaneous/Data_Structurs/","title":"Data Structures","text":"<p>Data structure is the collection of datatypes.</p> <p>For example, Linear data structure is a collection of sequential datatypes like List, LinkedList,Queue, Stack</p>"},{"location":"Miscellaneous/Data_Structurs/#linear-datastructure","title":"Linear DataStructure","text":"<p>It is a collection of datatypes where data is arranged sequentially. </p> <p>Ex : Array, Linkedlist, Queue, Stack</p>"},{"location":"Miscellaneous/Data_Structurs/#non-linear-data-structure","title":"Non-linear Data Structure","text":"<p>It is a collection of data type where the data is arranged non linearly (hierarchical order).</p> <p>Ex: Tree, Graph, Map</p>"},{"location":"Miscellaneous/Data_Structurs/#asymptotic-notations","title":"Asymptotic notations","text":"<p>There are three asymptotic notation</p> <ul> <li> <p>Big O notation </p> </li> <li> <p>Omega notation</p> </li> <li> <p>Theta notation</p> </li> </ul>"},{"location":"Miscellaneous/Data_Structurs/#big-o-notation","title":"Big O notation","text":"<p>Big O notation describs the upper bound of a function that is worst case complexity of an algorithm or functoin. </p>"},{"location":"Miscellaneous/Data_Structurs/#omega-notation","title":"Omega (\u03a9) notation","text":"<p>Omega notation describs about the lower bound of a function that is the best case coplexity of an algorithm or a functoin.</p>"},{"location":"Miscellaneous/Data_Structurs/#theta-notation","title":"Theta (\u03b8) notation","text":"<p>Theta notation describes the average </p>"},{"location":"Miscellaneous/Data_Structurs/#linked-list","title":"Linked List","text":"<p>Since adding and deleting of the element at the beginning and end of a list is efficient using <code>linked lists</code> , these are used to construct <code>Queues</code></p> Operation Time Complexity of List Time Complexity of Linked List add/remove element to the beginning O(n) O(1) add/remove element at the end O(1) O(1) Retrieve element O(1) O(n) List uses indexes which is faster. Linked list uses traversing. Search for specific element O(n) O(n) Both uses traversing to search element <p><code>List</code> uses contiguous memory allotment. To append to the left/head of the list it takes O(n) computations, as a new empty memory block has to be created at the beginning of the list. This operation requires existing elements to shift one position to the right resulting in <code>n</code> operations. Similarly, removing an element form the left also requires each remaining elements to be shifted to the left, resulting in <code>n-1</code> operations and hence O(n) time complexity.</p> <p>On the other hand append and pop form the right doesn't need shifting of <code>n</code> elements from the  list. hence O(1) time complexity.</p>"},{"location":"Miscellaneous/Data_Structurs/#collectionsdeque-pronounced-deck","title":"collections.deque (pronounced <code>deck</code>)","text":"<p>This is the <code>linked list</code> implementation in python. Takes <code>O(1)</code> time complexity. Easy to insert, remove, access element from both ends of a list.</p> <p>Recommended to be used for the implementation of <code>queues</code> and <code>stacks</code></p> <p>If thread operations are used on  <code>queues</code> and <code>stacks</code> , it is recommended to use <code>Queues</code> library in python. But <code>deques</code> can also be used with some trade offs. </p> <p><code>deques</code> have a feature to restrict the maximum length of your deques.</p>"},{"location":"Miscellaneous/Data_Structurs/#linked-list-without-using-deque-library","title":"Linked list without using <code>deque</code> library:","text":"<p><code>SinglyLinkedList</code> has <code>head</code> as a parameter. The efficiency can be increased a little by adding a <code>tail</code> parameter. Although <code>tail</code> parameter do not help in pop() method, it at least helps in other operations.</p> <pre><code>SinglyLinkedList.py\n\n\nclass EmptyLinkedList(Exception):\n    ...\n\nclass Node:\n    def __init__(self, data:str) -&gt; None:\n        self.data = str(data)\n        self.next = None\n\nclass SingleLinkedList:\n    def __init__(self) -&gt; None:\n        self.head = None\n        self.tail = None\n\n    def __repr__(self) -&gt; str:\n        head = self.head\n        sll_repr = []\n        while head:\n            sll_repr.append(head.data)\n            head = head.next\n        return \"-&gt;\".join(sll_repr)\n\n    def append(self, data):\n        '''- This method doesn't use the tail parameter\n           - Uses traversal to get to the point where append\n             needs to be done.\n           - Traversal takes time for larger list O(n)'''\n        head = self.head\n        if head == None:\n            head = Node(data)\n            self.head = head\n            return None\n        while head.next:\n            head = head.next\n        head.next = Node(data)\n\n    def pop(self):\n        '''- This method doesn't use the tail parameter\n           - Uses traversal to get to the point where remove\n             needs to be done.\n           - Traversal takes time for larger list O(n)'''\n        head = self.head\n        if head == None:\n            raise EmptyLinkedList(\"Operating on empty linked list\")\n        elif head.next == None:\n            self.head = None\n            return None\n        while head.next.next:\n            head = head.next\n        head.next = None\n\n    def tail_pop(self):\n        '''pop using tail parameter is not possible in singly linked list\n            Because tail is pointing to last element which is supposed to be removed\n            pointing it to the one element previous to tail needs another pointer\n        '''\n\n    def append_left(self, data):\n        '''append_left also takes O(1) as head pointer is always pointing to \n        the beginning of the list'''\n        head = self.head\n        new_node = Node(data)\n        new_node.next = head\n        self.head = new_node\n\n    def pop_left(self):\n        '''pop left takes O(1) as head pointer is already there'''\n        try:\n            self.head = self.head.next\n        except AttributeError:\n            raise EmptyLinkedList(\"Operating on empty linked list\") from None\n\n    def tail_append(self, data):\n        '''- Tail append uses tail parameter\n           - appending to the tail takes O(1) time complexity\n        '''\n        head = self.head\n        tail = self.tail\n        if head == None:\n            head = Node(data)\n            self.head, self.tail = head, head\n            return None\n        if tail == head:\n            tail = Node(data)\n            self.head.next = tail\n            self.tail = tail\n            return None\n        tail.next = Node(data)\n        self.tail = tail.next\n</code></pre>"},{"location":"Miscellaneous/Data_Structurs/#sorting-technique","title":"Sorting Technique","text":"<p>Most efficient sorting technique is <code>Quick sort</code> , <code>Merge Sort</code> and <code>Heap Sort</code> </p> <p>Merge sort is used to sort Linked Lists</p> Algorithm Best Case Worst Case Average Case Space Complexity Stable? In-place? Suitable For Bubble Sort O(n) O(n\u00b2) O(n\u00b2) O(1) \u2705 \u2705 Small datasets, nearly sorted lists Selection Sort O(n\u00b2) O(n\u00b2) O(n\u00b2) O(1) \u274c \u2705 Small datasets, learning purposes Insertion Sort O(n) O(n\u00b2) O(n\u00b2) O(1) \u2705 \u2705 Small datasets, nearly sorted lists Merge Sort O(n log n) O(n log n) O(n log n) O(n) \u2705 \u274c Large datasets, linked lists Quicksort O(n log n) O(n\u00b2) O(n log n) O(log n) \u274c \u2705 General-purpose sorting, most efficient in practice Counting Sort O(n + k) O(n + k) O(n + k) O(k) \u2705 \u274c When <code>k</code> (range of values) is small Radix Sort O(nk) O(nk) O(nk) O(n + k) \u2705 \u274c Large integers, fixed-length keys Bucket Sort O(n + k) O(n\u00b2) O(n + k) O(n) \u2705 \u274c Uniformly distributed numbers Heap Sort O(n log n) O(n log n) O(n log n) O(1) \u274c \u2705 Priority queues, when space is limited Shell Sort O(n log n) O(n\u00b2) O(n log n) O(1) \u274c \u2705 Medium-sized datasets"},{"location":"Miscellaneous/Docker/","title":"Docker","text":""},{"location":"Miscellaneous/Docker/#list-downloaded-images","title":"List downloaded images","text":"<pre><code>docker images\nOR\ndocker image ls\n</code></pre>"},{"location":"Miscellaneous/Docker/#list-running-images","title":"List running images","text":"<pre><code>docker ps\n</code></pre>"},{"location":"Miscellaneous/Docker/#list-running-and-stopped-images","title":"List running and stopped images","text":"<pre><code>docker ps --all \nOR\ndocker ps -a\n</code></pre>"},{"location":"Miscellaneous/Docker/#download-from-dockerhub","title":"Download from dockerHub","text":"<pre><code>docker pull &lt;imageName&gt;:&lt;TagName&gt;\n</code></pre>"},{"location":"Miscellaneous/Docker/#run-container","title":"Run container","text":"<p><code>run</code> verifies if the image is already available locally. If not, it downloads the image, if available on the docker hub and then runs it.</p> <pre><code>docker run &lt;imageName&gt;:&lt;TagName&gt;\n</code></pre>"},{"location":"Miscellaneous/Docker/#run-the-container-in-the-background","title":"Run the container in the background","text":"<p><code>d</code> refers to detached mode.</p> <pre><code>docker run -d redis:7.2-bookworm\n</code></pre>"},{"location":"Miscellaneous/Docker/#run-container-in-interactive-mode","title":"Run container in interactive mode","text":"<pre><code>docker run -it &lt;imagename&gt;:&lt;tagname&gt;\n</code></pre>"},{"location":"Miscellaneous/Docker/#stop-a-running-container","title":"Stop a running container","text":"<pre><code>docker stop &lt;container name&gt;\n</code></pre>"},{"location":"Miscellaneous/Docker/#port-binding-example","title":"Port binding example","text":"<p>Run nginx server and use the port binding to see the page on the <code>localhost</code></p> <pre><code>docker run nginx\n\n&gt;&gt; Unable to find image 'nginx:latest' locally\n&gt;&gt; latest: Pulling from library/nginx\n</code></pre> <p>The above command doesnt do much, as the port binding is not done to see the default page in the browser.</p> <pre><code>docker run -p 80:80 nginx\n\n&gt;&gt; Unable to find image 'nginx:latest' locally\n&gt;&gt; latest: Pulling from library/nginx\n</code></pre> <p></p> <p>To bind the port to port number <code>5000</code> in your system</p> <pre><code>docker run -p 5000:80 nginx\n\n&gt;&gt; Unable to find image 'nginx:latest' locally\n&gt;&gt; latest: Pulling from library/nginx\n</code></pre> <p></p>"},{"location":"Miscellaneous/Docker/#delete-all-the-stopped-containers","title":"Delete all the stopped containers","text":"<p>Stopped containers accumulate unless you delete it. It can be deleted from the docker desktop or using below command.</p> <pre><code>docker container prune\n</code></pre>"},{"location":"Miscellaneous/Docker/#automatically-delete-the-container-after-it-stops","title":"Automatically delete the container after it stops","text":"<p>Use <code>--rm</code> flag to the <code>run</code> command to automatically delete the container after it is stopped.</p> <pre><code>docker run -p 5000:80 nginx --rm -d\n\n&gt;&gt; Unable to find image 'nginx:latest' locally\n&gt;&gt; latest: Pulling from library/nginx\n</code></pre>"},{"location":"Miscellaneous/Docker/#environment-variables","title":"Environment variables","text":"<p>To pass environment variables at run time</p> <pre><code>docker run -e JIRA_PAT=MYuOUgiy22435FHTFyt87108cywiu9\n</code></pre>"},{"location":"Miscellaneous/Docker/#slim-and-alpine-images","title":"Slim and alpine images","text":"<p><code>Slim</code> images are lower in size compared to the original image. <code>Alpine</code> images are still more smaller in size compared to slim. <code>Slim</code> images are mostly based on the debian distro whereas <code>Alpine</code> images are based on <code>Arch</code> linux. </p>"},{"location":"Miscellaneous/Docker/#run-a-command-in-a-running-container","title":"Run a command in a running container","text":"<p>To run a command or open the bash in  an already running container;</p> <pre><code>docker exec -it objective_poincare /bin/bash\n</code></pre> <p>This opens a shell in the container in the already running container <code>objective_poincare</code></p>"},{"location":"Miscellaneous/Docker/#build-a-a-custom-docker-image","title":"Build a a custom docker image","text":"<p>To build a custom docker image you need a <code>Dockerfile</code> </p> <pre><code># Dockerfile\n\n\nFROM debian:bookworm-slim\nRUN apt update\nRUN apt install -y python3 python3-pip git\nWORKDIR /app\nRUN git clone https://github.com/deluge-torrent/deluge.git\nWORKDIR /app/deluge\nCMD [ \"bash\" ]\n</code></pre> <p>This command is used to build a <code>Dockerfile</code> to an image. <code>.</code> represent the path where docker has to look to find the <code>Dockerfile</code> , current directory in this case.</p> <pre><code>docker build -t debian:1.0.0 .\n\nOR\n\ndocker build -t debian:1.0.0 -f &lt;path to Dockerfile&gt;\n</code></pre>"},{"location":"Miscellaneous/Flask/","title":"Flask","text":""},{"location":"Miscellaneous/GoogleITAutomatin/","title":"System Crashing","text":""},{"location":"Miscellaneous/GoogleITAutomatin/#check-the-health-of-ram","title":"Check the health of RAM","text":"<p><code>memtest 86</code> tool is run in boot instead of normal operating system.</p> <p>System crash log files are located in <code>/var/log</code> in linux and for windows we can look at the <code>Event Viewer</code> tool.</p> <p><code>strace</code> (system trace) can also be used in linux to find out which system call is made during the crash to identify the root cause. </p>"},{"location":"Miscellaneous/GoogleITAutomatin/#configuration-management-cloud","title":"Configuration management Cloud","text":"<p>Configuration management is an Automation technique which let manage computers at a large scale.</p> <p><code>puppet</code> is current industry standard for config-management.</p>"},{"location":"Miscellaneous/GoogleITAutomatin/#disk-usage","title":"disk usage","text":"<p>To check disk usage of your system using python use</p> <pre><code>import shutil\ndisk_usage = shutil.disk_usage(\"/\")\nprint(disk_usage) \n\n&gt;&gt;usage(total=982240026624, used=45239689216, free=887029821440)\n</code></pre>"},{"location":"Miscellaneous/GoogleITAutomatin/#cpu-usage","title":"cpu usage","text":"<p>To check cpu usage use <code>psutil</code> in python</p>"},{"location":"Miscellaneous/GoogleITAutomatin/#strace","title":"strace","text":"<p>gives the trace of  systemcalls made by any program and tell the result of each of the calls made by the program.</p> <pre><code>strace trial.py\n</code></pre> <pre><code>mmap(NULL, 172296, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7eff145b3000\nmmap(0x7eff145b6000, 110592, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x3000) = 0x7eff145b6000\nmmap(0x7eff145d1000, 45056, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1e000) = 0x7eff145d1000\nmmap(0x7eff145dc000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x28000) = 0x7eff145dc000\nclose(3)                                = 0\nmprotect(0x7eff145dc000, 4096, PROT_READ) = 0\nmprotect(0x7eff145e8000, 4096, PROT_READ) = 0\nmunmap(0x7eff145fd000, 26071)           = 0\nstatfs(\"/\", {f_type=EXT2_SUPER_MAGIC, f_bsize=4096, f_blocks=239804694, f_bfree=228791752, f_bavail=216591919, f_files=60981248, f_ffree=60855621, f_fsid={val=[0x7fa55e7a, 0x8782ee03]}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RELATIME}) = 0\nwrite(1, \"usage(total=982240026624, used=4\"..., 63usage(total=982240026624, used=45109010432, free=887160500224)\n) = 63\nrt_sigaction(SIGINT, {sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER|SA_ONSTACK, sa_restorer=0x7eff14cc1520}, {sa_handler=0x561cf4939980, sa_mask=[], sa_flags=SA_RESTORER|SA_ONSTACK, sa_restorer=0x7eff14cc1520}, 8) = 0\nmunmap(0x7eff1470d000, 151552)          = 0\nexit_group(0)                           = ?\n+++ exited with 0 +++\n</code></pre> <p>Output shows a lot of systemcall details.</p> <pre><code>strace -o output.trace trial.py\n</code></pre> <p>This time the output of the <code>strace</code> command is stored in a trace file.</p>"},{"location":"Miscellaneous/GoogleITAutomatin/#see-disk-input-and-output","title":"see disk input and output","text":"<pre><code>top\niotop -&gt; show the disk usage\niostat\nvmstat\nionice\n\n\niftop -&gt; shows current traffic on network interfaces\nnice -&gt; modify the priority of a process inorder to access CPU time.\nrenice -&gt; modify the priority of a running process\n</code></pre> <pre><code>pidof jellyfin # prints the PID of the running process named jellyfin\n\n\nps ax | less # shows all the running process on computer\n# less is used to scroll through the command line output\n</code></pre>"},{"location":"Miscellaneous/GoogleITAutomatin/#using-python-to-interact-with-os","title":"Using python to interact with OS","text":"<p>Use <code>perato principle</code> determine which task to automate</p>"},{"location":"Miscellaneous/GoogleITAutomatin/#some-of-the-useful-system-adm-function-in-python","title":"Some of the useful system adm function in python","text":"<ul> <li> <p>shutil.disk_usage</p> </li> <li> <p><code>psutil</code> Module</p> </li> </ul>"},{"location":"Miscellaneous/GoogleITAutomatin/#configuration-management-and-the-cloud","title":"Configuration management and the Cloud","text":"<p>In this course we learn <code>puppet</code> which is current industry standard for configuration management.</p>"},{"location":"Miscellaneous/GoogleITCourse/","title":"GoogleIT Course","text":""},{"location":"Miscellaneous/GoogleITCourse/#interpreted-languages","title":"Interpreted languages","text":"<ul> <li> <p>Python </p> </li> <li> <p>Ruby</p> </li> <li> <p>Javascript</p> </li> <li> <p>Bash</p> </li> <li> <p>Powershell</p> </li> </ul> <p>In <code>Windows</code> system python file can be run without adding <code>python</code> in front of it.</p> <p>Ex : File <code>chocolate.py</code> can be run as <code>chocolate.py</code> and <code>python chocolate.py</code></p>"},{"location":"Miscellaneous/GoogleITCourse/#__init__py-file-in-a-module","title":"__init__.py file in a module:","text":"<p>If you want python to consider a directory consisting of python files as a module, then you are required to create a <code>__init__.py</code> file inside the directory. This file can be empty, but the file need to be present in the directory.</p>"},{"location":"Miscellaneous/GoogleITCourse/#_1","title":"GoogleIT Course","text":""},{"location":"Miscellaneous/GoogleITCourse/#git","title":"Git","text":"<p>To avoid entering username and password every time when you clone a repo or push the changes;</p> <ul> <li> <p>Generate SSH key pair and store the public in your profile</p> </li> <li> <p>use Credential helper</p> </li> </ul>"},{"location":"Miscellaneous/GoogleITCourse/#credential-helper","title":"credential helper","text":"<pre><code>git config --global credential.helper cache\n</code></pre> <p>After enabling <code>credential helper</code> , type the password one last time.</p>"},{"location":"Miscellaneous/How_HTTPS_Works/","title":"How HTTPS Works","text":""},{"location":"Miscellaneous/How_HTTPS_Works/#handshake","title":"Handshake","text":"Client Server send a list of SSL/TLS versions and encryption algorithms that client can work with choose the best SSL/TLS version and encryption algorithm among the ones sent by client reply with certificate, which includes public key, so client can verify who I am. Verifies servers certificate to make sure its Legit. Generate a symmetric Key and encrypt it with Servers Public Key and send it to server Server decrypts the message using private key and finds symmetric key, and uses it for any further communication."},{"location":"Miscellaneous/How_HTTPS_Works/#ssltls","title":"SSL/TLS","text":"<p>SSL protocol was created in the 90s. It is deprecated and is now evolved as TLS. So the names are used interchangably..</p>"},{"location":"Miscellaneous/How_HTTPS_Works/#certificate-authorities","title":"Certificate Authorities","text":"<p><code>Let's Encrypt</code> is one of the examples for a certificate authority (CA). Certificates are obtained by CA. </p> <p>Self-signed certificates also provide same level of secutiry as a certificate issued by CA. But browsers are designed to trust a certificate issued by trusted authority. Therefore even if self-signed certificate provide same level of security, they are not trusted by the browser.</p> Self-signed certificate CA signed certificate It says \"Trust me, please! I promise its me!\" It says \"Trust me! Im verified by trusted Authority!\" <p>Some of the popular CA are</p> <ul> <li> <p>Symantec</p> </li> <li> <p>Comodo</p> </li> <li> <p>Let's Encrypt</p> </li> </ul> <p>Most of the time the certificate is signed by an Intermediate certificate which is signed by Root certificate.</p>"},{"location":"Miscellaneous/How_HTTPS_Works/#steps-involved-in-certificate-validation","title":"Steps Involved in Certificate Validation","text":"<ul> <li> <p>The browser connects to a site via HTTPS and downloads the site's certificate.</p> </li> <li> <p>If the downloaded certificate is not a root certificate, the browser attempts to download the intermediate certificate that was used to sign it.</p> </li> <li> <p>If the intermediate certificate is also not a root certificate, the browser tries to download the certificate that signed the intermediate certificate.</p> </li> <li> <p>The browser eventually finds the root certificate, which is issued by a trusted Certificate Authority (CA). As a result, it trusts the entire Certificate chain</p> </li> </ul>"},{"location":"Miscellaneous/Jira_Testing_Cycle/","title":"Jira Testing Cycle","text":""},{"location":"Miscellaneous/Jira_Testing_Cycle/#planning-and-creating-test-cases","title":"Planning and creating test cases.","text":"<ul> <li> <p>requirement gathering: gather based on user stories.\u00a0</p> </li> <li> <p>test case design: Each test case should have clear steps, expected results, and any prerequisites.\u00a0</p> </li> </ul>"},{"location":"Miscellaneous/Jira_Testing_Cycle/#organize-the-test-cases","title":"Organize the test cases.","text":"<ul> <li> <p>Test Plan: outlines the scope, objectives, resources, and schedule for the testing activities.\u00a0</p> </li> <li> <p>Test Suites: Group related test cases into test suites for better organization and management.\u00a0</p> </li> </ul>"},{"location":"Miscellaneous/Jira_Testing_Cycle/#execution","title":"Execution","text":"<p>Test Execution: execute manually or automatically. Note the results in each test step or test case. Attache required evidence.\u00a0</p>"},{"location":"Miscellaneous/Jira_Testing_Cycle/#report-bug","title":"Report bug","text":"<p>Issues found during testing? Create a bug ticket to dev team. Link the relevant test case/user story/requirement to the bug ticket.\u00a0</p>"},{"location":"Miscellaneous/Jira_Testing_Cycle/#retest","title":"Retest","text":"<p>After the bug is fixed, the test is redone to ensure its fixed.\u00a0</p>"},{"location":"Miscellaneous/Jira_Testing_Cycle/#test-summary","title":"Test summary","text":"<p>At the end of the testing cycle, compile a test summary report that highlights the overall test execution status, key findings, and any remaining risks.</p>"},{"location":"Miscellaneous/Jira_Testing_Cycle/#basic-testing-cycle","title":"Basic testing cycle","text":"<p>Testing hierarchy is categorized into four levels;</p> <ul> <li> <p>Unit testing : During development phase. </p> </li> <li> <p>Integration testing</p> </li> <li> <p>System testing</p> </li> <li> <p>Regression Testing : test the maintenance of the application.</p> </li> </ul>"},{"location":"Miscellaneous/Jira_Testing_Cycle/#unit-testing","title":"Unit Testing","text":"<p>Performed during the development phase of a software. Testing is done for each small unit of a code module wise. Test cases can be designed in two methods here; </p> <p>Using Blackbox method and whitebox method.</p> <p>Black box test cases are written in the interest of input given and output observed only. The internal structure of the code is not the consideration here. Whitebox on the other hand considers all the internal codes.</p>"},{"location":"Miscellaneous/Jira_Testing_Cycle/#integration-testing","title":"Integration Testing","text":"<p>All the units which are tested separately in unit testing are now integrated with each other rand is tested.</p>"},{"location":"Miscellaneous/Jira_Testing_Cycle/#system-testing","title":"System testing","text":"<p>This is where the end product is tested on a system level</p> <p>Non functional testing like load, stress testing comes under this. </p>"},{"location":"Miscellaneous/Jira_Testing_Cycle/#regression-testing","title":"Regression testing","text":"<p>Usual maintenance of the product is tested. New add on feature is tested. </p>"},{"location":"Miscellaneous/Jira_Testing_Cycle/#sdlc-software-development-lifecycle","title":"SDLC ( Software development lifecycle):","text":"<ul> <li> <p>Requirement</p> </li> <li> <p>analysis</p> </li> <li> <p>design : high level design, low level design</p> </li> <li> <p>coding : build the software</p> </li> <li> <p>testing : test for defect</p> </li> <li> <p>deployment/ maintenance : </p> </li> </ul> <p>SLA : service level agreement</p> <p>Agile, waterfall, spiral are different types of SDLC models</p>"},{"location":"Miscellaneous/Jira_Testing_Cycle/#waterfall","title":"Waterfall:","text":"<p>sequesntial design</p> <p>every next phase is began when goal of the previous phase is completed</p> <p>this is preferred where quality is important</p> <p>Requirements are fixed here and cant be changed in the progress different phases</p> <p>If requirement change then this is not a best suited model'</p>"},{"location":"Miscellaneous/Jira_Testing_Cycle/#boehm-spiral-model","title":"Boehm Spiral model","text":"<p>plan -&gt; risk analysis -&gt; coding testing -&gt; customer evaluation </p> <p>The above step repeat after the release of one version and getting customer feedback.</p> <p>Development of next version is going on while existing version is still there</p> <p>next version is based on user feedback</p> <p>Allows requirement changes</p> <p>not suitable for small project</p>"},{"location":"Miscellaneous/MkDocs/","title":"Material for MkDocs","text":""},{"location":"Miscellaneous/MkDocs/#getting-started","title":"Getting started","text":"<p>Install <code>mkdocs-material</code></p> <pre><code>pip install mkdocs-material\n</code></pre> <p>Initialaize new project, <code>.</code> is used to initialize the project in the current working directory.</p> <pre><code>mkdocs new .\n</code></pre> <p>Project Directory looks something like;</p> <pre><code>\u251c\u2500\u2500\u2500docs\n\u2502       index.md \n\u251c\u2500\u2500\u2500mkdocs.yml\n</code></pre> <p>Quick look on the page can be made using</p> <pre><code>mkdocs serve\n</code></pre> <p>This stats the server at http://127.0.0.1:8000</p> <p>Site can be publised to GitPages using the below actions workflow</p> <pre><code>name: ci \non:\n  push:\n    branches:\n      - master \n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Configure Git Credentials\n        run: |\n          git config user.name github-actions[bot]\n          git config user.email 41898282+github-actions[bot]@users.noreply.github.com\n      - uses: actions/setup-python@v5\n        with:\n          python-version: 3.x\n      - run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV \n      - uses: actions/cache@v4\n        with:\n          key: mkdocs-material-${{ env.cache_id }}\n          path: .cache \n          restore-keys: |\n            mkdocs-material-\n      - run: pip install mkdocs-material \n      - run: mkdocs gh-deploy --force\n</code></pre> <p>This actions basically runs <code>mkdocs gh-deploy</code> command to deploy the site into github</p>"},{"location":"Miscellaneous/MkDocs/#customization","title":"customization","text":"<p>custom javascript and css can be added as given below</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 stylesheets/\n\u2502  \u2502  \u2514\u2500 extra.css \n\u2502  \u2514\u2500 javascripts/\n\u2502     \u2514\u2500 extra.js\n\u2514\u2500 mkdocs.yml\n</code></pre>"},{"location":"Miscellaneous/MkDocs/#theam-extension","title":"Theam extension","text":"<p>If you want to alter the HTML source (e.g. add or remove some parts), you can extend the theme. MkDocs supports\u00a0theme extension, an easy way to override parts of Material for MkDocs</p> <pre><code>theme:\n  name: material\n  custom_dir: overrides\n</code></pre> <p>create a folder called <code>overrides</code> and add the custom html files.</p> <p>The folder structure, foldernames and file names under <code>overrides</code> folder must match the standard theams folder/file names and structure. Materials for MkDocs replaces the intended file with a custom file it it find the file with same name.</p>"},{"location":"Miscellaneous/MkDocs/#writing-own-theam","title":"writing own theam","text":"<p>In order to write own theam, below configuration must be used in the <code>mkdocs.yml</code></p> <pre><code>theme:\n  name: null\n  custom_dir: overrides\n</code></pre> <p><code>theam.name</code> = null, makes mkdocs to use them written in overrides folder which is located in the same path as <code>mkdocs.yml</code></p> <p>Learn about writing own theam at Themes - MkDocs documentation.</p>"},{"location":"Miscellaneous/SQL/","title":"SQL","text":""},{"location":"Miscellaneous/SQL/#alter-table","title":"ALTER TABLE","text":"<pre><code>ALTER TABLE testing\nADD COLUMN test_age INTEGER;\n</code></pre> <p>Remove a column</p> <pre><code>ALTER TABLE testing\nDROP COLUMN test_age;\n</code></pre>"},{"location":"Miscellaneous/SQL/#select","title":"SELECT","text":"<p>If <code>hero</code> is a table, then below command can be used to select hero_age column from it.</p> <pre><code>SELECT hero_age from hero;\n\nOR\n\nSELECT hero.hero_age from hero;\n</code></pre> <p>To select distinct items from a column,</p> <pre><code>SELECT DISTINCT hero_age from hero;\n</code></pre>"},{"location":"Miscellaneous/SQL/#interview-questions","title":"Interview Questions","text":"<ol> <li>Difference between <code>where</code> and <code>having</code> </li> </ol> <p>Both the clauses are used to apply conditions on data. Where is used to applu conditions on a table like data, on the other hand Having is used to apply conditoins on data returned by aggregate functions like count(), avg(), max(), min() etc... These functions return a scalar value and not set of values(table like structure).</p>"},{"location":"Miscellaneous/cloud/","title":"Azure Cloud","text":""},{"location":"Miscellaneous/cloud/#infrastructure-as-a-service-iaas","title":"Infrastructure as a service (IaaS)","text":"<p>Infrastructure as a service refers to providing complete aaccess to the servers OS. Typically, laaS provides hardware, storage, servers and data center space or network components; it may also include software.</p>"},{"location":"Miscellaneous/cloud/#platform-as-a-service-paas","title":"Platform as a service (PaaS)","text":"<p>In Platform as a Service, one does not get access to the whole Operating System. Rather access is given at a Dashboard level, where a user uploads the data, and the rest is taken care by the cloud provider.</p>"},{"location":"Miscellaneous/cloud/#software-as-a-service-saas","title":"Software as a service (SaaS)","text":"<p>Software as a Service refers to the practice of directly providing the software to the customer, without making any server or dashboard available to them. Ex. Google Drive</p>"},{"location":"Miscellaneous/cloud/#azure-core-architecture","title":"Azure core architecture","text":"<p>Azure has 4 agents that can interact with the Azure resources</p> <ul> <li> <p>Azure Portal</p> </li> <li> <p>Azure Powershell</p> </li> <li> <p>Azure CLI</p> </li> <li> <p>REST Client</p> </li> </ul> <p>All these agents are capable of interactivng with the Azure Resource Manager, which inturn connects the agent to the requires service.</p>"},{"location":"Miscellaneous/cloud/#azure-services","title":"Azure services","text":"<p>Azure provides services in below domains</p> <ul> <li> <p>Compute</p> </li> <li> <p>Networks</p> </li> <li> <p>File Storage</p> </li> <li> <p>Database</p> </li> <li> <p>Identity</p> </li> <li> <p>Management</p> </li> <li> <p>AI + ML</p> </li> </ul>"},{"location":"Miscellaneous/cloud/#compute","title":"Compute","text":""},{"location":"Miscellaneous/cloud/#virtual-machine-iaas","title":"Virtual Machine (IaaS)","text":"<p>Its a server/ fresh computer whcih has an OS just installed and no other software installed. Its like a Bare miinnimum computer. Azure gives remote connection access to it. If windows remote desktop can be used to connect, if linux SSH.</p>"},{"location":"Miscellaneous/cloud/#function-app-paas","title":"Function App (PaaS)","text":"<p>One do not get the access to the operating system. Its like a developer gets a dashboard where he can upload a code that needs to be run as a baackend service in the cloud which accepts images form user. Only the code is delployed as a service and developer is not given the access to the OS.</p> <p>Website can not be deployed here as this is a system wehre it accespts input and gives outptu. </p>"},{"location":"Miscellaneous/cloud/#app-service-paas","title":"App Service (PaaS)","text":"<p>Launch or Deploy website. User gets dashboard where upload website files/ code. No access to OS here too.</p>"},{"location":"Miscellaneous/cloud/#azure-kubernetet-service","title":"Azure Kubernetet Service","text":"<p>Azure Kubernetes Service (AKS) is a managed container orchestration service, based on the open source Kubernetes system, which is available on the Microsoft Azure public  cloud.</p>"},{"location":"Miscellaneous/cloud/#networking","title":"Networking","text":""},{"location":"Miscellaneous/cloud/#virtual-network","title":"Virtual Network","text":"<p>If one buys two or there servers and wants those server to talk to each other, it can be placed in a virtual network. This will emulate the scenario where all the servers are in a same network. If Virtual network is not bought, then the servers have to rely on internet to talk to eaach other by opening a port between each other. (no so secure).</p> <p>Other Networking services:</p> <ul> <li> <p>Load Balancer</p> </li> <li> <p>Application gateway</p> </li> <li> <p>DNS Zones</p> </li> <li> <p>Content Delivery Network (CDN)</p> </li> </ul>"},{"location":"Miscellaneous/cloud/#database","title":"Database","text":"<ul> <li> <p>Data Lake Analytics</p> </li> <li> <p>Event Hubs</p> </li> <li> <p>Data Factory</p> </li> <li> <p>CosmosDB</p> </li> <li> <p>SQL Database</p> </li> </ul>"},{"location":"Miscellaneous/cmdTricks/","title":"Command Prompt Tricks","text":""},{"location":"Miscellaneous/cmdTricks/#_1","title":"Command Prompt Tricks","text":""},{"location":"Miscellaneous/cmdTricks/#open-cmd-as-an-administrator-and-run-below-command-to-open-environment-variable-window","title":"Open CMD as an Administrator and run below command to open Environment Variable window.","text":"<p><code>rundll32.exe sysdm.cpl,EditEnvironmentVariable</code></p>"},{"location":"Miscellaneous/cmdTricks/#control-command-opens-control-panel-window","title":"<code>control</code> command opens control panel window.","text":""},{"location":"Miscellaneous/cmdTricks/#wmiccommand-can-be-used-as-below-to-uninstall-programs-from-cmd","title":"<code>wmic</code>command can be used as below to uninstall programs from CMD","text":"<pre><code>Run \"wmic\" command\nRun \"product get name\" to list out the applications.\nRun \"product where name='Python 3.9.13 Standard Library (64-bit)' call uninstall\" command\n</code></pre>"},{"location":"Miscellaneous/cmdTricks/#vs-code-error-in-power-shell-cannot-be-loaded-because-running-scripts-is-disabled-on-this-system","title":"VS-CODE error in Power shell : Cannot be loaded because running scripts is disabled on this system","text":"<p>Run the following command and confirm with \u2018Y\u2019 </p> <pre><code>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine\n</code></pre>"},{"location":"Miscellaneous/fastapi/","title":"FastAPI","text":"<p>A simple working code to get started</p> <pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef root():\n    return {\"Hello\": \"JK\"}\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: int, skip: int = 0, limit: int = 30):\n    return {\n            \"item_id\": item_id,\n            \"limit\": limit,\n            \"skip\": skip\n            }\n</code></pre>"},{"location":"Miscellaneous/fastapi/#path-parameter","title":"Path Parameter","text":"<p>Path parameter is provided in python <code>f-string</code> style. </p>"},{"location":"Miscellaneous/fastapi/#query-parameter","title":"Query Parameter","text":"<p>Query parameters are the extra parameter that are not part of the path. In a URL they are provided after a <code>?</code> and separated by <code>&amp;</code></p> <p>Example : <code>http://localhost:8000/items/4?skip=0&amp;limit=10</code></p> <p>If a parameter is also present in the path its a <code>path parameter</code>. If a parameter is of singular type like <code>int</code> , <code>float</code> , <code>str</code> ,<code>bool</code> etc... then it is a <code>query parameter</code>. If a parameter is a <code>Pydantic Model</code> then its a <code>Request Body</code> used in post or put calls.</p>"},{"location":"Miscellaneous/fastapi/#important-status-codes","title":"Important Status Codes","text":""},{"location":"Miscellaneous/fastapi/#success-codes","title":"Success Codes","text":"Status Code Description 200 Request was successful and a response body is returned 204 Request was successful but the response body is empty"},{"location":"Miscellaneous/fastapi/#client-side-status-codes","title":"Client-Side Status Codes","text":"Status Code Description 400 Bad Request 401 Unauthorized 403 Forbidden. The client (browser) is not allowed to access the requested resource. 404 Page not found"},{"location":"Miscellaneous/fastapi/#server-side-status-codes","title":"Server-Side Status Codes","text":"Status Code Description 500 Internal Server Error 502 Bad Gateway 503 Service Unavailable. The server is currently unavailable or turned off."},{"location":"Miscellaneous/fastapi/#testing","title":"Testing","text":"<p>Testing of APIs are done by <code>TestClient</code> in Fastapi.</p> <ul> <li> <p>Import\u00a0<code>TestClient</code> </p> </li> <li> <p>Create a\u00a0<code>TestClient</code>\u00a0by passing your\u00a0FastAPI\u00a0application to it.</p> </li> <li> <p>Create functions with a name that starts with\u00a0<code>test_</code>\u00a0(this is standard\u00a0<code>pytest</code>\u00a0conventions).</p> </li> </ul> <pre><code>from fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def read_main():\n    return {\"msg\": \"Hello World\"}\n</code></pre> <p>Keep the testing logic in other file. Ex: <code>test_main.py</code></p> <pre><code>from fastapi.testclient import TestClient\n\n\nclient = TestClient(app)\n\n\ndef test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}\n</code></pre>"},{"location":"Miscellaneous/fastapi/#debugging","title":"Debugging","text":"<p>You can debug your FastAPI application using the following code snippet. Run the code with the VS Code Python debugger enabled.</p> <pre><code>if __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre>"},{"location":"Miscellaneous/fastapi/#fastapi-deployment","title":"FastAPI deployment","text":"<p>To deploy an application means to perform the necessary steps to make it available to users.</p> <p>Ensure that you use the appropriate version of FastAPI that is best suited for your production application. Using a dependency management tool like <code>uv</code> will handle this automatically.</p> <pre><code>fastapi[standard]&gt;=0.112.0,&lt;0.113.0\n</code></pre> <p>WARNING: Do not specify a version for the starlette library.</p> <p>IMPORTANT : It is a common practice to have\u00a0one program/HTTP server\u00a0(TLS Termination Proxy) running on the server (the machine, host, etc.) and\u00a0managing all the HTTPS parts like receiving the\u00a0encrypted HTTPS requests, sending the\u00a0decrypted HTTP requests\u00a0to the actual HTTP application running in the same server (the\u00a0FastAPI\u00a0application, in this case), take the\u00a0HTTP response\u00a0from the application,\u00a0encrypt it\u00a0using the appropriate\u00a0HTTPS certificate\u00a0and sending it back to the client using\u00a0HTTPS.</p>"},{"location":"Miscellaneous/fastapi/#tls-termination-proxy","title":"TLS Termination Proxy","text":"<ul> <li> <p>Traefik (has certificate renewal feature)</p> </li> <li> <p>Caddy (has certificate renewal feature)</p> </li> <li> <p>Nginx (<code>certbot</code> can be used for cert renewal)</p> </li> <li> <p>Kubernetes with an Ingress Controller like Nginx \u2705</p> </li> </ul>"},{"location":"Miscellaneous/general/","title":"Must check Github Pages and sites","text":""},{"location":"Miscellaneous/general/#embedded-python","title":"Embedded Python","text":"<p>Must watch site for embedded and python enthusiasts.</p> <p>Embedded Python: Build a Game on the BBC micro:bit \u2013 Real Python</p>"},{"location":"Miscellaneous/general/#mark-text","title":"Mark Text","text":"<p>A simple and elegant open-source markdown editor available for Windows, XOS, Linux. My blogs are mostly created using Marktext Markdown editor.</p> <p>GitHub : MarkText </p>"},{"location":"Miscellaneous/general/#motrix","title":"Motrix","text":"<p>Motrix is a full-featured download manager that supports downloading HTTP, FTP,\u00a0BitTorrent,\u00a0Magnet, etc.</p> <p>GitHub : Motrix </p>"},{"location":"Miscellaneous/general/#x64dbg","title":"X64dbg","text":"<p>An open-source binary debugger for Windows, aimed at malware analysis and reverse engineering of executables you do not have the source code for.</p> <p>GitHub: X64dbg</p>"},{"location":"Miscellaneous/general/#notable","title":"Notable","text":"<p>The Markdown-based note-taking app that doesn't suck.</p> <p>Trust me this looks like the best notes taking app currently.</p> <p>GitHub : Notable </p>"},{"location":"Miscellaneous/general/#dockerlabs","title":"docker/labs","text":"<p>This repo contains Docker\u00a0labs and tutorials authored both by Docker, and by members of the community.</p> <p>GitHub : docker/labs</p>"},{"location":"Miscellaneous/general/#tldr-pages","title":"tldr-pages","text":"<p>The tldr-pages project is a collection of community-maintained help pages for command-line tools, that aims to be a simpler, more approachable complement to traditional man pages.</p> <p>GitHub : tldr-pages </p>"},{"location":"Miscellaneous/general/#awesome-python","title":"Awesome Python","text":"<p>A curated list of awesome Python frameworks, libraries, software and resources.</p> <p>GitHub : Awesome Python </p>"},{"location":"Miscellaneous/general/#the-algorithmspython","title":"The Algorithms/Python","text":"<p>All algorithms implemented in Python - for education</p> <p>GitHub : The Algorithms</p>"},{"location":"Miscellaneous/global/","title":"Using and creating global variables:","text":"<p>In Python, you\u2019ll typically define global variables at the\u00a0module level. Once you\u2019ve defined a global variable, you can use it from within the module itself or from within other modules in your code.</p> <p>Accessing a global variable works, but directly modifying a variable doesn\u2019t work. You can\u2019t directly modify a variable from a high-level scope like global in a lower-level scope like local.</p>"},{"location":"Miscellaneous/global/#unboundlocalerror","title":"UnboundLocalError:","text":"<p>In the below example, python first tries to find variables\u00a0<code>a</code>,\u00a0<code>b</code>,\u00a0<code>c</code>\u00a0inside the\u00a0<code>print_globas</code>\u00a0function. It doesn't find any of the variables inside the function, but it finds it outside the function in the global scope.</p> <pre><code>a = 10\nb = 20\nc = 30\n\ndef print_globals():\n    print(a, b, c) \n\n&gt;&gt; 10 20 30\n</code></pre> <p>In the below example, python first tries to find variables\u00a0<code>a</code>,\u00a0<code>b</code>,\u00a0<code>c</code>\u00a0inside the\u00a0<code>print_globas</code>\u00a0function and it finds\u00a0<code>c</code>\u00a0but the value\u00a0<code>100</code>\u00a0doesn't get assigned to it in the first line. So\u00a0<code>UnboundLocalError: cannot access local variable 'c' where it is not associated with a value</code>\u00a0error is seen on the terminal.</p> <p><code>c</code>\u00a0is both global and local variable in this function. Python gives priority to the local variable and shows error.</p> <pre><code>a = 10\nb = 20\nc = 30\n\ndef print_globals():\n    print(a, b, c) \n    c = 100\n</code></pre> <p>Below code resolves the UnboundLocalError exception by using\u00a0<code>global</code>\u00a0keyword.</p> <pre><code>a = 10\nb = 20\nc = 30\n\ndef print_globals():\n    global c\n    print(a, b, c)\n    c = 100\n    print(c)\n\nprint_globals()\nprint(a,b,c)\n\n&gt;&gt;&gt; 10 20 30\n&gt;&gt;&gt; 10 20 100\n&gt;&gt;&gt; 10 20 100\n</code></pre> <p>If you want to modify a global variable inside a function, then you need to explicitly tell Python to use the global variable rather than creating a new local one. To do this, you can use one of the following:</p> <ol> <li>The <code>global</code> keyword</li> <li>The built-in <code>globals()</code> function</li> <li>The <code>nonlocal</code> keyword</li> </ol>"},{"location":"Miscellaneous/global/#using-nonlocal-keyword","title":"Using <code>nonlocal</code> keyword:","text":"<p><code>nonlocal</code> keyword is similar to <code>global</code> keyword. Only, it is used to in case of nested functions where a outer scoped variable is made use inside a inner function. </p> <pre><code>    def trial():\n        a = 10\n        print(a)\n        def inner_func():\n            print(a)\n            a=100\n        inner_func()\n        print(a)\n\ntrial()\n&gt;&gt;&gt; UnboundLocalError\n</code></pre>"},{"location":"Miscellaneous/global/#fixing-unboundlocalerror-above","title":"Fixing UnboundLocalError above:","text":"<pre><code>    def trial():\n        a = 10\n        print(a)\n        def inner_func(): \n            nonlocal a \n            print(a)\n            a=100\n        inner_func()\n        print(a)\n\n\ntrial() \n&gt;&gt;&gt; 10\n&gt;&gt;&gt; 10\n&gt;&gt;&gt; 100\n</code></pre>"},{"location":"Miscellaneous/global/#globals-functions","title":"globals() functions:","text":"<p>This function comes in handy when you have local variables with the same name as your target global variables, and you still need to use the global variable inside the function:</p> <pre><code>&gt;&gt;&gt; a = 10\n&gt;&gt;&gt; b = 20\n&gt;&gt;&gt; c = 30\n\n&gt;&gt;&gt; def print_globals():\n...     print(a, b, globals()[\"c\"])\n...     c = 100\n...     print(c)\n...\n\n&gt;&gt;&gt; print_globals()\n10 20 30\n100\n\n&gt;&gt;&gt; c\n30\n</code></pre>"},{"location":"Miscellaneous/global/#best-practices","title":"Best practices:","text":"<ul> <li> <p>Use only constant as globals, which are not going to change within the script.</p> </li> <li> <p><code>python   USER = 'oia'   ID = '1234235356'</code></p> </li> <li> <p>Use a function that takes argument and modified it and returns it if you need a global kind of variable which needs to be modified.</p> </li> <li> <p>Create a class and use the class attribute as a global variable throughout the class.</p> </li> </ul>"},{"location":"Miscellaneous/smtp/","title":"SMTP in Python:","text":""},{"location":"Miscellaneous/smtp/#securely-send-mail-using-smtp_ssl","title":"Securely send mail using <code>SMTP_SSL</code>:","text":"<p>Its a best practice to store the password in the environment variables. When you create a new environment variable on Windows, it's important to note that changes to environment variables usually require restarting any applications or shells that were open before the variable was added.</p> <pre><code>import smtplib, ssl\n\nport = 465  # For SSL\npassword = &lt;password&gt;\n\n# Create a secure SSL context\ncontext = ssl.create_default_context()\n\nwith smtplib.SMTP_SSL(\"smtp.gmail.com\", port, context=context) as server:\n    server.login(\"my@gmail.com\", password)\n    # TODO: Send email here\n</code></pre>"},{"location":"Miscellaneous/smtp/#securely-send-mail-using-starttls","title":"Securely send mail using <code>starttls()</code>:","text":"<pre><code>with SMTP('smtp.gmail.com', 587) as smtp:\n    smtp.starttls()\n    smtp.login(email_Address, os.environ.get(\"GMAIL_APP_PSWD\"))\n    smtp.sendmail(email_Address, email_Address, message.encode('utf-8'))\n</code></pre> <p><code>smtp.gmail.com</code> is the smtp server of GMail.</p> <p><code>smtp.office365.com</code> is the smtp server of Outlook Mail.</p>"},{"location":"Python/FastAPI_Deployment/","title":"FastAPI Deployment","text":"<p>To deploy an application means to perform the necessary steps to make it available to users.</p> <p>Ensure that you use the appropriate version of FastAPI that is best suited for your production application. Using a dependency management tool like <code>uv</code> will handle this automatically.</p> <pre><code>fastapi[standard]&gt;=0.112.0,&lt;0.113.0\n</code></pre> <p>WARNING: Do not specify a version for the starlette library.</p>"},{"location":"Python/Numpy/","title":"Numpy","text":"<p><code>random</code> module in Python uses the Mersenne Twister algorithm to generate random numbers.</p> <p>The <code>numpy</code> library uses a more efficient PCG (Permuted Congruential Generator) algorithm.</p>"},{"location":"Python/Numpy/#creating-a-basic-array","title":"Creating a basic array","text":"<pre><code>import numpy as np\nA = np.array([3, 7, 2, 4, 5])\n</code></pre> <pre><code>&gt;&gt;&gt; np.arange(10)\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n&gt;&gt;&gt; np.arange(2, 3, 0.1)\narray([ 2., 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9])\n</code></pre>"},{"location":"Python/Numpy/#range-vs-numpyarange","title":"range() vs numpy.arange()","text":"<p>Unlike Python\u2019s built-in <code>range()</code> function, <code>numpy.arange()</code> supports non-integer step sizes and returns an array of floats when needed.</p>"},{"location":"Python/Numpy/#built-in-vs-numpys-max-and-min-functions","title":"Built-in vs numpy's max() and min() functions","text":"<p>The built-in <code>max()</code> and <code>min()</code> functions work for one-dimensional lists or arrays, but do not handle multi-dimensional arrays. In such cases, numpy's <code>max()</code> and <code>min()</code> functions are useful.</p>"},{"location":"Python/Numpy/#numpynanmax","title":"numpy.nanmax()","text":"<p>If the array contains missing elements (common in real-world data), <code>numpy.max()</code> will return <code>nan</code> because the maximum cannot be determined. </p> <p><code>nanmax()</code> should be used in this case to find the maximum value while ignoring <code>nan</code> values.</p>"},{"location":"Python/Numpy/#random-number-generators","title":"Random Number Generators","text":""},{"location":"Python/Numpy/#generate-random-numbers","title":"Generate random numbers","text":"<pre><code>import numpy as np\n\ndefault_rng = np.random.default_rng()\ndefault_rng\nprint(default_rng.random())\n</code></pre>"},{"location":"Python/Numpy/#generate-random-numbers-between-low-and-high-value","title":"Generate random numbers between low and high value","text":"<p><code>.random</code> and <code>.uniform</code> are exactly same unless the <code>low</code> and <code>high</code> values are provided.</p> <pre><code>import numpy as np\n\ndefault_rng = np.random.default_rng()\nprint(default_rng.uniform(low = 3, high = 9))\n</code></pre>"},{"location":"Python/Numpy/#generate-random-integers","title":"Generate random integers","text":"<pre><code>import numpy as np\n\ndefault_rng = np.random.default_rng()\nprint(default_rng.integers(low = 0, high = 100))\n</code></pre>"},{"location":"Python/Numpy/#more-powerful-random-number-generator","title":"More powerful random number generator","text":"<pre><code>from numpy.random import Generator, PCG64DXSM\npcg64dxsm_rng = Generator(PCG64DXSM())\nprint(pcg64dxsm_rng.random())\n</code></pre>"},{"location":"Python/Numpy/#generate-an-array-of-random-numbers","title":"Generate an array of random numbers","text":"<p>If you assign a tuple\u00a0to\u00a0<code>size</code>, then you\u2019ll generate an array.</p> <pre><code>.random(size=(5,5)) 5X5 array\n.uniform(low = 1, high = 10, size=(10,)) 1X10 array\n.integer(size(50,32)) 50X32 array\n</code></pre>"},{"location":"Python/Numpy/#selecting-a-random-element-from-an-array","title":"Selecting a random element from an array","text":"<p>The\u00a0<code>Generator</code>\u00a0object\u2019s\u00a0<code>.choice()</code>\u00a0method allows you to select random samples from an array.</p> <pre><code>&gt;&gt;&gt; import numpy as np\n\n&gt;&gt;&gt; rng = np.random.default_rng()\n\n&gt;&gt;&gt; input_array_1d = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n&gt;&gt;&gt; rng.choice(input_array_1d, size=3, replace=False)\narray([ 6, 12, 10])\n\n&gt;&gt;&gt; rng.choice(input_array_1d, size=(2, 3), replace=False)\narray([[ 8, 12, 11],\n       [10,  7,  5]])\n</code></pre> <p>If you set <code>replace=False</code>, the same element cannot be selected more than once. By default, <code>replace</code> is <code>True</code>, so elements may be selected multiple times.</p>"},{"location":"Python/Numpy/#generate-normally-distributed-random-numbers","title":"Generate normally distributed random numbers","text":"<pre><code>import numpy as np\n\ndefault_rng = np.random.default_rng()\nprint(default_rng.normal())\n</code></pre>"},{"location":"Python/PythonTricks/","title":"Python Tricks","text":""},{"location":"Python/PythonTricks/#unpacking-in-python","title":"Unpacking in Python","text":"<p>Unpacking in Python is the process of extracting items from an iterable (list, tuple, set, string, dictionary) and assigning them to variables.</p> <p>In the example below, <code>a</code> is an iterable and it is unpacked into a variable and a list.</p> <p>The <code>*</code> notation is used before a variable to unpack the iterable into a <code>list</code>.</p> <pre><code># Tuple unpacking\ncoordinates = (3, 4)\nx, y = coordinates\nprint(\"x:\", x)  # Output: 3\nprint(\"y:\", y)  # Output: 4\n</code></pre> <pre><code>a = (1, 2, 3, 4, 5, 6)\none, *rest, six = a\nprint(one, rest, six)\nprint(type(one), type(rest), type(six))\n\n# Output:\n# 1 [2, 3, 4, 5] 6\n# &lt;class 'int'&gt; &lt;class 'list'&gt; &lt;class 'int'&gt;\n</code></pre> <pre><code># This cannot be done\na = (1, 2, 3, 4, 5, 6)\n*f = a\nprint(f)\n\n# Output:\n# SyntaxError: Starred assignment target must be in a list or tuple\n</code></pre> <pre><code># This can be used to convert a tuple to a list\na = (1, 2, 3, 4, 5, 6)\n[*f] = a\nprint(f)\n\n# Output:\n# [1, 2, 3, 4, 5, 6]\n</code></pre> <p>Unpacking in a function allows you to provide a variable number of arguments to the function.</p> <pre><code># Unpacking in function arguments\ndef print_values(*args):\n    for value in args:\n        print(value)\n\nprint_values(1, 2, 3, 4, 5)\n# Output:\n# 1\n# 2\n# 3\n# 4\n# 5\n</code></pre>"},{"location":"Python/PythonTricks/#pop-method-on-lists","title":"pop() Method on Lists","text":"<p><code>pop()</code> is used to remove and return elements from a list. Once all elements are popped out, the list becomes empty. Printing the list now will print an empty list.</p> <pre><code>a = [1, 2, 3, 4, 5, 6, 7]\n\nwhile a:\n    print(a.pop(-1), end='', flush=True)\n\nprint(a)\n# Output:\n# 7654321[]\n</code></pre>"},{"location":"Python/PythonTricks/#while-loop-in-one-line","title":"while Loop in One Line","text":"<p>A while loop can be written in one line. Multiple statements in the loop can be separated using <code>;</code>. However, complex statements are not supported in a single line.</p> <pre><code>a = [1, 2, 3, 4, 5, 6, 7]\n\nwhile a: print(a.pop(-1), end='', flush=True); print(\" hello\")\n</code></pre>"},{"location":"Python/PythonTricks/#docstrings-in-python","title":"Docstrings in Python","text":"<p>There are several docstring formats that can be used to help docstring parsers and users have a familiar and consistent format:</p> <ul> <li>Google docstrings: Supported by Sphinx.</li> <li>reStructuredText: This is the official Python documentation standard. Supported by Sphinx.</li> <li>Numpy/SciPy docstrings: A combination of Google and reStructuredText docstrings.</li> </ul>"},{"location":"Python/PythonTricks/#if-else-ternary-operation","title":"If-Else Ternary Operation","text":"<pre><code>&lt;expression 1&gt; if &lt;condition&gt; else &lt;expression 2&gt;\n</code></pre> <p>Example:</p> <pre><code>print(\"Pass\") if marks &gt;= 45 else print(\"Fail\")\n</code></pre>"},{"location":"Python/PythonTricks/#importlib-standard-library","title":"<code>importlib</code> Standard Library","text":"<p>This module provides the <code>import_module</code> function, which allows you to programmatically import a module.</p>"},{"location":"Python/PythonTricks/#for-if-else-operation","title":"For-If-Else Operation","text":""},{"location":"Python/PythonTricks/#list-comprehensions-and-generators-can-be-used-interchangeably-while-generators-are-more-memory-efficient-list-comprehensions-are-not","title":"<code>list comprehensions</code> and <code>generators</code> can be used interchangeably. While generators are more memory efficient, list comprehensions are not.","text":"<pre><code># Using for and if in list comprehensions and generators\nfor_if = [i for i in range(1, 10) if i &lt; 6]\n# Output:\n# [1, 2, 3, 4, 5]\n\n# Using for, if, and else in list comprehensions and generators\nfor_if_else = [5 if i &lt; 5 else 10 for i in range(1, 20)]\n# Output:\n# [5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n\n# General if-else syntax for ternary operation\nif_else = True if 3 &lt; 5 else False\n# Output:\n# True\n</code></pre>"},{"location":"Python/PythonTricks/#typeself__name__","title":"<code>type(self).__name__</code>","text":"<p><code>print(type(self).__name__)</code> is used to print the name of the class to which the instance <code>self</code> belongs.</p>"},{"location":"Python/PythonTricks/#single-and-double-underscore-in-variable-and-methodfunction-names","title":"Single and Double Underscore in Variable and Method/Function Names","text":"<p>Leading or trailing single and double underscores have significance in Python.</p> Convention Example Meaning Leading single underscore <code>_variable</code> The variable is intended for internal use only. Considered as a private variable. Trailing single underscore <code>class_</code>, <code>float_</code> Built-in keywords can be used as variable or method names with this trick to avoid conflicts with actual keywords. Leading double underscore <code>__attribute</code> Name mangling is used to make class attributes or methods private by prefixing their names with double underscores (<code>__</code>). Python internally modifies the name by appending <code>_ClassName</code> to make it harder to access directly from outside the class. Example: <code>_ClassName__attribute</code> Leading and trailing double underscore <code>__init__</code> Special methods and attributes in Python."},{"location":"Python/PythonTricks/#diataxis","title":"Di\u00e1taxis","text":"<p>A systematic approach to technical documentation authoring. This has widespread adoption in the Python community.</p>"},{"location":"Python/PythonTricks/#keyword-listing","title":"Keyword Listing","text":"<p>To list all the keywords, use the code below:</p> <pre><code>import keyword as _keyword\nprint(_keyword.kwlist)\n\n# Output:\n# ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n</code></pre>"},{"location":"Python/PythonTricks/#ellipsis","title":"Ellipsis","text":"<p>Ellipses (<code>...</code>) in Python are primarily used as a placeholder or a marker for incomplete code or to represent an undefined value.</p> <pre><code># Represents an incomplete tuple\nmy_tuple = (1, 2, ...)\n\n# Function to be written at a later stage and currently kept empty\ndef my_function():\n    ...\n</code></pre>"},{"location":"Python/PythonTricks/#integer-string-conversion-length-limitation","title":"Integer String Conversion Length Limitation","text":"<p>The limit for string to integer conversion is 4300 (upper threshold) and 640 (lower threshold).</p> <pre><code>import sys\n\nprint(sys.int_info.default_max_str_digits)\nprint(sys.int_info.str_digits_check_threshold)\n\n# Output:\n# 4300\n# 640\n</code></pre> <p>To modify this, getters and setters are available:</p> <pre><code>import sys\n\nprint(sys.get_int_max_str_digits())  # 4300\nsys.set_int_max_str_digits()         # Used to set it to a desired value\n</code></pre>"},{"location":"Python/PythonTricks/#string-formatters","title":"String Formatters","text":"Expr Meaning Example {:d} integer value \"{0:.0f}\".format(10.5) \u2192 '10' {:.2f} floating point with that many decimals '{:.2f}'.format(0.5) \u2192 '0.50' {:.2s} string with that many characters '{:.2s}'.format('Python') \u2192 'Py' {:&lt;6s} string aligned to the left that many spaces '{:&lt;6s}'.format('Py') \u2192 'Py    ' {:&gt;6s} string aligned to the right that many spaces '{:&gt;6s}'.format('Py') \u2192 '    Py' {:^6s} string centered in that many spaces '{:^6s}'.format('Py') \u2192 '  Py  '"},{"location":"Python/PythonTricks/#queues","title":"Queues","text":"<p>FIFO (First-In, First-Out)</p> <p>Adding an element to a queue is called <code>enqueue</code>.</p> <p>Retrieving an element from a queue is called <code>dequeue</code>.</p>"},{"location":"Python/PythonTricks/#stack","title":"Stack","text":"<p>LIFO (Last-In, First-Out)</p>"},{"location":"Python/PythonTricks/#deque-double-ended-queue","title":"Deque (Double-Ended Queue)","text":"<p>A deque combines and extends the concepts behind stacks and queues. A deque can operate as either FIFO or LIFO.</p>"},{"location":"Python/PythonTricks/#python-object-oriented-concepts","title":"Python Object-Oriented Concepts","text":"<p>Methods in Python fall into several categories:</p> <ul> <li>Instance methods</li> <li>Class methods</li> <li>Static methods</li> </ul>"},{"location":"Python/PythonTricks/#instance-methods","title":"Instance Methods","text":"<p>Instance methods are the most common type of methods in Python. You define instance methods within a class by creating functions inside the class definition. When you create instances of a class, those individual instances can have their methods called so the program can control and modify those instances directly. Instance methods take a parameter called <code>self</code>, which represents the instance the method is being executed on. This allows you to access attributes of the instance using dot notation, like <code>self.name</code>, which will access the <code>name</code> attribute of that specific instance. When you have variables that contain different values for different instances, these are called instance variables.</p>"},{"location":"Python/PythonTricks/#class-methods","title":"Class Methods","text":"<p>Class methods, on the other hand, are called on the class itself instead of an instance. They are marked with a <code>@classmethod</code> decorator and take a <code>cls</code> parameter that points to the class\u2014not any specific instance\u2014when the method is called. One common use case for class methods is to create and modify data structures that contain records for all instances of a class. Usually, programmers make a list inside the class definition, and methods to add instances of the class to that list in order to keep track of that class.</p>"},{"location":"Python/PythonTricks/#static-methods","title":"Static Methods","text":"<p>Lastly, static methods, marked with a <code>@staticmethod</code> decorator, do not take a <code>self</code> or a <code>cls</code> parameter. Static methods behave like plain functions, except that you can call them directly from the class. It is important to note that you do not have to actually instantiate the class; the methods just reside in there. This is because class definitions are themselves objects (i.e., instances of abstract base classes), which reduces overhead and allows functions to be encapsulated in an easy-to-use way. Programmers use static methods when the method does not need to access any instance- or class-specific data.</p>"},{"location":"Python/Python_Interview_Questions/","title":"Python Interview Questions","text":""},{"location":"Python/Python_Interview_Questions/#what-are-mutable-and-immutable-data-types","title":"What are mutable and immutable data types?","text":"<p>The value of mutable objects can be changed without changing their <code>id</code>. Lists, dicts, and sets are examples.</p> <p>The value of immutable objects cannot be changed after creation. Any modification results in a new object with a new <code>id</code>. Examples include int, float, str, and tuple.</p> <p>Mutable datatypes are not hashable, while the immutable datatypes are.</p>"},{"location":"Python/Python_Interview_Questions/#and-is","title":"== and is","text":"<p><code>==</code> compares the value of two objects, while <code>is</code> compares the <code>id</code> of two objects.</p>"},{"location":"Python/Python_Interview_Questions/#decorator","title":"Decorator","text":"<p>A decorator is a function that takes another function (or method) as input, wraps or extends its behavior, and returns a new function.</p>"},{"location":"Python/Python_Interview_Questions/#memory-management","title":"Memory management","text":"<p>It consists of four concepts: <code>stack</code>, <code>heap</code>, <code>reference counting</code>, and <code>garbage collection</code>.</p> <p>The stack stores local variable names, the return address of a function, etc.</p> <p>The heap stores the actual data or objects. The reference to an object in the heap is stored as the value of a variable in the stack.</p> <p>If a = 5 and id(a) = 4567342321</p> <p>b = 5, id is same as a</p> Stack Heap a = 4567342321 5 (refcounter = 2) b =\u00a04567342321 <p>Objects in the heap also hold a value called the <code>reference counter</code>. This keeps track of how many references point to the object. If this value becomes zero, the object is collected by the garbage collector.</p>"},{"location":"Python/Python_Interview_Questions/#python-as-an-interpreted-language","title":"Python as an Interpreted Language","text":"<p>Python is indeed an interpreted language, but it still has both a compile-time and a runtime phase \u2014 just not the same way as C or Java.</p>"},{"location":"Python/Python_Interview_Questions/#what-happens-when-you-run-a-py-file","title":"What happens when you run a <code>.py</code> file?","text":""},{"location":"Python/Python_Interview_Questions/#1-compilation-phase-to-bytecode","title":"1. Compilation Phase (to Bytecode)","text":"<ul> <li> <p>Python first compiles your code into bytecode (low-level, platform-independent instructions). This bytecode is run by the Python Virtual Machine (PVM), not by the system's operating system.</p> </li> <li> <p>This happens automatically, and the result is usually stored in <code>.pyc</code> files (under <code>__pycache__/</code>).</p> </li> <li> <p>This phase is where scope is analyzed, including:</p> </li> <li> <p>Is a variable local or global?</p> </li> <li> <p>Are there syntax errors?</p> </li> <li> <p>Where are function boundaries?</p> </li> </ul>"},{"location":"Python/Python_Interview_Questions/#2-execution-phase-runtime","title":"2. Execution Phase (Runtime)","text":"<ul> <li> <p>The Python Virtual Machine (PVM) then executes this bytecode line by line.</p> </li> <li> <p>This is the actual \u201cinterpreting\u201d part \u2014 where variable values are assigned, functions are called, etc.</p> </li> </ul>"},{"location":"Python/Python_Interview_Questions/#docstrings","title":"Docstrings","text":"<ul> <li> <p>The docstring itself is just a string \u2014 it is not executed by default.</p> </li> <li> <p>However, if the docstring contains Python code, it can be run using a testing tool called <code>doctest</code>.</p> </li> </ul>"},{"location":"Python/Python_Interview_Questions/#tuple-is-efficent-than-list","title":"Tuple is efficent than list","text":"<ul> <li> <p>Tuple is a immutable datatype in python. One the tuple object is created it cannot be modified. Hence python doesn'e need to allocate extra space for expansion or reduction of tuple. </p> </li> <li> <p>On the other hand List is a mutable datatype. Onece created, it can be modified. In order to achive the mutability of list, python has to allocate extra space for potential expansion or redcution of list elements.</p> </li> </ul>"},{"location":"Python/Python_Interview_Questions/#namespace-in-python","title":"Namespace in Python","text":"<p>Namespace in python is a mapping of name and object. </p> <p>For example:</p> <pre><code>x=5\n</code></pre> <p><code>x</code> is the name, and it is refering to the object <code>5</code>.</p> <p>When a name is used in a script, python first checks in the local namespace, then in the enclosing namespace, then globla namespace nad finally in the built-in namespace.</p>"},{"location":"Python/Python_Interview_Questions/#what-are-frozenset-in-python","title":"What are frozenset in python","text":"<p>frozenset is a set which is immutable. <code>set</code> datatype in python is mutable and is not hashable and also cannot be used as a key in a dictionary. <code>forzenset</code> is hashable and can be used as a key in a dictionary.</p>"},{"location":"Python/Python_Interview_Questions/#none-in-python","title":"None in python","text":"<p><code>x = None</code> means the name or variable is refering to no value or object.</p>"},{"location":"Python/Python_Interview_Questions/#what-is-shallow-copy-and-deep-copy","title":"What is shallow copy and deep copy","text":""},{"location":"Python/Python_Interview_Questions/#shallow-copy","title":"Shallow copy","text":"<pre><code>import copy\na = [[1, 2], [3, 4]]\nb = copy.copy(a)\n\n# appending element to list b doesn't affect a\nb.append([5,6])\n\n# modifying a nested element affects a too\nb[0][0] = 100\nprint(a)\nprint(b) \n# Output:\n# [[100, 2], [3, 4]]\n# [[100, 2], [3, 4], [5, 6]]\n</code></pre>"},{"location":"Python/Python_Interview_Questions/#deep-copy","title":"deep copy","text":"<pre><code>import copy\na = [[1, 2], [3, 4]]\nb = copy.deepcopy(a)\n\n# appending element to list b doesn't affect a\nb.append([5,6])\n\n# modifying a nested element affects a too\nb[0][0] = 100\nprint(a)\nprint(b)\n\n# Output:\n# [[1, 2], [3, 4]]\n# [[100, 2], [3, 4], [5, 6]]\n</code></pre>"},{"location":"Python/Python_Interview_Questions/#what-is-the-gil-in-python-and-how-does-it-affect-multi-threading","title":"What is the GIL in Python, and how does it affect multi-threading?","text":"<p>GIL (Global interpreter lock) is a mechanism in CPython implementation where multiple threads are prevented from executing Bytecode at once. This is a safty mechanism as the <code>python memory management</code> is not thread-safe.</p> <p>GIL ensures that onlt one thread is executes the bytecode at any given time. Therefore, no more than one core gets used even though the system has multiple cores.</p> <p>Threading in python works similar to <code>async await</code> . Both prove useful in I/O bound task where waiting is involved and other task can be executed in that time.</p>"},{"location":"Python/Python_Interview_Questions/#hashability-in-python","title":"hashability in python","text":"<p>Hashability in python is where an object can be used as a key in a dictionary or as an element of a set.</p> <p>Set is not hashable but its elements must be hashable. So set can not contain a list. \ud83d\ude05(strange)</p> <p>hash of an object can be generated if the object doesn't get modified in its lifetime after created. List can be modified after creation, hence its not hashable.</p>"},{"location":"Python/Python_Interview_Questions/#what-is-context-manager-and-write-a-program-using-__enter__-and-__exit__","title":"What is context manager and write a program using <code>__enter__</code> and <code>__exit__</code>","text":"<p>Context manager is a resource management technique that allows setup and teardown of resource ensuring exception safty and thread safety.</p> <p>Context manager ensures that the resource is released safely even if the exception occurres.</p> <pre><code>class OPEN:\n    def __init__(self, file:str):\n        self.file = file\n\n    def __enter__(self):\n        self.fp = open(self.file)\n        return self.fp\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.fp.close()\n\nwith OPEN(r\"C:\\Users\\jeeva\\OneDrive\\Desktop\\req.txt\") as fp:\n    for i in fp:\n        print(i)\n</code></pre>"},{"location":"Python/Python_Interview_Questions/#_1","title":"Python Interview Questions","text":""},{"location":"Python/Python_Interview_Questions/#pytest-vs-unittest","title":"Pytest vs unittest","text":"Pytest Unit test Flexible and powerful featurs in fixtuers setup and teardown fixture are the only available fixture supports pythons assert statement It has its own assertion statements and keyworkds test parameterisation for code reusability no parameterisation Powerful Plugins and hooks ---"},{"location":"Python/Python_Interview_Questions/#pytest-fixture","title":"Pytest fixture","text":"<p>In pytest, fixtures are a powerful feature used to set up and tear down the environment for tests. They help in providing a consistent and reusable way to prepare test data, resources, or configurations before running tests, and clean up afterward. Fixtures make your tests more modular, readable, and maintainable.</p>"},{"location":"Python/Python_best_practices/","title":"Python Best Practices","text":""},{"location":"Python/Python_best_practices/#wrap-a-generator-with-a-context-manager","title":"Wrap a Generator with a Context Manager","text":"<p>Wrapping a generator with the <code>contextmanager</code> decorator helps clean up resources when the context manager is exited. To convert a generator function into a context manager, use <code>contextmanager</code> from <code>contextlib</code>.</p> <pre><code>from contextlib import contextmanager\n\n@contextmanager\ndef file_reader(filename):\n    try:\n        # Open the file\n        f = open(filename, 'r')\n        yield f  # Yield the file object to the caller\n    finally:\n        # Cleanup: Close the file\n        f.close()\n\n# Example usage\nwith file_reader('example.txt') as f:\n    for line in f:\n        print(line.strip())\n</code></pre> <p>Receive input arguments from the console, split them using space as the delimiter, and convert each element to an integer in a single line.</p> <p>The\u00a0<code>input()</code>\u00a0function treats all characters as <code>str</code> by default.</p> <pre><code>arr = map(int, input().split())\n</code></pre>"},{"location":"Python/Python_best_practices/#from-none-in-raise","title":"<code>from None</code> in <code>raise</code>","text":"<pre><code>def dequeue(self):\n    try:\n        return self._items.popleft()\n    except IndexError:\n        raise IndexError(\"dequeue from an empty queue\") from None\n</code></pre> <p><code>from None</code> in the <code>raise</code> statement is used in situations where the originally raised exception and the exception raised by the <code>raise</code> statement are of the same exception class (e.g., <code>IndexError</code>).</p> <p>When an <code>IndexError</code> is raised and caught, and another <code>IndexError</code> is raised, both the user-defined message and the original exception message are shown. Using <code>from None</code> suppresses the original exception message, so only the user-defined message is displayed.</p> <p>The three basic built-in sequence types in Python are lists, tuples, and strings.</p>"},{"location":"Python/Python_best_practices/#list_iterator","title":"list_iterator","text":"<p>In the code snippet below, <code>number_iterator</code> is a <code>list_iterator</code> and is used to save memory by storing only one element at a time in memory.</p> <p>The <code>list_iterator</code> allows you to access the elements of a list (or any iterable) one at a time, rather than loading all elements into memory at once. This is useful when working with large datasets or when you only need to process elements sequentially, saving memory.</p> <pre><code>numbers = [random.randint(1, 20) for _ in range(20)]\nnumbers_iterator = iter(numbers)\n</code></pre>"},{"location":"Python/Timing_your_python_code/","title":"Timing Your Python Code","text":""},{"location":"Python/Timing_your_python_code/#perf_counter","title":"perf_counter","text":"<p>This is one of the best ways to measure the time taken by your code.</p> <p>Note: The best timing for your code can be determined by selecting the lowest time from all the attempts. Taking the average of all attempts is not efficient, because your computer may be running other processes in the background. The lowest recorded time is when other processes have the least influence.</p>"},{"location":"Python/Timing_your_python_code/#timer-class-using-perf_counter","title":"Timer Class Using <code>perf_counter</code>","text":"<pre><code># timer.py\n\nimport time\n\nclass TimerError(Exception):\n    \"\"\"A custom exception used to report errors in the use of the Timer class\"\"\"\n\nclass Timer:\n    def __init__(self):\n        self._start_time = None\n\n    def start(self):\n        \"\"\"Start a new timer\"\"\"\n        if self._start_time is not None:\n            raise TimerError(\"Timer is already running. Use .stop() to stop it.\")\n\n        self._start_time = time.perf_counter()\n\n    def stop(self):\n        \"\"\"Stop the timer and report the elapsed time\"\"\"\n        if self._start_time is None:\n            raise TimerError(\"Timer is not running. Use .start() to start it.\")\n\n        elapsed_time = time.perf_counter() - self._start_time\n        self._start_time = None\n        print(f\"Elapsed time: {elapsed_time:0.4f} seconds\")\n</code></pre>"},{"location":"Python/Timing_your_python_code/#timeit-built-in-function","title":"timeit Built-in Function","text":"<p><code>timeit</code> is a built-in function used to time your code.</p> <p><code>cProfile</code> can be used to identify which function is taking the most time.</p> <p><code>line_profiler</code> can be used to identify which line is taking the longest to run.</p> <p><code>memory_profiler</code> can be used to profile memory consumption.</p> <p>The suggested approach is to first use <code>cProfile</code> to profile the functions, and then use <code>line_profiler</code> to profile the lines within those functions.</p>"},{"location":"Python/logging/","title":"Logging in Python","text":""},{"location":"Python/logging/#introduction","title":"Introduction","text":"<pre><code>import logging\n</code></pre> <p>To use logging, import logging in your Python file.</p> <pre><code>import logging\n\n\nlogging.basicConfig(filename='example.log', encoding='utf-8',\n                     level=logging.DEBUG, format='%(asctime)s : %(levelname)s : %(message)s',\n                       filemode='w', datefmt='%Y-%m-%d %I:%M:%S %p')\n\nlogging.debug('This message should go to the log file')\nlogging.info('So should this')\nlogging.warning('And this, too')\nlogging.error('And non-ASCII stuff, too, like \u00d8resund and Malm\u00f6')\n</code></pre> <p><code>logging.basicConfig</code> is used to log the messages in a file given in <code>filename</code> keyword argument.</p> <p><code>level=logging.DEBUG</code> logs all the messages given.</p> <pre><code>example.log\n\n2023-07-27 08:43:27 AM : DEBUG : This message should go to the log file\n2023-07-27 08:43:27 AM : INFO : So should this\n2023-07-27 08:43:27 AM : WARNING : And this, too\n2023-07-27 08:43:27 AM : ERROR : And non-ASCII stuff, too, like \u00d8resund and Malm\u00f6\n</code></pre> <p>if <code>level=logging.WARNING</code> only below messages are printed in the file.</p> <pre><code>example.log\n\n2023-07-27 08:43:27 AM : WARNING : And this, too\n2023-07-27 08:43:27 AM : ERROR : And non-ASCII stuff, too, like \u00d8resund and Malm\u00f6\n</code></pre> <p><code>format</code> is used to format the appearance of the message in the file.</p> <pre><code>DEBUG:root:This message should go to the log file\n\nINFO:root:So should this\n</code></pre> <p>with <code>format='%(asctime)s : %(levelname)s : %(message)</code></p> <pre><code>  2023-07-27 08:43:27 AM : DEBUG : This message should go to the log file\n  2023-07-27 08:43:27 AM : INFO : So should this\n</code></pre> <ul> <li>Default <code>filemode</code> is <code>r</code> . This keeps appending the messages to the file on each run of the project. <code>w</code> overwrites the file on each run of the project.</li> </ul>"},{"location":"Python/logging/#advanced-logging","title":"Advanced Logging","text":"<p>Four categories of logging:</p> <ul> <li> <p>Logger</p> </li> <li> <p>Handlers</p> </li> <li> <p>Filters</p> </li> <li> <p>Formatters</p> </li> </ul> <p>It's a good convention to use a module-level logger in each module that uses logging.</p> <pre><code>logger = logging.getLogger(__name__)\n</code></pre> <p>There can be two types of destination to which the logger can log the message:</p> <ul> <li> <p>Console</p> </li> <li> <p>File</p> </li> </ul>"},{"location":"Python/logging/#logger","title":"Logger","text":"<p>Most common method of configuring Logger is to use </p> <pre><code>Logger.setLevel()\nLogger.addHandler() or Logger.removeHandler()\nLogger.addFilter() or Logger.removeFilter()\n</code></pre>"},{"location":"Python/logging/#handlers","title":"Handlers","text":"<p>Commonly used handlers are StreamHandlers and FileHandlers.</p>"},{"location":"Python/logging/#_1","title":"Logging in Python","text":""},{"location":"Python/logging/#example-for-console-handler","title":"Example for console handler","text":"<p>Here it is important to set the logger level as a whole before setting the handler log level. </p> <pre><code>import logging\n\n# Create Logger\nlogger = logging.getLogger(__name__)\n\n# Set log level to the logger \nlogger.setLevel(logging.DEBUG)\n\n# create formatter\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n# Create console handler\ncons_hand = logging.StreamHandler()\ncons_hand.setLevel(logging.WARNING)\ncons_hand.setFormatter(formatter)\n\n# 'application' code\nlogger.debug('debug message')\nlogger.info('info message')\nlogger.warning('warn message')\nlogger.error('error message')\nlogger.critical('critical message')\n\nOUTPUT:\n2023-08-03 22:24:59,105 - __main__ - WARNING - warn message\n2023-08-03 22:24:59,106 - __main__ - ERROR - error message\n2023-08-03 22:24:59,106 - __main__ - CRITICAL - critical message\n</code></pre>"},{"location":"Python/logging/#the-same-logging-can-be-achieved-using-a-configuration-file","title":"The same logging can be achieved using a configuration file:","text":"<pre><code>import logging\n\n# Create Logger\nlogger = logging.getLogger(__name__)\n\n# 'application' code\nlogger.debug('debug message')\nlogger.info('info message')\nlogger.warning('warn message')\nlogger.error('error message')\nlogger.critical('critical message')\n\nOUTPUT :\n2023-08-03 22:24:59,105 - __main__ - WARNING - warn message\n2023-08-03 22:24:59,106 - __main__ - ERROR - error message\n2023-08-03 22:24:59,106 - __main__ - CRITICAL - critical message\n</code></pre> <pre><code>[Logger]\nkeys=root,simpleExample\n\n[handlers]\nkeys=consoleHandler\n\n[formatters]\nkeys=simpleFormatter\n\n[logger_root]\nlevel=DEBUG\nhandlers=consoleHandler\n\n[logger_simpleExample]\nlevel=DEBUG\nhandlers=consoleHandler\nqualname=simpleExample\npropagate=0\n\n[handler_consoleHandler]\nclass=StreamHandler\nlevel=DEBUG\nformatter=simpleFormatter\nargs=(sys.stdout,)\n\n[formatter_simpleFormatter]\nformat=%(asctime)s - %(name)s - %(levelname)s - %(message)s\n</code></pre>"},{"location":"Python/pyinstaller/","title":"PyInstaller","text":"<ul> <li> <p><code>pyinstaller</code>\u00a0is the main command to build a bundled application.</p> </li> <li> <p><code>pyi-makespec</code>\u00a0is used to create a spec file.</p> </li> <li> <p><code>pyi-archive_viewer</code>\u00a0is used to inspect a bundled application.</p> </li> <li> <p><code>pyi-bindepend</code>\u00a0is used to display dependencies of an executable.</p> </li> <li> <p><code>pyi-grab_version</code>\u00a0is used to extract a version resource from a Windows executable.</p> </li> <li> <p><code>pyi-set_version</code>\u00a0can be used to apply previously-extracted version resource to an existing Windows executable.</p> </li> </ul> <p>One folder bundle is faster than the single file bundle</p>"},{"location":"Python/pyinstaller/#hiding-the-source-code","title":"Hiding the Source Code","text":"<p>The bundled app does not include any source code. However, PyInstaller bundles compiled Python scripts (<code>.pyc</code> files), which could, in principle, be decompiled to reveal the logic of your code.</p> <p>If you want to hide your source code more thoroughly, one option is to compile some of your modules with <code>Cython</code>. Using Cython, you can convert Python modules into C and then compile the C code to machine language. PyInstaller can follow import statements that refer to Cython C object modules and bundle them.</p> <p><code>pyinstaller.exe</code> takes either the <code>.py</code> python file or the <code>.spec</code> file as the scriptname argument.</p>"},{"location":"Python/pytest/","title":"Pytest","text":""},{"location":"Python/pytest/#getting-started","title":"Getting started","text":""},{"location":"Python/pytest/#__tracebackhide__","title":"<code>__tracebackhide__</code>","text":"<p>The\u00a0<code>assert_identical</code>\u00a0function sets\u00a0<code>__tracebackhide__ = True</code>. This is optional. The effect is that failing tests will not include this function in the traceback.</p> <pre><code>from cards import Card\nimport pytest\n\n\ndef assert_identical(c1: Card, c2: Card):\n    __tracebackhide__ = True\n    assert c1 == c2\n    if c1.id != c2.id:\n        pytest.fail(f\"id's don't match: {c1.id} != {c2.id}\")\n\n\ndef test_identical():\n    c1 = Card(\"foo\", id=123)\n    c2 = Card(\"foo\", id=123)\n    assert_identical(c1, c2)\n\n\ndef test_identical_fail():\n    c1 = Card(\"foo\", id=123)\n    c2 = Card(\"foo\", id=456)\n    assert_identical(c1, c2)\n</code></pre>"},{"location":"Python/pytest/#test-outcomes","title":"Test Outcomes","text":"<p>The possible test outcomes are:</p> <pre><code>PASSED (.)\nFAILED (F)\nXPASS (X) \nXFAIL (x)\nSKIPPED (s)\nERROR (E)\n</code></pre>"},{"location":"Python/pytest/#testing-expected-exception","title":"Testing expected exception","text":"<p>A normal try-except block is not suitable for testing expected exceptions. The code below passes if an exception is raised and fails if it is not. However, a try-except block passes the test if the exception is raised and caught, and also passes if the exception is not raised, which is not ideal for testing.</p> <pre><code>import cards\nimport pytest\n\n\n# suggested way to test expected exception\ndef test_no_path_fail():\n    with pytest.raises(TypeError):\n        cards.CardsDB()\n</code></pre>"},{"location":"Python/pytest/#pytest-fixtures","title":"pytest fixtures","text":"<p>The example code below demonstrates fixtures in pytest. The first test passes, the second results in an error, and the third fails.</p> <pre><code>\"\"\"Demonstrate simple fixtures.\"\"\"\n\nimport pytest\n\n\n@pytest.fixture()\ndef some_data():\n    \"\"\"Return answer to ultimate question.\"\"\"\n    return 42\ndef test_some_data(some_data):\n    \"\"\"Use fixture return value in a test.\"\"\"\n    assert some_data == 42\n\n\n\n\n@pytest.fixture()\ndef some_other_data():\n    \"\"\"Raise an exception from fixture.\"\"\"\n    x = 43\n    assert x == 42\n    return x\n\n\ndef test_other_data(some_other_data):\n    \"\"\"Attempt to use a failing fixture.\"\"\"\n    assert some_other_data == 42\n\n\n\n\n@pytest.fixture()\ndef a_tuple():\n    \"\"\"Return something more interesting.\"\"\"\n    return (1, \"foo\", None, {\"bar\": 23})\n\n\ndef test_a_tuple(a_tuple):\n    \"\"\"Demonstrate the a_tuple fixture.\"\"\"\n    assert a_tuple[3][\"bar\"] == 32\n\n\n&gt;&gt;&gt; test_fixtures.py::test_some_data PASSED                                                                                                      [ 33%]\n&gt;&gt;&gt; test_fixtures.py::test_other_data ERROR                                                                                                      [ 66%]\n&gt;&gt;&gt; test_fixtures.py::test_a_tuple FAILED  \n</code></pre> <p>If a test results in \"Fail,\" the failure is in the test function (or something it called). If a test results in \"Error,\" the failure is in a fixture.</p>"},{"location":"Python/pytest/#tracing-fixture-execution","title":"tracing fixture execution","text":"<p>When two or more test functions use the same fixture, you can see how and when the fixture is called by using the\u00a0<code>pytest --setup-show</code>\u00a0flag.</p> <pre><code>from pathlib import Path\nfrom tempfile import TemporaryDirectory\nimport cards\n\nimport pytest\n\n\n@pytest.fixture()\ndef cards_db():\n    with TemporaryDirectory() as db_dir:\n        db_path = Path(db_dir)\n        db = cards.CardsDB(db_path)\n        yield db\n        db.close()\n\n\ndef test_empty(cards_db):\n    assert cards_db.count() == 0\n\n\n\ndef test_two(cards_db):\n    cards_db.add_card(cards.Card(\"first\"))\n    cards_db.add_card(cards.Card(\"second\"))\n    assert cards_db.count() == 2\n\n\n&gt;&gt;&gt;     SETUP    F cards_db\n        ch3/test_count.py::test_empty (fixtures used: cards_db).\n        TEARDOWN F cards_db\n        SETUP    F cards_db\n        ch3/test_count.py::test_two (fixtures used: cards_db).\n        TEARDOWN F cards_db\n</code></pre>"},{"location":"Python/pytest/#finding-where-fixtures-are-defined","title":"Finding where fixtures are defined","text":"<p>You can have\u00a0<code>conftest.py</code>\u00a0files at any level of your test directory. Tests can use any fixture that is in the same test module, in a\u00a0<code>conftest.py</code>\u00a0file in the same directory, or in any parent directory up to the root of the tests.</p> <pre><code>pytest --fixtures # shows all the locations where fixtures are defined\n</code></pre> <pre><code>pytest --fixtures-per-test &lt;folder name or testFile name&gt;\n# prints the fixtures used in test functions\n</code></pre>"},{"location":"Python/pytest/#parameterization","title":"Parameterization","text":"<p>There are three types of parameterization:</p> <ul> <li> <p>Parameterising functions</p> </li> <li> <p>Parameterising fixtures</p> </li> <li> <p>Using a hook function called <code>pytest_generate_tests</code></p> </li> </ul>"},{"location":"Python/pytest/#parameterizing-test-function","title":"Parameterizing test function","text":"<p>A test function uses the\u00a0<code>pytest.mark.parametrize</code>\u00a0decorator for parameterization. This decorator takes variable names and a list of parameter values. Variable names can be a comma-separated string or a list of strings. Values must be provided as a list (or list of tuples).</p> <pre><code># test_func_param.py\n\n\n@pytest.mark.parametrize(\n\"start_summary, start_state\",\n[\n(\"write a book\", \"done\"),\n(\"second edition\", \"in prog\"),\n(\"create a course\", \"todo\"),\n],\n)\ndef test_finish(cards_db, start_summary, start_state): \n    ...\n</code></pre>"},{"location":"Python/pytest/#selecting-a-single-parameterized-test","title":"Selecting a Single Parameterized Test","text":"<pre><code> pytest -v \"test_func_param.py::test_finish[write a book-done]\"\n</code></pre>"},{"location":"Python/pytest/#parameterizing-fixture","title":"Parameterizing fixture","text":"<pre><code>@pytest.fixture(params=[\"done\", \"in prog\", \"todo\"])\ndef start_state(request):\n\u00a0\u00a0\u00a0\u00a0return request.param\n\ndef test_finish(cards_db, start_state): \n    ...\n</code></pre>"},{"location":"Python/pytest/#parameterize-using-the-hook-function-pytest_generate_test","title":"Parameterize using the hook function <code>pytest_generate_test</code>","text":"<pre><code>def pytest_generate_tests(metafunc):\n\u00a0\u00a0\u00a0\u00a0if \"start_state\" in metafunc.fixturenames:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0metafunc.parametrize(\"start_state\", [\"done\", \"in prog\", \"todo\"]) \n\ndef test_finish(cards_db, start_state): \n    ...\n</code></pre>"},{"location":"Python/pytest/#how-to-manage-logging","title":"How to manage logging:","text":"<p>Simply pass the name of the test file to pytest to run the tests.</p> <pre><code>pytest test_one.py # tests all the test functions in this python file\npytest test_card.py::test_defaults # tests only test_defaults function in this python file\npytest &lt;folder name&gt; # tests all the test functions present in all the files in this folder\n</code></pre>"},{"location":"Python/pytest/#a-basic-example","title":"A basic example:","text":"<pre><code>import logging\n\ndef  test_apple():\n    logging.debug(\"LEET Debug message\")\n    logging.info(\"LEET info message\")\n    logging.warning(\"LEET warning message\")\n    logging.error(\"LEET error message\")\n    print(\"this is a print statement\")\n</code></pre> <p>Running the above code using\u00a0<code>pytest</code>\u00a0will not show any logging messages or print statements on the console, nor will it produce a log file.</p> <p>Using\u00a0<code>pytest --capture=no</code>\u00a0will print only the\u00a0<code>print</code>\u00a0statements to the console. In this case,\u00a0<code>this is a print statement</code>\u00a0will be printed, but all logging messages will be ignored.</p>"},{"location":"Python/pytest/#print-logging-statements-to-console","title":"Print logging statements to console:","text":"<p>To print logging messages to the console, it is advisable to write a pytest configuration file with logging settings and use the\u00a0<code>caplog</code>\u00a0fixture in your test.</p> <pre><code>pytest.ini file\n\n\n[pytest]\nlog_format = %(asctime)s %(levelname)s %(message)s\nlog_date_format = %Y-%m-%d %H:%M:%S\nlog_level=DEBUG\n</code></pre> <pre><code>import logging\n\ndef  test_apple(caplog):\n    logging.debug(\"LEET Debug message\")\n    logging.info(\"LEET info message\")\n    logging.warning(\"LEET warning message\")\n    logging.error(\"LEET error message\")\n    print(\"this is a print statement\")\n    print(caplog.text)\n</code></pre> <p>OUTPUT:</p> <pre><code>test_leet.py this is a print statement\n2023-08-07 07:33:20 DEBUG LEET Debug message\n2023-08-07 07:33:20 INFO LEET info message\n2023-08-07 07:33:20 WARNING LEET warning message\n2023-08-07 07:33:20 ERROR LEET error message\n</code></pre>"},{"location":"Python/pytest/#print-logging-messages-in-a-log-file","title":"Print logging messages in a log file:","text":"<p>The following configurations can be added to the\u00a0<code>pytest.ini</code>\u00a0file to log messages to a file.</p> <p>Do not use the\u00a0<code>caplog</code>\u00a0fixture in this case.</p> <pre><code>import logging\n\ndef  test_apple():\n    logging.debug(\"LEET Debug message\")\n    logging.info(\"LEET info message\")\n    logging.warning(\"LEET warning message\")\n    logging.error(\"LEET error message\")\n    print(\"this is a print statement\")\n</code></pre> <pre><code>pytest.ini file\n\n[pytest]\nlog_file=log\\logging.log\nlog_file_level=DEBUG\nlog_file_format=%(asctime)s %(levelname)s %(message)s\nlogfile_date_format=%Y-%m-%d %H:%M:%S\nlog_auto_indent=true\n</code></pre> <p>in /log/logging.log</p> <pre><code>07:39:08 DEBUG LEET Debug message\n07:39:08 INFO LEET info message\n07:39:08 WARNING LEET warning message\n07:39:08 ERROR LEET error message\n</code></pre> <p>Note:\u00a0Print statements are not included in the log file.</p>"},{"location":"Python/pytest/#print-logging-and-print-statements-to-console-and-log-file","title":"Print <code>logging</code> and <code>print</code> statements to console and log file:","text":"<pre><code>[pytest]\nlog_format = %(asctime)s %(levelname)s %(message)s\nlog_date_format = %Y-%m-%d %H:%M:%S\nlog_level=DEBUG\nlog_file=log\\logging.log\nlog_file_level=DEBUG\nlog_file_format=%(asctime)s %(levelname)s %(message)s\nlogfile_date_format=%Y-%m-%d %H:%M:%S\nlog_auto_indent=true\n</code></pre> <p>Run\u00a0<code>pytest --capture=no</code>\u00a0to print both logging and print statements to the console.</p>"},{"location":"Python/pytest/#handling-test-failures","title":"Handling Test failures:","text":"<pre><code>pytest -x # stop after first failure\npytest -x --pdb #jump to pdb after first failure\n\npytest --max-fail=3 # stop after 3 failures\npytest --max-fail=3 --pdb #jump to pdb all the 3 failures.\n\n\npytest --pdb #jumps to pdb on every failure\npytest --trace # jumps to pdb from the beginning of the test\n</code></pre>"},{"location":"Python/pytest/#two-ways-to-add-breakpoint","title":"Two ways to add breakpoint:","text":"<pre><code>#pythons built in breakpoint() method\nbreakpoint()\n\n\n#importing pdb module\nimport pdb\npdb.set_trace() ''' add this line where-ever \nexecutions needs to jump to pdb'''\n</code></pre>"},{"location":"Python/pytest/#managing-pytest-output","title":"Managing Pytest Output:","text":"<p><code>pytest --tb</code>\u00a0is helpful for logging a detailed or shortened traceback when a test fails.</p> <pre><code>pytest --tb=mode #Traceback print mode (auto/long/short/line/native/no)\n</code></pre> <p><code>pytest --full-trace</code> is going to log a whole trace traversed by the test when it fails.</p> <p>This is a great way to understand the flow of the test script.</p> <p><code>pytest -v</code> increases verbosity of logging </p> <p><code>pytest -vv</code> increases verbosity to two folds.</p>"},{"location":"Python/pytest/#creating-junit-format-output-files","title":"Creating JUnit format output files:","text":"<p><code>pytest --junitxml=log.xml</code>  will create a log file named <code>log.xml</code> with the standard log details.</p> <p><code>pytest --full-trace --junitxml=log.xml</code> is an efficient way to analyze code in depth when a test fails.</p>"},{"location":"Python/pytest/#the-pastebin-feature-in-pytest","title":"The Pastebin Feature in Pytest","text":"<p><code>--pastebin=mode</code>       Send failed|all info to bpaste.net pastebin service.</p> <p>Sending all or failed test results to the pastebin service creates an instant URL containing the entire test session log details.</p> <p>This URL can be used to share the log results with other collaborators.</p>"},{"location":"Python/pytest/#temporary-directories-and-files-in-pytest","title":"Temporary Directories and Files in Pytest:","text":"<pre><code># from pytest import TempPathFactory\nimport os\n\ndef test_kill(tmp_path):\n    print(tmp_path)\n    with open(tmp_path/\"hello.txt\", 'x') as fp:\n        fp.write(\"hello this is Dustin\")\n\n    assert os.path.exists(tmp_path)\n\ndef test_groot(tmp_path_factory):\n    fp = tmp_path_factory.mktemp(\"Dustin\") / \"waste.txt\"\n    with fp.open('x') as fl:\n        fl.write(\"Dustin\")\n</code></pre> <p>Running\u00a0<code>pytest --basetemp=TEMP</code>\u00a0creates a base temporary directory in the project directory, resulting in the following folder structure:</p> <pre><code>C:.\n\u251c\u2500\u2500\u2500jeevan0\n\u2502       waste.txt\n\u2502\n\u2514\u2500\u2500\u2500test_kill0\n        hello.txt\n</code></pre>"},{"location":"Python/pytest/#linting-pytest-scripts","title":"Linting Pytest Scripts:","text":"<pre><code>pip install flake8-pytest-style\n</code></pre> <p><code>flake8-pytest-style</code>\u00a0is a\u00a0<code>flake8</code>\u00a0plugin that checks for common style issues or inconsistencies in\u00a0<code>pytest</code>-based tests. It can be a helpful tool.</p>"},{"location":"Python/pytest/#changing-standard-test-discovery","title":"Changing Standard Test Discovery:","text":"<p><code>--ignore=path</code>\u00a0ignores tests in the specified folder path. The path can also be a specific Python test file to ignore.</p> <p><code>--ignore-glob='*_01.p_'</code>\u00a0will ignore all files that match the given glob pattern.</p> <p>Pytest discovers tests by recursively searching the directory passed as an argument, or the current directory if no path is provided.</p> <p><code>pytest src/temp/</code>  or <code>pytest</code></p> <p>If the\u00a0<code>norecursedirs</code>\u00a0option is set in the pytest.ini file, pytest will not recurse into these directories to find test files.</p> <pre><code>[pytest]\nnorecursedirs = .env tmp*\n</code></pre> <p>This will not find test files in tmp prefixed dirs and .env dir.</p>"},{"location":"Python/pytest/#to-change-the-test-file-discovery-pattern-from-test_py-and-_testpy-to-some-other-pattern","title":"To change the test file discovery pattern from test_*.py and *_test.py to some other pattern.","text":"<pre><code>[pytest]\npython_files= groot_*.py\npython_classes=Groot\npython_functions=groot_*\n</code></pre> <p>Another way to ignore test files or folders in pytest is to provide the file or folder name in a standard list in the\u00a0<code>conftest.py</code>\u00a0file.</p> <p><code>collect_ignore</code> and <code>collect_ignore_glob</code></p>"},{"location":"Python/pytest/#fixtures","title":"Fixtures","text":"<p><code>capsys</code>\u00a0and\u00a0<code>capsysbinary</code>\u00a0are built-in fixtures used to capture text from\u00a0<code>sys.stdout</code>\u00a0and\u00a0<code>sys.stderr</code>.</p> <pre><code>def test_output(capsys):\n    print(\"hello\")\n    captured = capsys.readouterr()\n    assert captured.out == \"hello\\n\" \n    assert captured.out == b\"hello\\n\" # for capsysbinary\n</code></pre> <p><code>capfd</code>\u00a0and\u00a0<code>capfdbinary</code>\u00a0are built-in fixtures used to capture text from file descriptors 1 and 2.</p> <pre><code>where python 1&gt;NUL //1 captures the output from terminal and directs it to NUL\nwhere tycon 2&gt;NUL //2 captures the error from the terminal and directs it to NUL\n</code></pre> <pre><code>def test_system_echo(capfd):\n    os.system('echo \"hello\"')\n    captured = capfd.readouterr()\n    assert captured.out == \"hello\\n\"\n</code></pre>"},{"location":"Python/pytest/#the-readouterr-method-in-capsys-capsysbinary-capfd-capfdbinary-returns-outerr-which-is-a-tuple","title":"The <code>readouterr()</code> method in <code>capsys, capsysbinary, capfd, capfdbinary</code> returns <code>(out,err)</code> which is a tuple.","text":""},{"location":"Python/pytest/#configuration-files-in-pytest","title":"Configuration files in pytest","text":"<p>The following files can be used as configuration files for a pytest project.</p> <ul> <li> <p>pytest.ini</p> </li> <li> <p>tox.ini</p> </li> <li> <p>pyproject.toml</p> </li> <li> <p>setup.cfg</p> </li> </ul>"},{"location":"Python/pythonBuiltIns/","title":"Built-ins in Python","text":""},{"location":"Python/pythonBuiltIns/#abs","title":"abs()","text":"<p>Returns the magnitude of a number.</p> <pre><code>a = complex(45, 56)\nb = -67\nprint(abs(a))\nprint(abs(b))\n\n# Output:\n# 71.84010022264724\n# 67\n</code></pre>"},{"location":"Python/pythonBuiltIns/#anyiterable-and-alliterable","title":"any(iterable) and all(iterable)","text":"<p><code>any()</code> and <code>all()</code> accept iterables.</p> <p><code>any()</code> returns <code>True</code> if any element of the iterable is non-zero.</p> <pre><code>lst = [1, 3, 5, 7, 9, 0]\nprint(all(lst))  # False\nlst = [0, 0, 0, 0, 0]\nprint(any(lst))  # False\n</code></pre>"},{"location":"Python/pythonBuiltIns/#breakpoint","title":"breakpoint()","text":"<p>The <code>breakpoint()</code> function is used for debugging. It calls the built-in debugger (normally the Python debugger, <code>pdb</code>) to allow you to interactively debug your code.</p> <p>The <code>breakpoint()</code> function can accept positional arguments (<code>*args</code>) and keyword arguments (<code>**kwargs</code>). These arguments are passed directly to the debugger, allowing you to customize the debugging session.</p> <pre><code># Example using breakpoint() with arguments\ndef my_function():\n    x = 10\n    y = 20\n    breakpoint(x, y, z=30)\n\nmy_function()\n</code></pre>"},{"location":"Python/pythonBuiltIns/#callableobject","title":"callable(object)","text":"<ul> <li>Note that classes are callable (calling a class returns a new instance).</li> <li>Instances are callable if their class has a <code>__call__</code> method.</li> </ul> <pre><code>class Trial:\n    def __init__(self, name) -&gt; None:\n        self.name = name\n\n    def __call__(self, *args, **kwargs):\n        print(f\"The name is {self.name}\")\n\nboy = Trial('kevin')\nprint(callable(boy))\nboy()\n# This prints True if the __call__ definition is uncommented and prints False if commented.\n\n# Output:\n# True\n# The name is kevin\n</code></pre>"},{"location":"Python/pythonBuiltIns/#classmethod","title":"@classmethod","text":"<p>Normally, methods in classes are instance methods, as they receive the instance as the implicit first argument.</p> <p><code>@classmethod</code> converts an instance method into a class method, which receives the class as the first argument.</p> <p>A class method can be called either on the class (such as <code>C.f()</code>) or on an instance (such as <code>C().f()</code>).</p> <p>In the example below, if <code>get_INI_value</code> is just an instance method, it must be called as <code>ParserINI().get_INI_value(section, option)</code>. Since it is a class method, it can be called as <code>ParserINI.get_INI_value()</code>.</p> <pre><code>class ParseINI:\n    config = ConfigParser()\n    config.read(\"configuration.ini\")\n\n    @classmethod\n    def get_INI_value(cls, section: str, option: str) -&gt; str:\n        return cls.config.get(section, option)\n</code></pre>"},{"location":"Python/pythonBuiltIns/#compile","title":"compile()","text":"<p>Used to compile a source code string into executable code.</p> <pre><code>source = '''import os\nprint(os.__dir__())'''\n\nexecutable = compile(source, '&lt;string&gt;', 'exec')\nexec(executable)\n</code></pre> <p>Real-world usage includes scripting engines, creating custom domain-specific languages, runtime code evaluation, code generator tools, and code evaluation tools.</p>"},{"location":"Python/pythonBuiltIns/#enumerateiterable","title":"enumerate(iterable)","text":"<pre><code>l = [1, 5, 9, 5, 2, 0, 12, 56, 78, 34]\n\nfor index, value in enumerate(l):\n    print(f\"{index} : {value}\\t\")\n\n# Output:\n# 0 : 1\n# 1 : 5\n# 2 : 9\n# ...\n\n# Below is the output if enumerate(l, 7) is given; the second argument defines the start value of the indexing.\n# Output:\n# 7 : 1\n# 8 : 5\n# 9 : 9\n# ...\n</code></pre>"},{"location":"Python/pythonBuiltIns/#map-and-filter","title":"map() and filter()","text":""},{"location":"Python/pythonBuiltIns/#mapfunction-iterable","title":"map(function, iterable)","text":"<p>The <code>map()</code> function takes a function and an iterable. It applies the function to each element of the iterable.</p> <pre><code>cube = lambda n: n * n * n\nl = [7, 3, 6, 1, 2, 9]\nprint(list(map(cube, l)))  # [343, 27, 216, 1, 8, 729]\n</code></pre>"},{"location":"Python/pythonBuiltIns/#filterfunction-iterable","title":"filter(function, iterable)","text":"<p>Filters the elements of an iterable based on the function passed to it.</p> <pre><code>l = [1, 5, 9, 5, 2, 0, 12, 56, 78, 34]\n\ndef even(n):\n    return n % 2 == 0\n\nprint(list(filter(even, l)))\n</code></pre>"},{"location":"Python/pythonBuiltIns/#locals-and-globals-functions-in-python","title":"locals() and globals() functions in Python","text":"<p><code>locals()</code> is a built-in function in Python that returns the dictionary of the current local symbol table.</p> <pre><code>print(locals())\n\n# Output:\n# {'__name__': '__main__', '__doc__': None, ...}\n</code></pre> <p>Example code to demonstrate the <code>locals()</code> function:</p> <p>Calling <code>locals()</code> outside a function prints all the general local variables in Python.</p> <p>Calling <code>locals()</code> inside a function prints only the local variables defined inside that function.</p> <pre><code>a = 10\nb = 20\n\ndef func():\n    x = 30\n    y = 40\n    print(locals())\n\nprint(locals())\nfunc()\n\n# Output:\n# {'__name__': '__main__', ... 'a': 10, 'b': 20, 'func': &lt;function func at ...&gt;}\n# {'x': 30, 'y': 40}\n</code></pre> <p><code>globals()</code> is a built-in function in Python that returns the dictionary of the global symbol table. Similar to <code>locals()</code>, <code>globals()</code> is used to obtain variables in the respective scope.</p> <pre><code>print(globals())\n</code></pre>"},{"location":"Python/pythonBuiltIns/#zipiterable","title":"zip(*iterable)","text":"<p>Iterate over several iterables in parallel, producing tuples with an item from each one.</p> <pre><code>for item in zip([1, 2, 3], ['sugar', 'spice', 'everything nice']):\n    print(item)\n\n# Output:\n# (1, 'sugar')\n# (2, 'spice')\n# (3, 'everything nice')\n</code></pre> <p><code>zip()</code> stops when the shortest iterable is exhausted.</p>"},{"location":"Python/pythonBuiltIns/#zip-and-unzip","title":"zip and unzip","text":"<pre><code>x = [1, 2, 3, 4, 5]\ny = [6, 7, 8, 9, 10]\nzip_object = zip(x, y)\nprint(list(zip_object))  # After zipping two iterables\n\np, q = zip(*zip(x, y))  # This is a way to unzip zipped iterables\nprint(list(p))\nprint(list(q))\n</code></pre>"},{"location":"Python/pythonBuiltIns/#super","title":"super()","text":"<pre><code>class Student:\n    def __init__(self, name) -&gt; None:\n        self.student_name = name\n\nclass Marks(Student):\n    def __init__(self, name, marks) -&gt; None:\n        Student.__init__(self, name)\n        self.marks = marks\n\ns1 = Marks('farzi', 10)\nprint(s1.__dict__)\n\n# The above code can be written using the super() function as below:\n\nclass Student:\n    def __init__(self, name) -&gt; None:\n        self.student_name = name\n\nclass Marks(Student):\n    def __init__(self, name, marks) -&gt; None:\n        super().__init__(name)\n        self.marks = marks\n\ns1 = Marks('farzi', 10)\nprint(s1.__dict__)\n</code></pre>"},{"location":"Python/pythonBuiltIns/#slicestart-stop-step-method-in-python","title":"slice(start, stop [, step]) method in Python","text":"<p>The <code>slice</code> method is an alternative way of using <code>list[start:stop:step]</code> in Python.</p> <pre><code>l = [1, 6, 3, 2, 8, 6, 89, 23, 5, 25, 76, 87, 42, 61, 90, 22, 13, 45, 78, 65]\nprint(l)\n# [1, 6, 3, 2, 8, 6, 89, 23, 5, 25, 76, 87, 42, 61, 90, 22, 13, 45, 78, 65]\n\nprint(l[0::2])  # One way of list slicing method.\n# [1, 3, 8, 89, 5, 76, 42, 90, 13, 78]\n\nprint(l[slice(0, len(l), 2)])  # Alternate way of slicing\n# [1, 3, 8, 89, 5, 76, 42, 90, 13, 78]\n</code></pre>"},{"location":"Python/pythonBuiltIns/#__call__","title":"<code>__call__()</code>","text":"<p>The <code>__call__()</code> method is used to make a class instance callable like a function, and is often used to make a class act as a decorator.</p> <pre><code>class Trial:\n    def __init__(self, name) -&gt; None:\n        self.name = name\n\n    def __call__(self, *args: Any, **kwargs: Any) -&gt; Any:\n        print(f\"The name is {self.name}\")\n\nboy = Trial('kevin')\nboy()  # Object of the class Trial called as a function.\n</code></pre>"},{"location":"Python/pythonBuiltIns/#string-methods","title":"String Methods","text":"<pre><code># Strings are immutable and cannot be changed once assigned to a variable.\n# However, string methods can be used to create a new string from the existing one.\n\na = \"!!starwar!!\"\na.upper()        # Outputs an uppercase version of the string\na.lower()        # Outputs a lowercase version of the string\na.rstrip(\"!\")    # Strips the occurrence of the given character at the end of the string -&gt; !!starwar\na.strip(\"!\")     # Strips the given character from both sides -&gt; starwar\na.replace('war', 'jar')  # Replaces all occurrences of 'war' with 'jar' -&gt; !!starjar!!\n</code></pre> <pre><code>b = \"avenger.com\"\nb.split('.')        # ['avenger', 'com']\nb.capitalize()      # 'Avenger.com' - Converts first character to uppercase\nb.count('com')      # Counts the occurrence of 'com' in this string -&gt; 1\nb.endswith('m')     # Returns True if the string ends with 'm'\n</code></pre> <pre><code># Both the methods below work similarly, but when a given string is not found,\n# find() returns -1, while index() raises an exception.\n\nc = \"Spiderman is an avenger\"\nc.find('is')        # Returns the index of the first occurrence of 'is'\nc.find('was')       # Returns -1 if not found\n\nc.index('is')       # Returns the index of the first occurrence of 'is'\nc.index('lwhoeu')   # Raises ValueError if not found\n</code></pre> <pre><code>isalnum(), isalpha(), islower()\nswapcase()  # Swaps the case of the given string\ntitle()     # Converts the string to title case\n</code></pre>"},{"location":"Python/pythonBuiltIns/#list-methods","title":"List Methods","text":"<p>To initialize a list with an initial size:</p> <pre><code>l = [None] * 5\n# Here the length of the list is 5 and all 5 elements are assigned None\n</code></pre> <p>A list is a mutable type. Any list methods used on a list will affect the original list.</p> <pre><code>a = [3, 8, 2, 9, 7, 5, 1, 23, 54]\na.append(4)           # [3, 8, 2, 9, 7, 5, 1, 23, 54, 4]\na.sort()              # [1, 2, 3, 4, 5, 7, 8, 9, 23, 54]\na.sort(reverse=True)  # [54, 23, 9, 8, 7, 5, 4, 3, 2, 1]\n\na = [3, 8, 2, 9, 7, 5, 1, 23, 54]\na.reverse()           # [54, 23, 1, 5, 7, 9, 2, 8, 3]\nprint(a.index(7))     # Prints 4 as index of 7 in reversed list is 4\nprint(a.count(3))     # Prints number of occurrences of 3 in the list\n\n# Changing an element of b changes the element of a. b is a reference to a.\na = [3, 8, 2, 9, 7, 5, 1, 23, 54]\nb = a  # Assigning like this is not best practice.\nb[0] = 0\nprint(a)  # [0, 8, 2, 9, 7, 5, 1, 23, 54]\n\na = [3, 8, 2, 9, 7, 5, 1, 23, 54]\nb = a.copy()  # This is best practice; changes made in b remain in b.\nb[0] = 0\nprint(a)  # [3, 8, 2, 9, 7, 5, 1, 23, 54]\n\na = [3, 8, 2, 9, 7, 5, 1, 23, 54]\na.insert(4, 100)\nprint(a)  # [3, 8, 2, 9, 100, 7, 5, 1, 23, 54]\n</code></pre>"},{"location":"Python/pythonBuiltIns/#f-strings-in-python","title":"f-strings in Python","text":"<pre><code>spacecraft = 'voyager'\nyear = '1977'\nprint(f\"{spacecraft} is a fly-by satellite launched in {year}\")\n# voyager is a fly-by satellite launched in 1977\n\n# If a curly bracket is also needed in the string\nprint(f\"{spacecraft} is a fly-by satellite launched in {year} weighs {{Nothing}}\")\n# voyager is a fly-by satellite launched in 1977 weighs {Nothing}\n</code></pre>"},{"location":"Python/pythonBuiltIns/#try-except-finally","title":"try-except-finally","text":"<p>In try-except-finally, a piece of code is tried. If an exception occurs, it can be caught in the except block. The finally block always gets executed no matter what.</p> <pre><code># Demo of finally\ndef pool():\n    try:\n        something\n        return return_value\n    except:\n        error_handling\n        return return_value\n    finally:\n        final_wrap_up_lines\n\n# Here, even after the try or except block hits the return statement, finally gets executed.\n# This is the specialty of the finally block.\n</code></pre>"},{"location":"Python/pythonBuiltIns/#if-else-in-a-single-line-statement","title":"if-else in a single line statement","text":"<pre><code>print(\"4 greater than 2\") if 4 &gt; 2 else print(\"5 greater than 3\") if 5 &gt; 3 else print(\"nothing\")\n</code></pre>"},{"location":"Python/pythonBuiltIns/#file-handling","title":"File handling","text":"<pre><code>with open(\"file.txt\", \"r\") as f:\n    print(f.read(), \"\\n\", type(f))  # Reads entire file till EOF\n    print(f.tell())                 # Gives current position of the pointer -&gt; 766\n    f.seek(0)                       # Seek to a required position in a file. Here file pointer seeks the 0th char and points to it -&gt; points to G here\n    print(f.tell())                 # Current position of pointer -&gt; 0\n    print(f.read(5))                # Read 5 bytes from the current pointer position -&gt; Galax\n\nwith open(\"file.txt\", '+a') as f:\n    f.truncate(300)  # Truncates the file content to 300 bytes\n\n# Now reading the file would contain only 300 characters\n</code></pre>"},{"location":"Python/pythonBuiltIns/#decorators","title":"Decorators","text":"<p>Decorators take a function as an argument, modify it, and return a new function. Here, <code>raptor</code> is a decorator that takes a function as an argument, adds print statements at the beginning and end, and returns a new function <code>endo()</code>.</p> <pre><code>def raptor(func):\n    def endo(*args):\n        print(\"hello from the decorator\")\n        func(*args)\n        print(\"Bye!! from Decorator\")\n    return endo\n\n@raptor\ndef average(a, b, c):\n    print(\"average is :\")\n    print((a + b + c) / 3)\n\nif __name__ == \"__main__\":\n    average(8, 1, 6)\n\n# Output:\n# hello from the decorator\n# average is :\n# 5.0\n# Bye!! from Decorator\n</code></pre> <p>Below is a good boilerplate template for decorators in Python that can be used to build more complex decorators.</p> <pre><code>def decorator(func):\n    def wrapper_decorator(*args, **kwargs):\n        # Do something before\n        value = func(*args, **kwargs)\n        # Do something after\n        return value\n    return wrapper_decorator\n</code></pre>"},{"location":"Python/pythonBuiltIns/#asterisk-and-as-arguments-to-functions","title":"Asterisk * and / as arguments to functions","text":"<p>When you see an asterisk (*) in the function parameter list, it typically indicates that all the parameters following it are keyword-only arguments.</p> <pre><code>def fixture(\n    fixture_function: Optional[FixtureFunction] = None,\n    *,\n    scope: \"Union[_ScopeName, Callable[[str, Config], _ScopeName]]\" = \"function\",\n    params: Optional[Iterable[object]] = None,\n    autouse: bool = False,\n    ids: Optional[\n        Union[Sequence[Optional[object]], Callable[[Any], Optional[object]]]\n    ] = None,\n    name: Optional[str] = None,\n) -&gt; Union[FixtureFunctionMarker, FixtureFunction]:\n    ...\n</code></pre> <p>The <code>/</code> symbol specifies positional-only arguments, meaning they must be provided in order and cannot be used as keyword arguments.</p> <pre><code>def divide(a, b, /):\n    return a / b\n\nprint(divide(10, 2))         # \u2705 Works: Positional arguments\nprint(divide(a=10, b=2))     # \u274c Error: Cannot use keyword arguments\n</code></pre>"},{"location":"Python/pythonBuiltIns/#s-in-python","title":"%s in Python","text":"<p>A string can be formed using the line below, where <code>filename</code> and <code>line</code> are the strings that are printed in place of <code>%s</code>:</p> <pre><code>print(\"Bad line in config-file %s:\\n%s\" % (filename, line))\n</code></pre> <p>A plain string can be formed as below:</p> <pre><code>default_cfg = \"turtle_%s.cfg\" % cfgdict1[\"importconfig\"]\n</code></pre>"},{"location":"Python/pythonBuiltIns/#reversed-and-reverse","title":"reversed() and reverse()","text":"<p><code>reverse()</code> is used on a list and modifies the original list in place.</p> <p>On the other hand, <code>reversed()</code> is a built-in function in Python that returns an iterator that accesses the given sequence in the reverse order. The original list remains unchanged.</p> <pre><code>lst_ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n\nlst_.reverse()\nprint(lst_)\n# [0, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nprint(list(reversed(lst_)))\n# [0, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n</code></pre>"},{"location":"Python/pythonBuiltIns/#sorted-and-sort","title":"sorted() and sort()","text":"<p>Both of these functions use <code>key</code> as an argument, where a callable can be passed.</p> <p>Syntax for both functions:</p> <pre><code>sorted(iterable, /, *, key=None, reverse=False) -&gt; iterable\nsort(iterable, /, *, key=None, reverse=False) -&gt; None\n</code></pre> <pre><code>lst = [6, 1, 4, 0, 9, 3, 8, 7, 2, 5]\n\nprint(sorted(lst))  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] - doesn't change the original list\nprint(lst)          # [6, 1, 4, 0, 9, 3, 8, 7, 2, 5]\n\nlst.sort()\nprint(lst)          # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] - changes the list\n</code></pre>"},{"location":"Python/pythonBuiltIns/#staticmethod","title":"@staticmethod","text":"<p>Transforms a method into a static method. A static method can be called either on the class (such as <code>C.f()</code>) or on an instance (such as <code>C().f()</code>).</p> <p>A static method does not receive an implicit first argument. To declare a static method, use this idiom:</p> <pre><code>class C:\n    @staticmethod\n    def f(arg1, arg2, argN):\n        ...\n</code></pre>"},{"location":"Python/pythonBuiltIns/#roundnumber-ndigitsnone","title":"round(number, ndigits=None)","text":"<p>For example, both <code>round(0.5)</code> and <code>round(-0.5)</code> are <code>0</code>, and <code>round(1.5)</code> is <code>2</code>. The return value is an integer if <code>ndigits</code> is omitted or <code>None</code>. Otherwise, the return value has the same type as <code>number</code>.</p> <p><code>round(2.675, 2)</code> gives <code>2.67</code> instead of the expected <code>2.68</code>. This is not a bug.</p>"},{"location":"Python/pythonBuiltIns/#strobject-reprobject-and-asciiobject","title":"str(object), repr(object), and ascii(object)","text":""},{"location":"Python/pythonBuiltIns/#strobjectb-encodingutf-8-errorsstrict","title":"str(object=b'', encoding='utf-8', errors='strict')","text":"<p>Returns the string version of the object.</p>"},{"location":"Python/pythonBuiltIns/#reprobject","title":"repr(object)","text":"<p>Returns a string containing a printable representation of an object. A class can control what this function returns for its instances by defining a <code>__repr__()</code> method.</p>"},{"location":"Python/pythonBuiltIns/#asciiobject","title":"ascii(object)","text":"<p>The <code>ascii()</code> function in Python is used to generate a string representation of an object, similar to what the <code>repr()</code> function does. However, <code>ascii()</code> differs in that it escapes non-ASCII characters in the string returned by <code>repr()</code> using <code>\\x</code>, <code>\\u</code>, or <code>\\U</code> escapes. This means that any characters outside the ASCII range (0-127) will be represented using escape sequences.</p> <pre><code># Define a string with non-ASCII characters\ns = \"Caf\u00e9\"\n\n# Use repr() to get the string representation\nprint(\"Using repr():\", repr(s))  # Output: 'Caf\u00e9'\n\n# Use ascii() to get the ASCII representation with escape sequences\nprint(\"Using ascii():\", ascii(s))  # Output: 'Caf\\xe9'\n</code></pre> <pre><code>fring = \"\u20ae\u20b0\u20a9\ua7a6\ufbd4\"\nprint(ascii(fring))\n\n# Output:\n# '\\u20ae\\u20b0\\u20a6\\u20a9\\ua7a6\\ufbd4'\n</code></pre>"},{"location":"Python/pythonBuiltIns/#chr-ord-bin-hex-and-oct","title":"chr(), ord(), bin(), hex(), and oct()","text":""},{"location":"Python/pythonBuiltIns/#ord-and-chr","title":"ord() and chr()","text":"<p><code>ord()</code> and <code>chr()</code> are inverses of each other.</p> <ul> <li><code>ord()</code>: gives the Unicode value of a character.</li> <li><code>chr()</code>: gives the character corresponding to a Unicode value.</li> </ul> <pre><code>char = 'a'\nunicode_value = ord(char)\nchar_equivalent_of_unicode = chr(unicode_value)\n\nprint(f\"unicode = {unicode_value}\")\nprint(f\"Character equivalent to unicode value = {char_equivalent_of_unicode}\")\n</code></pre>"},{"location":"Python/pythonBuiltIns/#bininteger","title":"bin(integer)","text":"<pre><code>print(bin(10))\n# Output: 0b1010\n</code></pre>"},{"location":"Python/pythonBuiltIns/#hex","title":"hex()","text":"<pre><code>hex(255)\n# Output: '0xff'\n</code></pre>"},{"location":"Python/pythonBuiltIns/#oct","title":"oct()","text":"<pre><code>oct(8)\n# Output: '0o10'\n</code></pre>"},{"location":"Python/pythonBuiltIns/#iter-and-next","title":"iter() and next()","text":"<p><code>iter()</code> creates an iterator object.</p> <p>With this iterator object, use <code>next()</code> to iterate through it.</p> <pre><code>iterator = iter(lst_)\nprint(next(iterator))\n</code></pre> <p><code>next()</code> or <code>__next__()</code> can be used with the iterator object to iterate through the values.</p> <pre><code>a = [1, 2, 23, 3, 5, 6, 7, 8]\nItr = iter(a)\n\nfor _ in range(len(a)):\n    print(Itr.__next__())\n# Output: 1 2 23 3 5 6 7 8\n</code></pre>"},{"location":"Python/pythonBuiltIns/#min-and-max","title":"min() and max()","text":"<p>Take an iterable and return the minimum or maximum value accordingly.</p> <ul> <li><code>min(iterable, *, key=None)</code></li> <li><code>min(iterable, *, default, key=None)</code></li> <li><code>min(arg1, arg2, *args, key=None)</code></li> <li><code>max(iterable, *, key=None)</code></li> <li><code>max(iterable, *, default, key=None)</code></li> <li><code>max(arg1, arg2, *args, key=None)</code></li> </ul>"},{"location":"Python/pythonBuiltIns/#isinstance-and-issubclass","title":"isinstance() and issubclass()","text":"<p><code>isinstance(object, class)</code> checks if the object is an instance of the given class.</p> <p>The <code>class</code> argument can also be a tuple of classes, where the function returns True if the object is an instance of at least one of the classes.</p> <pre><code>class Planet:\n    pass\n\nclass Animal:\n    pass\n\nclass Dog():\n    pass\n\ndog_instance = Dog()\n\nprint(isinstance(dog_instance, Dog))\nprint(isinstance(dog_instance, (Dog, Animal)))\nprint(isinstance(dog_instance, (Planet, Animal)))\n\n# Output:\n# True\n# True\n# False\n</code></pre> <p><code>issubclass(class, classinfo)</code> accepts two classes and checks if one class is a subclass of the other. The <code>classinfo</code> argument can also be a tuple of classes. Here, the class has to be a subclass of at least one of the classes in the tuple.</p> <pre><code>class Shape:\n    pass\n\nclass Circle(Shape):\n    pass\n\n# Check if Circle is a subclass of Shape\nresult = issubclass(Circle, Shape)\nprint(result)  # Output: True\n</code></pre>"},{"location":"Python/pythonBuiltIns/#open","title":"open()","text":"<p>It is recommended to use <code>open</code> in a <code>with</code> statement as it takes care of closing the file once it exits the <code>with</code> block, even when an exception occurs.</p> <p><code>fp</code> is a file object, similar to a file pointer in other languages.</p> <pre><code>with open('abcd.txt', 'r') as fp:\n    ...\n</code></pre>"},{"location":"Python/pythonBuiltIns/#mode-parameter-can-be","title":"mode parameter can be:","text":"mode description 'r' open the file in read mode 'w' open the file in write mode 'rb' or 'wb' open in binary mode"},{"location":"Python/pythonBuiltIns/#reading-a-file-after-opening","title":"Reading a file after opening:","text":"definition description .read(size=-1) Reads the file based on the byte size passed.Default byte size is -1, which reads all the bytes in the document. .readline(size=-1) Reads one line. .readlines() Reads all the lines of a document and returns a list. list(fp) is also equivalent to .readlines() Where <code>fp</code>, the file object, is typecast to a list."},{"location":"Python/pythonBuiltIns/#readline","title":"readline()","text":"<pre><code># readline() to read a whole document\n\nwith open(r\"example.log\", 'r') as fp:\n    line_ = fp.readline()\n    while line_ != '':\n        print(line_)\n        line_ = fp.readline()\n</code></pre>"},{"location":"Python/pythonBuiltIns/#readlines","title":"readlines()","text":"<pre><code># readlines() to read the whole document\n\nwith open(r\"example.log\", 'r') as fp:\n    for line in fp.readlines():\n        print(line)\n</code></pre>"},{"location":"Python/pythonBuiltIns/#read","title":"read()","text":"<pre><code>with open(r\"example.log\", 'r') as fp:\n    print(fp.read())\n</code></pre>"},{"location":"Python/pythonBuiltIns/#working-with-two-files-at-a-time","title":"Working with two files at a time","text":"<pre><code>with open(r\"example.log\", 'r') as reader, open('writer.txt', 'w') as writer:\n    writer.write(reader.read())\n</code></pre>"},{"location":"Python/pythonBuiltIns/#venv","title":"venv","text":"<pre><code>python -m venv .env\n\n# To clear the existing .env/ and create it again\npython -m venv .env --clear\n\n# To upgrade the Python binary in the virtual environment with the system Python\npython -m venv .env --upgrade\n\n# Install updated pip as soon as you create .env/\npython -m venv .env --upgrade-deps\n\n# Create multiple environments\n# Here, three Python environments are created in the existing directory.\npython -m venv .env/ .venv/ .environment/\n\n# Change the displayed command prompt name\npython -m venv .env --prompt=\"client_1\"\n</code></pre>"},{"location":"Python/pythonBuiltIns/#miscellaneous","title":"Miscellaneous","text":""},{"location":"Python/pythonBuiltIns/#three-ways-of-setting-attribute-values-of-a-class","title":"Three ways of setting attribute values of a class","text":"<p>This can be done in three ways:</p> <pre><code>@dataclass\nclass Student:\n    name: str\n    grade: str\n    age: int\n\ns1 = Student('jeeva', 'C', 20)\nprint(f\"Student {s1.name} of age {s1.age} has {s1.grade} grade\")\nsetattr(s1, 'grade', 'A')\nprint(f\"Student {s1.name} of age {s1.age} has {s1.grade} grade\")\ns1.grade = 'F'\nprint(f\"Student {s1.name} of age {s1.age} has {s1.grade} grade\")\n\n# Output:\n# Student jeeva of age 20 has C grade\n# Student jeeva of age 20 has A grade\n# Student jeeva of age 20 has F grade\n</code></pre> <p>One is the conventional way where the attributes are given when declaring an instance of the class <code>s1</code>.</p> <p>Using <code>setattr</code>.</p> <p>And using <code>s1.grade = 'F'</code>.</p> <pre><code>if sys.version_info &gt;= (3, 8):\n    ...\n</code></pre> <p>The above line is used to verify the version of Python and, based on that, execute certain code.</p>"},{"location":"Python/pythonBuiltIns/#floor-division-operator","title":"Floor division operator","text":"<pre><code>print(15 // 4)\n</code></pre>"},{"location":"Python/pythonBuiltIns/#match-case-statements-in-python","title":"Match case statements in Python","text":"<p>These are valid from Python 3.10. Match-case is similar to switch-case in C.</p>"},{"location":"Python/pythonBuiltIns/#len","title":"len()","text":"<p>A <code>range</code> object doesn\u2019t store all the values but generates them when they\u2019re needed. However, you can still find the length of a <code>range</code> object using <code>len()</code>:</p> <pre><code>len(range(1, 20, 2))\n# Output: 10\n</code></pre>"},{"location":"Python/pythonBuiltIns/#weakref-in-python","title":"weakref in Python","text":"<pre><code>import weakref\n\nclass MyClass:\n    def __init__(self, name):\n        self.name = name\n\n    def print_name(self):\n        print(self.name)\n\nmy_obj = MyClass(\"Nitrogen\")\nmy_obj.print_name()\n# Output: Nitrogen\n\n# Create a weak reference to my_obj\nweak_reference = weakref.ref(my_obj)\n\n# weak_reference object is callable; it must be called\nif weak_reference() is not None:\n    print(\"Object alive\")\nelse:\n    print(\"Object not alive\")\n# Output: Object alive\n\n# weakref object must also be called, upon which its instance methods can be called\nprint(weak_reference().print_name())\n\n# Delete main object\ndel my_obj\n\n# Check if the object is still alive\nif weak_reference() is not None:\n    print(\"Object alive\")\nelse:\n    print(\"Object not alive\")\n# Output: Object not alive\n</code></pre>"},{"location":"Python/pythonBuiltIns/#dictionary-in-python","title":"Dictionary in Python","text":"<pre><code>a = dict(one=1, two=2, three=3)\nb = {'one': 1, 'two': 2, 'three': 3}\nc = dict(zip(['one', 'two', 'three'], [1, 2, 3]))\nd = dict([('two', 2), ('one', 1), ('three', 3)])\ne = dict({'three': 3, 'one': 1, 'two': 2})\nf = dict({'one': 1, 'three': 3}, two=2)\nassert a == b == c == d == e == f\n</code></pre> <pre><code># List of keys\ng = list(a)\n\n# List of values\nh = list(a.values())\n\n# Delete an entry in dict\ndel a['one']\n\n# Clear all entries in a dict\na.clear()\n\n# Shallow copy a dict into another\ni = b.copy()\n</code></pre> <pre><code># Create a dict from 'fromkeys' method\nj = dict.fromkeys(['four', 'five', 'six', 'seven', 'eight'], None)\n\n# Pop an entry by key\nj.pop('six')\n\n# Pop the last entry\nprint(j.popitem())\n</code></pre> <pre><code>j.update({'seven': 7})\n# OR\nj.update(seven=9)\nj\n</code></pre>"},{"location":"Python/pythonBuiltIns/#chainmap","title":"ChainMap","text":"<pre><code>from collections import ChainMap\n\nbaseline = {'music': 'bach', 'art': 'rembrandt'}\nadjustments = {'art': 'van gogh', 'opera': 'carmen'}\nbboss = {'opera': [1, 2, 3, 4, 5], 'maven': 'kalmi'}\n\n# `|` can be used to chain multiple dicts; the last dict is considered the latest\nprint(baseline | adjustments | bboss)\n\n# collections.ChainMap can be used to chain multiple dicts; the first dict is considered the latest\nchain_obj = ChainMap(baseline, adjustments, bboss)\nchain_obj = dict(chain_obj)\nprint(chain_obj)\n\n# Output:\n# {'music': 'bach', 'art': 'van gogh', 'opera': [1, 2, 3, 4, 5], 'maven': 'kalmi'}\n# {'opera': 'carmen', 'maven': 'kalmi', 'art': 'rembrandt', 'music': 'bach'}\n</code></pre>"},{"location":"Python/pythonBuiltIns/#collections-module","title":"<code>collections</code> module","text":""},{"location":"Python/pythonBuiltIns/#counter","title":"Counter","text":"<pre><code>from collections import Counter\n\n# Tally occurrences of words in a list\ncnt = Counter()\nfor word in ['red', 'blue', 'red', 'green', 'blue', 'blue']:\n    cnt[word] += 1\nprint(cnt)\n</code></pre>"},{"location":"Python/pythonBuiltIns/#deque","title":"deque","text":"<p>Below are the methods of the deque class:</p> <p>'append', 'appendleft', 'clear', 'copy', 'count', 'extend', 'extendleft', 'index', 'insert', 'maxlen', 'pop', 'popleft', 'remove', 'reverse', 'rotate'</p>"},{"location":"Python/string/","title":"Python String Module","text":""},{"location":"Python/string/#some-constants-defined-in-this-module","title":"Some constants defined in this module:","text":"<p>The following constants are defined in the <code>string</code> module:</p>"},{"location":"Python/string/#stringascii_letters","title":"<code>string.ascii_letters</code>:","text":"<p>The concatenation of the <code>ascii_lowercase</code> and <code>ascii_uppercase</code> constants described below. This value is not locale-dependent.</p> <p><code>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</code></p>"},{"location":"Python/string/#stringascii_lowercase","title":"<code>string.ascii_lowercase</code>:","text":"<p>The lowercase letters <code>'abcdefghijklmnopqrstuvwxyz'</code>. This value is not locale-dependent and will not change.</p>"},{"location":"Python/string/#unpacking-from-a-string","title":"Unpacking from a string:","text":"<pre><code>print(\"{0} is your first alphabet\".format(*\"galaxy\"))\n# Output:\n# g is your first alphabet\n\nprint('{2}, {1}, {0}'.format(*'abc'))  # Unpacking argument sequence\n# Output:\n# c, b, a\n</code></pre>"},{"location":"Python/string/#unpacking-from-a-variable-assigned-with-a-string","title":"Unpacking from a variable assigned with a string:","text":"<pre><code>a = '{0}'.format(*\"jeevan\")\nprint(a)\n# Output:\n# j\n\ngroot = \"hello this is jeevan\"\na = '{0}'.format(*groot)\nprint(a)\n# Output:\n# h\n</code></pre>"},{"location":"Python/string/#alignment-of-text","title":"Alignment of text:","text":"<p>The <code>:</code> character is used in the format string to align text to the left, right, or center.</p> <pre><code>'{:&lt;30}'.format('left aligned')\n# Output:\n# 'left aligned                  '\n\n'{:&gt;30}'.format('right aligned')\n# Output:\n# '                 right aligned'\n\n'{:^30}'.format('centered')\n# Output:\n# '           centered           '\n\n'{:*^30}'.format('centered')  # Use '*' as a fill character\n# Output:\n# '***********centered***********'\n</code></pre>"},{"location":"Python/string/#percentages","title":"Percentages:","text":"<pre><code>points = 19\ntotal = 22\nprint('Correct answers: {:.2%}'.format(points / total))\n# Output:\n# 86.36%\n</code></pre>"},{"location":"Python/tox/","title":"tox","text":""},{"location":"Python/tox/#installing-tox","title":"Installing tox","text":"<pre><code>pip install tox\n</code></pre> <p>After installing tox, create an empty <code>tox.ini</code> file and run the <code>tox</code> command. This will generate a <code>.tox</code> folder in the project directory.</p>"},{"location":"Python/tox/#tox_1","title":".tox","text":"<p>The <code>.tox</code> folder contains subdirectories named <code>.pkg</code>, <code>.tmp</code>, and <code>py</code>. The <code>.pkg</code> and <code>py</code> folders contain Python virtual environments. Among these environments, you should use the virtual environment in the <code>py</code> folder for project debugging and testing. The virtual environment in the <code>.pkg</code> folder is only used during the build process.</p> Folder Purpose Should you use its interpreter? .pkg Builds the package before testing \u274c .tmp Used by tox for storing cache and temporary files \u274c py Contains the virtual environment that users should make use of \u2705"},{"location":"Python/uv/","title":"uv","text":"<p><code>uv</code> is a popular Python library used for project management. It is written in Rust and is 10x to 100x faster than conventional Python libraries for similar tasks.</p>"},{"location":"Python/uv/#creating-a-project","title":"Creating a Project","text":"<p>Use the following command to create a new project directory named <code>project_app</code> in the current location:</p> <pre><code>uv init project_app\n</code></pre> <p>This command generates various files and folders as shown below. The <code>pyproject.toml</code> file is prefilled with basic metadata. The <code>.python-version</code> file specifies the version of Python used in the project.</p> <pre><code>project_app\n\u2502   .git\n\u2502   .gitignore\n\u2502   .python-version\n\u2502   main.py\n\u2502   pyproject.toml\n\u2502   README.md\n</code></pre>"},{"location":"Python/uv/#using-uv-in-an-existing-project","title":"Using uv in an Existing Project","text":"<p>To use <code>uv</code> in an existing project, ensure that a <code>pyproject.toml</code> file is not already present in the project directory.</p> <pre><code>uv init\n</code></pre> <p>Run the above command to create the standard file structure that <code>uv</code> provides in your existing project. This will create a new <code>pyproject.toml</code> file and other files as described above.</p>"},{"location":"Python/uv/#running-mainpy-using-uv","title":"Running main.py Using uv","text":"<p>Running <code>main.py</code> with <code>uv</code> creates a <code>.venv</code> folder and a <code>uv.lock</code> file. The script is executed using the Python interpreter from the virtual environment.</p> <pre><code>uv run main.py\n</code></pre> <p>The folder structure after running the above command will look like this:</p> <pre><code>\u2502   .venv\n\u2502   .git\n\u2502   .gitignore\n\u2502   .python-version\n\u2502   main.py\n\u2502   pyproject.toml\n\u2502   README.md\n\u2502   uv.lock\n</code></pre>"},{"location":"Python/uv/#adding-dependencies","title":"Adding Dependencies","text":"<p>Use the following command to add dependencies to your project. For example, to add the <code>requests</code> module:</p> <pre><code>uv add requests\n</code></pre> <p>This command also adds the module entry to the <code>pyproject.toml</code> file:</p> <pre><code>dependencies = [\n    \"requests&gt;=2.32.3\",\n]\n</code></pre>"},{"location":"Python/uv/#upgrading-dependencies","title":"Upgrading Dependencies","text":"<p>To upgrade an installed package in the project, use:</p> <pre><code>uv add --upgrade requests\n</code></pre>"},{"location":"Python/uv/#removing-dependencies","title":"Removing Dependencies","text":"<p>To remove the <code>requests</code> module from the project, use:</p> <pre><code>uv remove requests\n</code></pre>"},{"location":"Python/uv/#adding-development-dependencies","title":"Adding Development Dependencies","text":"<p>To add a development dependency (e.g., <code>black</code>) and update the <code>pyproject.toml</code> file accordingly:</p> <pre><code>uv add --dev black\n</code></pre>"},{"location":"Python/uv/#listing-dependencies","title":"Listing Dependencies","text":"<p>To list dependencies, you can use any of the following commands:</p> <pre><code>uv pip freeze\nuv pip list\nuv tree\n</code></pre>"},{"location":"blog/2025/02/08/my-first-blog-post/","title":"My first blog post","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque nec maximus ex. Sed consequat, nulla quis malesuada dapibus, elit metus vehicula erat, ut egestas tellus eros at risus. In hac habitasse platea dictumst. Phasellus id lacus pulvinar erat consequat pretium. Morbi malesuada arcu mauris Nam vel justo sem. Nam placerat purus non varius luctus. Integer pretium leo in sem rhoncus, quis gravida orci mollis. Proin id aliquam est. Vivamus in nunc ac metus tristique pellentesque. Suspendisse viverra urna in accumsan aliquet.</p>"},{"location":"blog/2023/10/12/a-second-post/","title":"A second post","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque nec maximus ex. Sed consequat, nulla quis malesuada dapibus, elit metus vehicula erat, ut egestas tellus eros at risus. In hac habitasse platea dictumst. Phasellus id lacus pulvinar erat consequat pretium. Morbi malesuada arcu mauris Nam vel justo sem. Nam placerat purus non varius luctus. Integer pretium leo in sem rhoncus, quis gravida orci mollis. Proin id aliquam est. Vivamus in nunc ac metus tristique pellentesque. Suspendisse viverra urna in accumsan aliquet.</p> <p>Donec volutpat, elit ac volutpat laoreet, turpis dolor semper nibh, et dictum massa ex pulvinar elit. Curabitur commodo sit amet dolor sed mattis. Etiam tempor odio eu nisi gravida cursus. Maecenas ante enim, fermentum sit amet molestie nec, mollis ac libero. Vivamus sagittis suscipit eros ut luctus.</p> <p>Nunc vehicula sagittis condimentum. Cras facilisis bibendum lorem et feugiat. In auctor accumsan ligula, at consectetur erat commodo quis. Morbi ac nunc pharetra, pellentesque risus in, consectetur urna. Nulla id enim facilisis arcu tincidunt pulvinar. Vestibulum laoreet risus scelerisque porta congue. In velit purus, dictum quis neque nec, molestie viverra risus. Nam pellentesque tellus id elit ultricies, vel finibus erat cursus.</p>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/category/daily-dos%C3%A9/","title":"daily-dos\u00e9","text":""}]}