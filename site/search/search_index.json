{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to JKDocs","text":"<p>If you are just starting your journey into Python programming or some tips and tricks to code in python you've come to the right place. This website is a comprehensive resource for learning Python.</p> <p>Discover insightful articles and practical examples and tips and tricks. So, what are you waiting for. Dive in..!!!</p>"},{"location":"GoogleITAutomatin/","title":"System Crashing","text":""},{"location":"GoogleITAutomatin/#check-the-health-of-ram","title":"Check the health of RAM","text":"<p><code>memtest 86</code> tool is run in boot instead of normal operating system.</p> <p>System crash log files are located in <code>/var/log</code> in linux and for windows we can look at the <code>Event Viewer</code> tool.</p> <p><code>strace</code> (system trace) can also be used in linux to find out which system call is made dering the crash to identify the root cause. </p>"},{"location":"GoogleITAutomatin/#configuration-management-cloud","title":"Configuration management Cloud","text":"<p>Configuration management is an Automation technique which let manage computers at a large scale.</p> <p><code>puppet</code> is current industry standard for config-management.</p>"},{"location":"GoogleITCourse/","title":"Interpreted languages:","text":"<ul> <li> <p>Python </p> </li> <li> <p>Ruby</p> </li> <li> <p>Javascript</p> </li> <li> <p>Bash</p> </li> <li> <p>Powershell</p> </li> </ul>"},{"location":"GoogleITCourse/#in-windows-system-python-file-can-be-run-without-adding-python-in-front-of-it","title":"In <code>Windows</code> system python file can be run without adding <code>python</code> in front of it.","text":"<p>Ex : File <code>chocolate.py</code> can be run as <code>chocolate.py</code> and <code>python chocolate.py</code></p>"},{"location":"GoogleITCourse/#__init__py-file-in-a-module","title":"__init__.py file in a module:","text":"<p>If you want python to consider a directory consisting of python files as a module, then you are required to create a <code>__init__.py</code> file inside the directory. This file can be empty, but the file need to be present in the directory.</p>"},{"location":"GoogleITCourse/#_1","title":"Interpreted languages:","text":""},{"location":"GoogleITCourse/#git","title":"Git","text":"<p>TO avoind entering username and password every time when you clone a repo or push the changes;</p> <ul> <li> <p>Generate SSH key pair and store the public in your profile</p> </li> <li> <p>use Credential helper</p> </li> </ul>"},{"location":"GoogleITCourse/#credential-helper","title":"credential helper","text":"<pre><code>git config --global credential.helper cache\n</code></pre> <p>After enabling <code>credential helper</code> , type the password one last time.</p>"},{"location":"PythonTricks/","title":"Python Tricks:","text":""},{"location":"PythonTricks/#unpacking-in-python","title":"Unpacking in python:","text":"<p>Unpacking in python is a process of extracting items from iterable ( list, tuple, set, string, dictionary )object and assigning it to variables.</p> <p>In the below example <code>a</code> ia an iterable and it is unpacked into variable and list.</p> <p><code>*</code> notation is used before a variable to unpack the iterable into a <code>list</code> </p> <pre><code># Tuple unpacking\ncoordinates = (3, 4)\nx, y = coordinates\nprint(\"x:\", x)  # Output: 3\nprint(\"y:\", y)  # Output: 4\n</code></pre> <pre><code>a = (1,2,3,4,5,6)\none, *rest, six = a\nprint(one, rest, six)\nprint(type(one), type(rest), type(six)) \n\n&gt;&gt; 1 [2, 3, 4, 5] 6\n&gt;&gt; &lt;class 'int'&gt; &lt;class 'list'&gt; &lt;class 'int'&gt;\n</code></pre> <pre><code># This can not be done\na = (1,2,3,4,5,6)\n*f = a\nprint(f)\n\n&gt;&gt;SyntaxError: Starred assignment target must be in a list or tuple\n</code></pre> <pre><code># This can be used to convert tuple to list\na = (1,2,3,4,5,6)\n[*f] = a\nprint(f)\n\n&gt;&gt;[1,2,3,4,5,6]\n</code></pre> <p>Unpacking in a function allows us to provide variable number of arguments to the funciton.</p> <pre><code># Unpacking in function arguments\ndef print_values(*args):\n    for value in args:\n        print(value)\n\nprint_values(1, 2, 3, 4, 5)\n# Output:\n# 1\n# 2\n# 3\n# 4\n# 5 \n</code></pre>"},{"location":"PythonTricks/#pop-method-on-lists","title":"pop() method on lists:","text":"<p><code>pop()</code> is used to pop all elemets out of the list. Once the elemets are poped out the list becomes empty. Printing the list now will print an empty list.</p> <pre><code>a = [1,2,3,4,5,6,7]\n\nwhile a:\n    print(a.pop(-1), end='', flush=True)\n\nprint(a) \n&gt;&gt;7654321[]\n</code></pre>"},{"location":"PythonTricks/#while-loop-in-one-line","title":"while() loop in one line:","text":"<p>A while loop can be specified in one line. Multiple line in the loop can be separated using <code>;</code> . Complex statements are not supported in one line though.</p> <pre><code>a = [1,2,3,4,5,6,7]\n\nwhile a: print(a.pop(-1), end='', flush=True); print(\" hello\")\n</code></pre>"},{"location":"PythonTricks/#docstrings-in-python","title":"docstrings in python:","text":"<p>There are fewdocstring formats that can be used to help docstring parsers and users to have a familiar and known format. </p> <ul> <li> <p>Google docstrings : supported by Sphynx</p> </li> <li> <p>reStructuredText: This is the official python documentation standard. Supported by sphynx</p> </li> <li> <p>Numpy/SciPy docstrings: Combination of Google and reStructuredText docstrings.</p> </li> </ul>"},{"location":"PythonTricks/#_1","title":"Python Tricks:","text":""},{"location":"PythonTricks/#if-else-ternary-operation","title":"if-else ternary operation:","text":"<pre><code>&lt;expression 1&gt; if &lt;condition&gt; else &lt;expression 2&gt;\n</code></pre> <p>Ex:</p> <pre><code>print(\"Pass\") if marks &gt;= 45 else print(\"Fail\")\n</code></pre>"},{"location":"PythonTricks/#importlib-standard-library","title":"<code>importlib</code> standard library:","text":"<p>This moduel provides the <code>import_module</code> function, which allows you to programmatically import a module.</p>"},{"location":"PythonTricks/#for-if-else-operation","title":"for-if-else operation:","text":""},{"location":"PythonTricks/#list-comprehension-and-generators-can-be-used-interchnagably-while-generators-are-more-memory-efficient-list-comprehensions-are-not","title":"<code>list comprehension</code> and <code>generators</code> can be used interchnagably. While generators are more memory efficient list comprehensions are not.","text":"<pre><code># using for and if list comprehension and generator\nfor_if = [i for i in range(1,10) if i&lt;6]\n&gt;&gt; [1, 2, 3, 4, 5]\n\n\n# using for, if and else in list comprihension and generators\nfor_if_else = [5 if i&lt;5 else 10 for i in range(1,20)]\n&gt;&gt;[5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n\n\n# general if, else syntax for ternary operation\nif_else = True if 3&lt;5 else False\n&gt;&gt;True\n</code></pre>"},{"location":"PythonTricks/#typeself_name_","title":"type(self)._name_:","text":"<p><code>print(tyep(self).__name__)</code>  is used to print the name of the class to which the instance <code>self</code> belongs to.</p>"},{"location":"PythonTricks/#single-and-double-underscore-in-variable-and-methodfunciton-names","title":"Single and double underscore in variable and method/funciton names:","text":"<p>Leading or trailing single underscore and double underscore has a significance in python. </p> Convention Example Meaning Leading single underscore <code>_variable</code> The variable is meant for internal use only. Considered as a private variable. Trailing single underscore <code>class_</code>, <code>float_</code> Built in keywords can be used as a variable/method names with this trick. Avoid conflict with the actual keyword. Leading double underscore <code>__attribute</code> In Python, name mangling is a technique used to make class attributes or methods private by prefixing their names with double underscore (__). When a name is mangled, Python internally modifies its name by appending _ClassName to make it harder to access directly from outside the class.\u00a0 \u00a0Ex: <code>_ClassName__attribute</code> Leading and trailing Double underscore <code>__init__</code> Special methods and attributes in python."},{"location":"PythonTricks/#diataxis","title":"Di\u00e1taxis:","text":"<p>A systematic approach to technical documentation authoring. This has a widespread adoption in the python community.</p>"},{"location":"PythonTricks/#keyword-listing","title":"keyword listing:","text":"<p>To list all the keywords use below code;</p> <pre><code>import keyword as _keyword \nprint(_keyword.kwlist) \n\n\n&gt;&gt;['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n</code></pre>"},{"location":"PythonTricks/#ellipsis","title":"Ellipsis","text":"<p>Ellipses (<code>...</code>) in Python are primarily used as a placeholder or a marker for incomplete code or to represent an undefined value.</p> <pre><code># Represents incomplete tuple\nmy_tuple = (1, 2, ...) \n\n# Function will be written in the later stage an currently kept empty\ndef my_function():\n    ...\n</code></pre>"},{"location":"PythonTricks/#integer-string-conversion-length-limitation","title":"Integer string conversion length limitation","text":"<p>The limit for string to integer conversion is 4300(upper threshold) 640 (lower threshold)</p> <pre><code>import sys\n\nprint(sys.int_info.default_max_str_digits)\nprint(sys.int_info.str_digits_check_threshold) \n\n&gt;&gt;&gt; 4300 \n&gt;&gt;&gt; 640\n</code></pre> <p>To modify this getters and setters are made available. ;</p> <pre><code>import sys\n\nprint(sys.get_int_max_str_digits()) #4300\nsys.set_int_max_str_digits() # used to set it to a desired value\n</code></pre>"},{"location":"PythonTricks/#_2","title":"Python Tricks:","text":""},{"location":"PythonTricks/#string-formatters","title":"string formatters","text":"Expr Meaning Example {:d} integer value \"{0:.0f}\".format(10.5) \u2192 '10' {:.2f} floating point with that many decimals '{:.2f}'.format(0.5) \u2192 '0.50' {:.2s} string with that many characters '{:.2s}'.format('Python') \u2192 'Py' {:&lt;6s} string aligned to the left that many spaces '{:&lt;6s}'.format('Py') \u2192 'Py\u00a0 \u00a0 ' {:&gt;6s} string aligned to the right that many spaces '{:&gt;6s}'.format('Py') \u2192 '\u00a0 \u00a0 Py' {:^6s} string centered in that many spaces '{:^6s}'.format('Py') \u2192 '\u00a0 Py\u00a0 '"},{"location":"PythonTricks/#queues","title":"Queues","text":"<p>FIFO</p> <p>Adding element to Queue is called <code>enqueue</code> </p> <p>Retriving element from Queue is called <code>dequeue</code></p>"},{"location":"PythonTricks/#stack","title":"Stack","text":"<p>LIFO</p>"},{"location":"PythonTricks/#dequedouble-ended-queue","title":"Deque(Double ended queue)","text":"<p>It combines and extends the idea behind the stack and a queue. Deque can work as FIFO or LIFO </p>"},{"location":"PythonTricks/#priority-queue","title":"Priority queue","text":""},{"location":"SocketsinPython/","title":"Sockets in Python:","text":"<p>The primary socket API functions and methods in this module are:</p> <ul> <li> <p><code>socket()</code></p> </li> <li> <p><code>bind()</code></p> </li> <li> <p><code>listen()</code></p> </li> <li> <p><code>accept()</code></p> </li> <li> <p><code>connect()</code></p> </li> <li> <p><code>connect_ex()</code></p> </li> <li> <p><code>send()</code></p> </li> <li> <p><code>recv()</code></p> </li> <li> <p><code>close()</code></p> </li> </ul> <pre><code>graph TD;\n    TCP--&gt;Transmission_Control_Protocol\n    Transmission_Control_Protocol--&gt;socket.SOCK_STREAM\n</code></pre> <pre><code>graph TD;\n    UDP--&gt;User_Datagram_Protocol\n    User_Datagram_Protocol--&gt;socket.SOCK_DGRAM\n</code></pre> <pre><code># Simple Server Example\nimport socket\n\nHOST = 'localhost'\nPORT = 65432\n\nwith socket.socket() as s:\n    s.bind((HOST, PORT))\n    s.listen()\n    sock_obj, address_info = s.accept()\n    with sock_obj:\n        print(f'connected by {address_info}')\n        while True:\n            data = sock_obj.recv(1024)\n            if not data:\n                break\n            else:\n                print(data)\n            sock_obj.send(data) \n</code></pre> <pre><code> # Simple Client Example\nimport socket\n\nHOST = '127.0.0.1'\nPORT = 65432\n\nwith socket.socket() as s:\n    s.connect((HOST, PORT))\n    s.send(b\"Hello World!\")\n    data = s.recv(1024)\n\nprint(data)\n</code></pre>"},{"location":"cmdTricks/","title":"Command Prompt Tricks","text":""},{"location":"cmdTricks/#_1","title":"Command Prompt Tricks","text":""},{"location":"cmdTricks/#open-cmd-as-an-administrator-and-run-below-command-to-open-environment-variable-window","title":"Open CMD as an Administrator and run below command to open Environment Variable window.","text":"<p><code>rundll32.exe sysdm.cpl,EditEnvironmentVariable</code></p>"},{"location":"cmdTricks/#control-command-opens-control-panel-window","title":"<code>control</code> command opens control panel window.","text":""},{"location":"cmdTricks/#wmiccommand-can-be-used-as-below-to-uninstall-programms-from-cmd","title":"<code>wmic</code>command can be used as below to uninstall programms from CMD","text":"<pre><code>Run \"wmic\" command\nRun \"product get name\" to list out the applicaitons.\nRun \"product where name='Python 3.9.13 Standard Library (64-bit)' call uninstall\" command\n</code></pre>"},{"location":"cmdTricks/#vs-code-erorr-in-power-shell-cannot-be-loaded-because-running-scripts-is-disabled-on-this-system","title":"VS-CODE erorr in Power shell : Cannot be loaded because running scripts is disabled on this system","text":"<p>Run the following command and confirm with \u2018Y\u2019 </p> <pre><code>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine\n</code></pre>"},{"location":"general/","title":"Must check Github Pages and sites","text":""},{"location":"general/#embedded-python","title":"Embedded Python","text":"<p>Must watch site for embedded and python enthusiasts.</p> <p>Embedded Python: Build a Game on the BBC micro:bit \u2013 Real Python</p>"},{"location":"general/#mark-text","title":"Mark Text","text":"<p>A simple and elegant open-source markdown editor available for Windows, XOS, Linux. My blogs are mostly created using Marktext Markdown editor.</p> <p>GitHub : MarkText </p>"},{"location":"general/#motrix","title":"Motrix","text":"<p>Motrix is a full-featured download manager that supports downloading HTTP, FTP,\u00a0BitTorrent,\u00a0Magnet, etc.</p> <p>GitHub : Motrix </p>"},{"location":"general/#x64dbg","title":"X64dbg","text":"<p>An open-source binary debugger for Windows, aimed at malware analysis and reverse engineering of executables you do not have the source code for.</p> <p>GitHub: X64dbg</p>"},{"location":"general/#notable","title":"Notable","text":"<p>The Markdown-based note-taking app that doesn't suck.</p> <p>Trust me this looks like the best notes taking app currently.</p> <p>GitHub : Notable </p>"},{"location":"general/#dockerlabs","title":"docker/labs","text":"<p>This repo contains Docker\u00a0labs and tutorials authored both by Docker, and by members of the community.</p> <p>GitHub : docker/labs</p>"},{"location":"general/#tldr-pages","title":"tldr-pages","text":"<p>The tldr-pages project is a collection of community-maintained help pages for command-line tools, that aims to be a simpler, more approachable complement to traditional man pages.</p> <p>GitHub : tldr-pages </p>"},{"location":"general/#awesome-python","title":"Awesome Python","text":"<p>A curated list of awesome Python frameworks, libraries, software and resources.</p> <p>GitHub : Awesome Python </p>"},{"location":"general/#the-algorithmspython","title":"The Algorithms/Python","text":"<p>All algorithms implemented in Python - for education</p> <p>GitHub : The Algorithms</p>"},{"location":"git/","title":"Getting Started","text":"<p>Git has three main states that your files can reside in\u00a0modified,\u00a0staged, and\u00a0committed.</p> <p>The most official build is available for download on the Git website. Just go to\u00a0Git - Downloading Package\u00a0and the download will start automatically. </p> <p>Note that this is a project called Git for Windows, which is separate from Git itself; for more information on it, go to\u00a0https://gitforwindows.org.</p>"},{"location":"git/#config","title":"Config","text":"<p>You can view all of your settings and where they are coming from using</p> <pre><code>git config --list --show-origin\n</code></pre> <p>To view only settings</p> <pre><code>git config --list\n</code></pre> <p>There are <code>--system</code> <code>--local</code> <code>--global</code> configurations in git. To list global settings/configurations and their origin</p> <pre><code>git --list --global --show-origin\n</code></pre>"},{"location":"git/#help","title":"Help","text":"<p>Use\u00a0<code>--help</code>\u00a0to get a full-blown man page</p> <p>Use\u00a0<code>-h</code>\u00a0to get a short refresher man page</p> <pre><code>git status --help \n</code></pre>"},{"location":"git/#_1","title":"Getting Started","text":""},{"location":"git/#git-basics","title":"Git Basics","text":""},{"location":"git/#turn-an-existing-directory-into-git-repository","title":"Turn an existing directory into Git repository","text":"<p>Run <code>git init</code> in that directory.</p> <pre><code>git init\n</code></pre>"},{"location":"git/#clone","title":"Clone","text":"<p>This is another way to have a git repository. To have a desired name for the repository to be cloned use below command.</p> <pre><code>git clone https://github.com/libgit2/libgit2 mylibgit\n</code></pre> <p>Here mylibgit is a desired name given to the cloned repo.</p> <p>Above example uses the\u00a0<code>https://</code>\u00a0protocol, but you may also see\u00a0<code>git://</code>\u00a0or\u00a0<code>user@server:path/to/repo.git</code>, which uses the SSH transfer protocol.</p>"},{"location":"git/#status","title":"status","text":"<pre><code>git status        # to check the status of the local repo\ngit status -s     # gives a short status\n</code></pre>"},{"location":"git/#add-and-commit","title":"add and commit","text":"<pre><code>git add &lt;file/folder names&gt; ....   # adds files/folders into staging area\ngit commit -m &lt;commit message&gt;     # uses the files in staging area to make a new commit.\n</code></pre> <p>Status, add and commit are the mostly used commands on daily basis in git.</p>"},{"location":"git/#diff","title":"diff","text":"<p>To see what you\u2019ve changed but not yet staged, type\u00a0<code>git diff</code>\u00a0with no other arguments. This command compares what is in your 'working directory' with what is in your 'staging area'.</p> <pre><code>git diff\n</code></pre> <p>If you want to see what you\u2019ve staged that will go into your next commit, you can use. This command compares your staged changes to your\u00a0last\u00a0commit.</p> <pre><code>git diff --staged\n</code></pre> <p>If you run\u00a0<code>git difftool</code>\u00a0instead of\u00a0<code>git diff</code>, you can\u00a0view any of these diffs in\u00a0software\u00a0like emerge, vimdiff and many more (including\u00a0commercial products). Run\u00a0<code>git difftool --tool-help</code>\u00a0to see what is available on your system.</p>"},{"location":"git/#to-skip-the-git-add-part-and-directly-commit-the-changes-use-git-commit-a-m-commit-message-adding-the-a-option-to-the-git-commit-command-makes-git-automatically-stage-every-file-that-is-already-tracked-before-doing-the-commit-letting-you-skip-the-git-add-part","title":"To skip the\u00a0<code>git add</code>\u00a0part and directly commit the changes use\u00a0<code>git commit -a -m \"&lt;commit message&gt;\"</code>. Adding the\u00a0<code>-a</code>\u00a0option to the\u00a0<code>git commit</code>\u00a0command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the\u00a0<code>git add</code>\u00a0part","text":""},{"location":"git/#removing-a-file","title":"Removing a file","text":"<pre><code>git rm &lt;file name&gt; ## to remove a file from git tracked local repo\ngit rm --cached &lt;filename&gt; ## to remove the file from staging area if the file was staged already\n</code></pre>"},{"location":"git/#rename-file","title":"Rename file","text":"<p>If you want to rename a file in Git, you can run something like</p> <pre><code>$ git mv file_from file_to\n</code></pre>"},{"location":"git/#log-commit-history","title":"Log / commit history","text":"<pre><code>git log\n\ngit log --patch ##shows the difference introduced in each commit.\ngit log --patch -2 ## to limit the results to latest 2 commits\n\ngit log --graph ## gives a good graphicla representaiton of branching.\n\ngit log --oneline ## prints a brief description of every commit.\n</code></pre> <pre><code>git log --since=2.weeks\n</code></pre> <p>This command works with lots of formats\u2009\u2014\u2009you can specify a specific date like\u00a0<code>\"2008-01-15\"</code>, or a relative date such as\u00a0<code>\"2 years 1 day 3 minutes ago\"</code>.</p> <pre><code>git log -- path/to/file\n</code></pre> <p>If you specify a directory or file name, you can limit the log output to commits that introduced a change to those files.</p> <pre><code>git log &lt;branch name&gt;  ## commit history of desired branch\n\nMuch useful one:\ngit log --oneline --graph --all  ## oneline commit history of all branchs and a nice graph representation \n</code></pre>"},{"location":"git/#amend","title":"amend","text":"<pre><code>git commit --amend -m &lt;commit message&gt;\n</code></pre> <p>The obvious value to amending commits is to make minor improvements to your last commit, without cluttering your repository history with commit messages of the form, \u201cOops, forgot to add a file\u201d or \u201cDarn, fixing a typo in last commit\u201d.</p>"},{"location":"git/#remote","title":"remote","text":"<pre><code>git remote -v ##To list all the remotes that you have.\n\ngit remote add mint https://github.com/wingardium/leviousa ## adds a remote called mint to the list of remotes\n\n\ngit remote update \n</code></pre>"},{"location":"git/#fetch","title":"fetch","text":"<pre><code>git fetch origin\ngit fetch mint ## fetches the changes that remote has and local doesnt have\n</code></pre>"},{"location":"git/#to-see-detials-about-remote","title":"To see detials about remote","text":"<pre><code>git remote show &lt;origin&gt;\n</code></pre>"},{"location":"git/#renaming-remote","title":"renaming remote","text":"<pre><code>git remote rename mint ginger ##rename remote `mint` to `ginger`\n</code></pre>"},{"location":"git/#remove-a-remote","title":"remove a remote","text":"<pre><code>git remote remove ginger  ## removes ginger remote.\n</code></pre>"},{"location":"git/#aliasing","title":"aliasing","text":"<pre><code>git config --global alias.co checkout\n</code></pre> <p>here\u00a0<code>checkout</code>\u00a0is aliased as co and you can use\u00a0<code>git co</code>\u00a0to run the commit command. This could be helpful to perform repeatative commands in a efficient way.</p>"},{"location":"git/#tagging","title":"Tagging","text":"<p>Tags represent specific points in a repository\u2019s history as being\u00a0important.</p> <pre><code>git tag [optional -l] ## lists the exisitng tags in the repository\n\n\ngit tag -a v1.0.0 -m \"&lt;message for tagging&gt;\" ## annotated tagging, consists of detailed info on a commit \ngit tag v1.0.0 ## light-weight tagging, only contains the cheksum of the commit\n</code></pre> <p>To tag a commit in the later point;</p> <pre><code>git tag -a v1.0.0 &lt;commit number&gt;\n</code></pre> <p>When pushing a commit to a remote repo the tags are not pushed. It has to be pushed explicitly.</p> <pre><code>git push origin &lt;tag-name&gt;\n</code></pre> <p>To delete a tag;</p> <pre><code># Both the commands below are necessary to completely remove a tag from repo.\n# first command removes it from local, while second from remote.\ngit tag -d &lt;tag-name&gt;\ngit push origin --delete &lt;tag-name&gt;\n</code></pre>"},{"location":"git/#git-graphical-interface","title":"Git graphical interface","text":"<p>When git is installed graphical visualisation tools like\u00a0<code>gitk</code>\u00a0and\u00a0<code>git-gui</code>\u00a0are also installed.</p> <p><code>gitk</code>\u00a0is a graphical history viewer. Can be used as a powerful version of the\u00a0<code>git log</code></p> <p><code>git-gui</code>, on the other hand, is primarily a tool for crafting commits.</p>"},{"location":"git/#pygit2","title":"pygit2","text":"<p>The bindings for Libgit2 in Python are called Pygit2, and can be found at\u00a0https://www.pygit2.org.</p>"},{"location":"git/#git-branching","title":"Git Branching","text":"<pre><code>git checkout &lt;branch name&gt; OR  git switch &lt;branch name&gt; ## to switch to an existing branch\n\n\ngit checkout -b &lt;branch name&gt; OR git switch -c &lt;branch name&gt; ## to create and checkout to the new branch.\n</code></pre>"},{"location":"git/#merge-a-branch","title":"Merge a branch","text":"<p>If you take a new branch to implement a new feature and create a lot of commits in that branch. You still can keep the commit history clean before merging to the master branch by using below command</p> <pre><code>git merge --sqaush &lt;branch name&gt;\n</code></pre> <p>If you want to use a graphical tool to resolve merge issues, you can run\u00a0<code>git mergetool</code>, which fires up an appropriate visual merge tool and walks you through the conflicts.</p> <pre><code>git mergetool --tool=&lt;tool&gt;\n</code></pre> <p>To see what branchs are merged/not merged to the current branch,</p> <pre><code>git branch --merged [optional branch name]\ngit branch --no-merged [optional branch name]\n</code></pre>"},{"location":"git/#list-branches-in-remote","title":"list branches in remote","text":"<pre><code>git branch -r\n</code></pre>"},{"location":"git/#rebasing","title":"Rebasing","text":"<p>With the\u00a0<code>rebase</code>\u00a0command, you can take all the changes that were committed on one branch and replay them on a different branch.</p>"},{"location":"git/#renaming-a-branch","title":"Renaming a branch","text":"<p>To change the branch name use\u00a0<code>--move</code>\u00a0flag in branch command. To change the name in remote too, push the changes to remote.</p> <pre><code>git branch --move &lt;oldt name&gt; &lt;new name&gt;\ngit push --set-upstream origin &lt;new name&gt;\n</code></pre> <p>After pushing the changed branch name to remote, it now has both the old branch and new branch. To delete the old branch from remote;</p> <pre><code>git push origin --delete &lt;old-branch-name&gt;\n</code></pre> <p>Ex; If the goal is to rename branch from <code>master</code> to <code>main</code> , run `git </p>"},{"location":"git/#git-plumbing-and-porceline","title":"Git Plumbing and Porceline","text":"<p>All the user friendly commands that we use like \u00a0<code>checkout</code>,\u00a0<code>branch</code>,\u00a0<code>remote</code>, and so on, are called \u201cporcelain\u201d commands.</p> <p>\"Plumbing\" commands are lower-level commands, because\u00a0they give you access to the inner workings of\u00a0Git.</p>"},{"location":"git/#git-tools","title":"Git Tools","text":""},{"location":"git/#git-interactive-staging","title":"Git interactive staging","text":"<p>If you run\u00a0<code>git add</code>\u00a0with the\u00a0<code>-i</code>\u00a0or\u00a0<code>--interactive</code>\u00a0option, Git enters an interactive shell mode for staging.</p>"},{"location":"git/#stash","title":"Stash","text":"<p>To save your half done work in order to swith to a different branch, use;</p> <pre><code>git stash\n</code></pre> <p>To see which stashes you\u2019ve stored, you can use;</p> <pre><code>git stash list\n</code></pre> <p>To apply the stash after you are back to the branch wiht half done work use below command. This will apply the latest stash available in the list.</p> <pre><code>git stash apply # apply latest stash\n\ngit stash apply stash@{3} # apply a specific stash with number 3 on the list.\n</code></pre>"},{"location":"git/#clean","title":"Clean","text":"<p>The better way to use <code>git clean</code> command is with <code>interactive</code> flag;</p> <pre><code>git clean -i -x\n</code></pre>"},{"location":"git/#grep","title":"grep","text":"<p>Git ships with a command called\u00a0<code>grep</code>\u00a0that allows you to easily search through any committed tree, the working directory, or even the index for a string or regular expression.</p> <p>In the below command git shows the line number where it has found the match.</p> <pre><code>git grep -n main # here main is the search string.\n</code></pre> <p>To show the search result in a summary use</p> <pre><code>git grep --count main # main is the searcch string\n</code></pre>"},{"location":"global/","title":"Using and creating global variables:","text":"<p>In Python, you\u2019ll typically define global variables at the\u00a0module level. Once you\u2019ve defined a global variable, you can use it from within the module itself or from within other modules in your code.</p> <p>Accessing a global variable works, but directly modifying a variable doesn\u2019t work. You can\u2019t directly modify a variable from a high-level scope like global in a lower-level scope like local.</p>"},{"location":"global/#unboundlocalerror","title":"UnboundLocalError:","text":"<p>In the below example, python first tries to find variables\u00a0<code>a</code>,\u00a0<code>b</code>,\u00a0<code>c</code>\u00a0inside the\u00a0<code>print_globas</code>\u00a0function. It doesn't find any of the variables inside the function, but it finds it outside the function in the global scope.</p> <pre><code>a = 10\nb = 20\nc = 30\n\ndef print_globals():\n    print(a, b, c) \n\n&gt;&gt; 10 20 30\n</code></pre> <p>In the below example, python first tries to find variables\u00a0<code>a</code>,\u00a0<code>b</code>,\u00a0<code>c</code>\u00a0inside the\u00a0<code>print_globas</code>\u00a0function and it finds\u00a0<code>c</code>\u00a0but the value\u00a0<code>100</code>\u00a0doesn't get assigned to it in the first line. So\u00a0<code>UnboundLocalError: cannot access local variable 'c' where it is not associated with a value</code>\u00a0error is seen on the terminal.</p> <p><code>c</code>\u00a0is both global and local variable in this function. Python gives priority to the local variable and shows error.</p> <pre><code>a = 10\nb = 20\nc = 30\n\ndef print_globals():\n    print(a, b, c) \n    c = 100\n</code></pre> <p>Below code resolves the UnboundLocalError exception by using\u00a0<code>global</code>\u00a0keyword.</p> <pre><code>a = 10\nb = 20\nc = 30\n\ndef print_globals():\n    global c\n    print(a, b, c)\n    c = 100\n    print(c)\n\nprint_globals()\nprint(a,b,c)\n\n&gt;&gt;&gt; 10 20 30\n&gt;&gt;&gt; 10 20 100\n&gt;&gt;&gt; 10 20 100\n</code></pre> <p>If you want to modify a global variable inside a function, then you need to explicitly tell Python to use the global variable rather than creating a new local one. To do this, you can use one of the following:</p> <ol> <li>The <code>global</code> keyword</li> <li>The built-in <code>globals()</code> function</li> <li>The <code>nonlocal</code> keyword</li> </ol>"},{"location":"global/#using-nonlocal-keyword","title":"Using <code>nonlocal</code> keyword:","text":"<p><code>nonlocal</code> keyword is similar to <code>global</code> keyword. Only, it is used to in case of nested funcitons where a outer scoped variable is made use inside a inner function. </p> <pre><code>    def trial():\n        a = 10\n        print(a)\n        def inner_func():\n            print(a)\n            a=100\n        inner_func()\n        print(a)\n\ntrial()\n&gt;&gt;&gt; UnboundLocalError\n</code></pre>"},{"location":"global/#fixing-unboundlocalerror-above","title":"Fixing UnboundLocalError above:","text":"<pre><code>    def trial():\n        a = 10\n        print(a)\n        def inner_func(): \n            nonlocal a \n            print(a)\n            a=100\n        inner_func()\n        print(a)\n\n\ntrial() \n&gt;&gt;&gt; 10\n&gt;&gt;&gt; 10\n&gt;&gt;&gt; 100\n\n</code></pre>"},{"location":"global/#globals-funciton","title":"globals() funciton:","text":"<p>This function comes in handy when you have local variables with the same name as your target global variables, and you still need to use the global variable inside the function:</p> <pre><code>&gt;&gt;&gt; a = 10\n&gt;&gt;&gt; b = 20\n&gt;&gt;&gt; c = 30\n\n&gt;&gt;&gt; def print_globals():\n...     print(a, b, globals()[\"c\"])\n...     c = 100\n...     print(c)\n...\n\n&gt;&gt;&gt; print_globals()\n10 20 30\n100\n\n&gt;&gt;&gt; c\n30\n</code></pre>"},{"location":"global/#best-practices","title":"Best practices:","text":"<ul> <li> <p>Use only constant as globals, which are not going to change within the script.</p> </li> <li> <p><code>python   USER = 'oia'   ID = '1234235356'</code></p> </li> <li> <p>Use a function that takes argument and modifieds it and returns it if you need a global kind of variable which needs to be modified.</p> </li> <li> <p>Create a class and use the calss attribute as a gobal variable throught the class.</p> </li> </ul>"},{"location":"logging/","title":"Logging in python","text":""},{"location":"logging/#introduction","title":"Introduction","text":"<pre><code>import logging\n</code></pre> <p>To use logging import logging in python file.</p> <pre><code>import logging\n\n\nlogging.basicConfig(filename='example.log', encoding='utf-8',\n                     level=logging.DEBUG, format='%(asctime)s : %(levelname)s : %(message)s',\n                       filemode='w', datefmt='%Y-%m-%d %I:%M:%S %p')\n\nlogging.debug('This message should go to the log file')\nlogging.info('So should this')\nlogging.warning('And this, too')\nlogging.error('And non-ASCII stuff, too, like \u00d8resund and Malm\u00f6')\n</code></pre> <p><code>logging.basicConfig</code> is used to log the messages in a file given in <code>filename</code> keyword argument.</p> <p><code>level=logging.DEBUG</code> logs all the messgaes given.</p> <pre><code>example.log\n\n2023-07-27 08:43:27 AM : DEBUG : This message should go to the log file\n2023-07-27 08:43:27 AM : INFO : So should this\n2023-07-27 08:43:27 AM : WARNING : And this, too\n2023-07-27 08:43:27 AM : ERROR : And non-ASCII stuff, too, like \u00d8resund and Malm\u00f6\n</code></pre> <p>if <code>level=logging.WARNING</code> only below messages are printed in the file.</p> <pre><code>example.log\n\n2023-07-27 08:43:27 AM : WARNING : And this, too\n2023-07-27 08:43:27 AM : ERROR : And non-ASCII stuff, too, like \u00d8resund and Malm\u00f6\n</code></pre> <p><code>format</code> is used to format the apperance of the message in the file.</p> <pre><code>DEBUG:root:This message should go to the log file\n\nINFO:root:So should this\n</code></pre> <p>with <code>format='%(asctime)s : %(levelname)s : %(message)</code></p> <pre><code>  2023-07-27 08:43:27 AM : DEBUG : This message should go to the log file\n  2023-07-27 08:43:27 AM : INFO : So should this\n</code></pre> <ul> <li>Default <code>filemode</code> is <code>r</code> . This keepes appending the messages to the file on each run of the project. <code>w</code> overwrites the file on each run of the projcet.</li> </ul>"},{"location":"logging/#advanced-logging","title":"Advanced Logging","text":"<p>Four catogoris of logging:</p> <ul> <li> <p>Loggers</p> </li> <li> <p>Handlers</p> </li> <li> <p>Filters</p> </li> <li> <p>Formatters</p> </li> </ul> <p>Its a god convention to use a module level logger in each module which uses logging</p> <pre><code>logger = logging.getLogger(__name__)\n</code></pre> <p>There can be two types of destination to which the logger can log the message:</p> <ul> <li> <p>Console</p> </li> <li> <p>File</p> </li> </ul>"},{"location":"logging/#loggers","title":"Loggers","text":"<p>Most common method of configuring loggers is to use </p> <pre><code>Loggers.setLevel()\nLoggers.addHandler() or Logger.removeHandler()\nLoggers.addFilter() or Logger.removeFilter()\n</code></pre>"},{"location":"logging/#handlers","title":"Handlers","text":"<p>Commonly used handlers are StreamHandlers and FileHandlers.</p>"},{"location":"logging/#_1","title":"Logging in python","text":""},{"location":"logging/#example-for-console-handler","title":"Example for console handler","text":"<p>Here it is important to set the logger level as a whole before setting the handler log level. </p> <pre><code>import logging\n\n# Create Logger\nlogger = logging.getLogger(__name__)\n\n# Set log level to the logger \nlogger.setLevel(logging.DEBUG)\n\n# create formatter\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n# Create console handler\ncons_hand = logging.StreamHandler()\ncons_hand.setLevel(logging.WARNING)\ncons_hand.setFormatter(formatter)\n\n# 'application' code\nlogger.debug('debug message')\nlogger.info('info message')\nlogger.warning('warn message')\nlogger.error('error message')\nlogger.critical('critical message')\n\nOUTPUT :\n2023-08-03 22:24:59,105 - __main__ - WARNING - warn message\n2023-08-03 22:24:59,106 - __main__ - ERROR - error message\n2023-08-03 22:24:59,106 - __main__ - CRITICAL - critical message\n</code></pre>"},{"location":"logging/#same-logging-can-be-achived-using-a-configuration-file","title":"Same logging can be achived using a configuration file:","text":"<pre><code>import logging\n\n# Create Logger\nlogger = logging.getLogger(__name__)\n\n# 'application' code\nlogger.debug('debug message')\nlogger.info('info message')\nlogger.warning('warn message')\nlogger.error('error message')\nlogger.critical('critical message')\n\nOUTPUT :\n2023-08-03 22:24:59,105 - __main__ - WARNING - warn message\n2023-08-03 22:24:59,106 - __main__ - ERROR - error message\n2023-08-03 22:24:59,106 - __main__ - CRITICAL - critical message\n</code></pre> <pre><code>[loggers]\nkeys=root,simpleExample\n\n[handlers]\nkeys=consoleHandler\n\n[formatters]\nkeys=simpleFormatter\n\n[logger_root]\nlevel=DEBUG\nhandlers=consoleHandler\n\n[logger_simpleExample]\nlevel=DEBUG\nhandlers=consoleHandler\nqualname=simpleExample\npropagate=0\n\n[handler_consoleHandler]\nclass=StreamHandler\nlevel=DEBUG\nformatter=simpleFormatter\nargs=(sys.stdout,)\n\n[formatter_simpleFormatter]\nformat=%(asctime)s - %(name)s - %(levelname)s - %(message)sl\n</code></pre>"},{"location":"pyinstaller/","title":"Pyinstaller","text":"<ul> <li> <p><code>pyinstaller</code>\u00a0is the main command to build a bundled application.</p> </li> <li> <p><code>pyi-makespec</code>\u00a0is used to create a spec file.</p> </li> <li> <p><code>pyi-archive_viewer</code>\u00a0is used to inspect a bundled application.</p> </li> <li> <p><code>pyi-bindepend</code>\u00a0is used to display dependencies of an executable.</p> </li> <li> <p><code>pyi-grab_version</code>\u00a0is used to extract a version resource from a Windows executable.</p> </li> <li> <p><code>pyi-set_version</code>\u00a0can be used to apply previously-extracted version resource to an existing Windows executable.</p> </li> </ul>"},{"location":"pyinstaller/#one-folder-bundle-is-faster-than-the-single-file-bundle","title":"One folder bundle is faster than the single file bundle.","text":""},{"location":"pyinstaller/#hiding-the-source-code","title":"Hiding the Source Code","text":"<p>The bundled app does not include any source code. However, PyInstaller bundles compiled Python scripts (<code>.pyc</code>\u00a0files). These could in principle be decompiled to reveal the logic of your code.</p> <p>If you want to hide your source code more thoroughly, one possible option is to compile some of your modules with\u00a0Cython. Using Cython you can convert Python modules into C and compile the C to machine language. PyInstaller can follow import statements that refer to Cython C object modules and bundle them.</p> <p><code>pyinstaller.exe</code> takes either the <code>.py</code> python file or the <code>.spec</code> file as a scriptname argument.</p>"},{"location":"pytest/","title":"How to manage logging:","text":""},{"location":"pytest/#a-basic-example","title":"A basic example:","text":"<pre><code>import logging\n\ndef  test_apple():\n    logging.debug(\"LEET Debug message\")\n    logging.info(\"LEET info message\")\n    logging.warning(\"LEET warning message\")\n    logging.error(\"LEET error message\")\n    print(\"this is a print statement\")\n</code></pre> <p>Running the above code using <code>pytest</code> is not goig to show any logging messages or the print statement on the console nor a log file is given as an output.</p> <p>Using <code>pytest --capture=no</code> to run the test is going to print only the <code>print</code> statements on the console. Here <code>this is a print statement</code> prints on the console and all the logging messages are negelted.</p>"},{"location":"pytest/#print-logging-statements-to-console","title":"Print logging statements to console:","text":"<p>To print the logging messages too to the console it is advisable to write a pytest configuration file with logging configurations in it and use <code>caplog</code> fixture to the test.</p> <pre><code>pytest.ini file\n\n\n[pytest]\nlog_format = %(asctime)s %(levelname)s %(message)s\nlog_date_format = %Y-%m-%d %H:%M:%S\nlog_level=DEBUG\n</code></pre> <pre><code>import logging\n\ndef  test_apple(caplog):\n    logging.debug(\"LEET Debug message\")\n    logging.info(\"LEET info message\")\n    logging.warning(\"LEET warning message\")\n    logging.error(\"LEET error message\")\n    print(\"this is a print statement\")\n    print(caplog.text)\n</code></pre> <p>OUTPUT:</p> <pre><code>test_leet.py this is a print statement\n2023-08-07 07:33:20 DEBUG LEET Debug message\n2023-08-07 07:33:20 INFO LEET info message\n2023-08-07 07:33:20 WARNING LEET warning message\n2023-08-07 07:33:20 ERROR LEET error message\n</code></pre>"},{"location":"pytest/#_1","title":"How to manage logging:","text":""},{"location":"pytest/#print-logging-messages-in-a-log-file","title":"Print logging messages in a log file:","text":"<p>Below configurations can be made in <code>pytest.ini</code> file to log logging messages in a file.</p> <p>No <code>caplog</code> fixture to be used.</p> <pre><code>import logging\n\ndef  test_apple():\n    logging.debug(\"LEET Debug message\")\n    logging.info(\"LEET info message\")\n    logging.warning(\"LEET warning message\")\n    logging.error(\"LEET error message\")\n    print(\"this is a print statement\")\n</code></pre> <pre><code>pytest.ini file\n\n[pytest]\nlog_file=log\\logging.log\nlog_file_level=DEBUG\nlog_file_format=%(asctime)s %(levelname)s %(message)s\nlogfile_date_format=%Y-%m-%d %H:%M:%S\nlog_auto_indent=true\n</code></pre> <p>in /log/logging.log</p> <pre><code>07:39:08 DEBUG LEET Debug message\n07:39:08 INFO LEET info message\n07:39:08 WARNING LEET warning message\n07:39:08 ERROR LEET error message\n</code></pre> <p>NOTE : print statements are not printed</p>"},{"location":"pytest/#print-logging-and-print-statements-to-console-and-log-file","title":"Print <code>logging</code> and <code>print</code> statements to console and log file:","text":"<pre><code>[pytest]\nlog_format = %(asctime)s %(levelname)s %(message)s\nlog_date_format = %Y-%m-%d %H:%M:%S\nlog_level=DEBUG\nlog_file=log\\logging.log\nlog_file_level=DEBUG\nlog_file_format=%(asctime)s %(levelname)s %(message)s\nlogfile_date_format=%Y-%m-%d %H:%M:%S\nlog_auto_indent=true\n</code></pre> <p>Run <code>pytest --capture=no</code> </p>"},{"location":"pytest/#handling-test-failures","title":"Handling test failures:","text":"<pre><code>pytest -x # stop after first failure\npytest -x --pdb #jump to pdb after first failure\n\npytest --max-fail=3 # stop after 3 failures\npytest --max-fail=3 --pdb #jump to pdb all the 3 failures.\n\n\npytest --pdb #jumps to pdb on every failure\npytest --trace # jumps to pdb from the beginning of the test\n</code></pre>"},{"location":"pytest/#two-ways-to-add-breakpoint","title":"Two ways to add breakpoint:","text":"<pre><code>#pythons built in breakpoint() method\nbreakpoint()\n\n\n#importing pdb module\nimport pdb\npdb.set_trace() ''' add this line where-ever \nexecutions needs to jump to pdb'''\n</code></pre>"},{"location":"pytest/#managing-pytest-output","title":"Managing pytest output:","text":"<p><code>pytest --tb</code> is helpful to log a detailed or rather short traceback when a test fails.</p> <pre><code>pytest --tb=mode #Traceback print mode (auto/long/short/line/native/no)\n</code></pre> <p><code>pytest --full-trace</code> is going to log a whole trace traverced by the test when it falis.</p> <p>great way to understand the flow of the test script.</p> <p><code>pytest -v</code> increases verbosity of logging </p> <p><code>pytest -vv</code> increases verbosity to two folds.</p>"},{"location":"pytest/#creating-junit-format-output-files","title":"Creating JUnit format output files:","text":"<p><code>pytest --junitxml=log.xml</code>  will create a log file <code>log.xml</code> with the standard log details in it.</p> <p><code>pytest --full-trace --junitxml.log.xml</code> is an efficient way to analyse code in depth when a test fails.</p>"},{"location":"pytest/#the-best-feature-of-pytest-is-pastebin","title":"The best feature of pytest is <code>pastebin</code>","text":"<p><code>--pastebin=mode</code>       Send failed|all info to bpaste.net pastebin service.</p> <p>sending all or failed mode to pastebin service creates an instant URL which contains the whole test session log details.</p> <p>This URL can be used to share the log results with other collaborators.</p>"},{"location":"pytest/#temporary-directories-and-files-in-pytest","title":"Temporary Directories and files in pytest:","text":"<pre><code># from pytest import TempPathFactory\nimport os\n\ndef test_kill(tmp_path):\n    print(tmp_path)\n    with open(tmp_path/\"hello.txt\", 'x') as fp:\n        fp.write(\"hello this is Dustin\")\n\n    assert os.path.exists(tmp_path)\n\ndef test_groot(tmp_path_factory):\n    fp = tmp_path_factory.mktemp(\"Dustin\") / \"waste.txt\"\n    with fp.open('x') as fl:\n        fl.write(\"Dustin\")\n</code></pre> <p>By running <code>pytest --basetemp=TEMP</code> creates a base temp directory in the project directory itself and below folder structure is created.</p> <pre><code>C:.\n\u251c\u2500\u2500\u2500jeevan0\n\u2502       waste.txt\n\u2502\n\u2514\u2500\u2500\u2500test_kill0\n        hello.txt\n</code></pre>"},{"location":"pytest/#linting-the-pytest-scripts","title":"Linting the pytest scripts:","text":"<pre><code>pip install flake8-pytest-style\n</code></pre> <p><code>flake8-pytest-style</code> is a \u00a0<code>flake8</code>\u00a0plugin checking common style issues or inconsistencies with\u00a0<code>pytest</code>-based tests. Could be a helpful tool.</p>"},{"location":"pytest/#changing-standard-test-discovery","title":"Changing standard test discovery:","text":"<p><code>--ignore=path</code> ignores the test present in the folder path given. path can also be a specific python test file to igonre.</p> <p><code>--ignore-glob='*_01.p_'</code>  will ignore all the files which ends with glob pattern given.</p> <p>pytest discovers tests by recursively searching the directory passed as an argument or current directory if no path is sent as an argument.</p> <p><code>pytest src/temp/</code>  or <code>pytest</code></p> <p>If, <code>norecursedirs</code> option is set in pytest.ini file then the it tells pytest not to recurse into these directories to find test files.</p> <pre><code>[pytest]\nnorecursedirs = .env tmp*\n</code></pre> <p>This will not find test files in tmp prefixed dirs and .env dir.</p>"},{"location":"pytest/#to-change-the-test-file-discovery-pattern-from-test_py-and-_testpy-to-some-other-pattern","title":"To change the test file discovery pattern from test_.py and _test.py to some other pattern.","text":"<pre><code>[pytest]\npython_files= groot_*.py\npython_classes=Groot\npython_functions=groot_*\n</code></pre> <p>The other way to ignore the test files or folder in pytest is to provide the file of folder name in a standard list in pytest in conftest.py file</p> <p><code>collect_ignore</code> and <code>collect_ignore_glob</code></p>"},{"location":"pytest/#fixtures","title":"Fixtures:","text":"<p><code>capsys</code> and <code>capsysbinary</code> are the built-in fixtures to capture the text in <code>sys.stdout</code> and <code>sys.stderr</code> </p> <pre><code>def test_output(capsys):\n    print(\"hello\")\n    captured = capsys.readouterr()\n    assert captured.out == \"hello\\n\" \n    assert captured.out == b\"hello\\n\" # for capsysbinary\n</code></pre> <p><code>capfd</code> and <code>capfdbinary</code> are the built-in fixtures used to capture the text from file descriptors <code>1</code> and <code>2</code> </p> <pre><code>where python 1&gt;NUL //1 captures the output from terminal and directs it to NUL\nwhere tycon 2&gt;NUL //2 captures the error from the terminal and directs it to NUL\n</code></pre> <pre><code>def test_system_echo(capfd):\n    os.system('echo \"hello\"')\n    captured = capfd.readouterr()\n    assert captured.out == \"hello\\n\"\n</code></pre>"},{"location":"pytest/#the-readouterr-method-in-capsys-capsysbinary-capfd-capfdbinary-returns-outerr-which-is-a-tuple","title":"The <code>readouterr()</code> method in <code>capsys, capsysbinary, capfd, capfdbinary</code> returns <code>(out,err)</code> which is a tuple.","text":""},{"location":"pythonBuiltIns/","title":"Built-ins in Python","text":""},{"location":"pythonBuiltIns/#abs","title":"abs()","text":"<p>Gives the magnitude of a number.</p> <pre><code>a = complex(45,56)\nb = -67\nprint(abs(a))\nprint(abs(b))\n\n\n&gt;&gt;71.84010022264724\n&gt;&gt;67\n</code></pre>"},{"location":"pythonBuiltIns/#anyiterable-and-alliterable","title":"any(iterable) and all(iterable)","text":"<p><code>any()</code>\u00a0and\u00a0<code>all()</code>\u00a0accepts an iterables.</p> <p><code>any()</code>\u00a0returns\u00a0<code>True</code>\u00a0if any on of the elements of the iterator is non-zero.</p> <pre><code>lst = [1,3,5,7,9,0]\nprint(all(lst)) # False\nlst = [0,0,0,0,0]\nprint(any(lst)) # Flase\n</code></pre>"},{"location":"pythonBuiltIns/#breakpoint","title":"breakpoint()","text":"<p>the <code>breakpoint()</code> function is used for debugging purposes. It calls the built-in debugger (usually the Python debugger, <code>pdb</code>) to allow you to interactively debug your code.</p> <p>The <code>breakpoint()</code> function can accept positional arguments (<code>*args</code>) and keyword arguments (<code>**kws</code>). These arguments are passed directly to the debugger, allowing you to customize the debugging session.</p> <pre><code># Example using breakpoint() with arguments\ndef my_function():\n    x = 10\n    y = 20\n    breakpoint(x, y, z=30)\n\nmy_function()\n</code></pre>"},{"location":"pythonBuiltIns/#callableobject","title":"callable(object)","text":"<ul> <li>Note that classes are callable (calling a class returns a new instance); instances are callable if their class has a\u00a0<code>__call__</code>\u00a0method in it.</li> </ul> <pre><code>class trial:\n    def __init__(self, name) -&gt; None:\n        self.name = name\n\n    def __call__(self, *args , **kwds):\n        print(f\"the name is {self.name}\")\n\nboy = trial('kevin')\nprint(callable(boy))\nboy()\n'''This prints True if the __call__ definition is uncommentedAnd prints false if commented'''\n\n&gt;&gt; True\n&gt;&gt; the name is kevin\n</code></pre>"},{"location":"pythonBuiltIns/#classmethod","title":"@classmethod","text":"<p>Normally a method in classes are instance methods, as it receives instance as an implicit first argument.</p> <p><code>@classmethod</code>\u00a0converts an instance method into a classmethod, which receives class as a first argument.</p> <p>A class method can be called either on the class (such as\u00a0<code>C.f()</code>) or on an instance (such as\u00a0<code>C().f()</code>)</p> <p>In the below example if\u00a0<code>get_INI_value</code>\u00a0is just an instance method, it must be called as\u00a0<code>ParserINI().get_INI_value(section, option)</code></p> <p>Since it is a class method it can be called as\u00a0<code>ParserINI.get_INI_value()</code></p> <pre><code>class ParseINI:\n    config = ConfigParser()\n    config.read(\"configuration.ini\")\n\n    @classmethod\n    def get_INI_value(self, section: str, option: str) -&gt; str:\n        return self.config.get(section, option)\n</code></pre>"},{"location":"pythonBuiltIns/#compile","title":"compile()","text":"<p>used to compile a source code string into a executable code.</p> <pre><code>source = '''import osprint(os.__dir__())'''\n\nexecutable = compile(source, '&lt;string&gt;', 'exec')\nexec(executable)\n</code></pre> <p>Real world usage of this is in Scripting engins, making a custom Domain-specific language, Runtime code Evaluation, Code generator tools, code evaluation tools.</p>"},{"location":"pythonBuiltIns/#enumerateiterable","title":"enumerate(iterable)","text":"<pre><code>l = [1,5,9,5,2,0,12,56,78,34]\n\nfor index,value in enumerate(l):\n    print(f\"{index} : {value}\\t\")\n\noutput: \n0 : 1\n1 : 5\n2 : 9 \n...\n\n'''below is the output if enumerate(l, 7) is given second argument defines the start value of the indexing'''\noutput: \n7 : 1\n8 : 5\n9 : 9\n...\n</code></pre>"},{"location":"pythonBuiltIns/#map-and-fileter","title":"map() and fileter()","text":""},{"location":"pythonBuiltIns/#mapfunction-iterable","title":"map(function, iterable)","text":"<p>map() function takes a function and a list. It computes the function for each element of the list.</p> <pre><code>cube = lambda n : n*n*n\nl = [7,3,6,1,2,9]\nprint(list(map(cube, l))) # [343, 27, 216, 1, 8, 729]\n</code></pre>"},{"location":"pythonBuiltIns/#filter-function-iterable","title":"filter(\u00a0function, iterable)","text":"<p>Filters the elements of an iterable based on the function passed to it.</p> <pre><code>l = [1,5,9,5,2,0,12,56,78,34]\n\ndef even(n):\n    if n%2 == 0:\n        return n\n\nprint(list(filter(even, l)))\n</code></pre>"},{"location":"pythonBuiltIns/#locals-and-globals-funciton-in-python","title":"locals() and globals() funciton in python","text":"<p><code>locals()</code>\u00a0is a built-in function in python that is used to obtain the dictionary of current local symbol table.</p> <pre><code>print(locals())\n\n\n{'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': &lt;_frozen_importlib_external.SourceFileLoader object at 0x0000022FC686C700&gt;, '__spec__': None, '__annotations__': {}, '__builtins__': &lt;module 'builtins' (built-in)&gt;, '__file__': 'c:\\\\Users\\\\JEEKUMA\\\\Desktop\\\\BLOB\\\\water.py', '__cached__': None}\n</code></pre> <p>Example code to demonstrate\u00a0<code>locals()</code>\u00a0function:</p> <p>The\u00a0<code>locals()</code>\u00a0funciton call from the outside of the function\u00a0<code>func()</code>\u00a0prints all the general local variables in python.</p> <p><code>locals()</code>\u00a0call from the inside of the\u00a0<code>func()</code>\u00a0function prints only the local variables defined inside that funciton.</p> <pre><code>a = 10\nb = 20\n\ndef func():\n    x = 30\n    y = 40\n    print(locals())\n\nprint(locals())\nfunc() \n\n\n&gt;&gt;{'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': &lt;_frozen_importlib_external.SourceFileLoader object at 0x0000023AA031C700&gt;, '__spec__': None, '__annotations__': {}, '__builtins__': &lt;module 'builtins' (built-in)&gt;, '__file__': 'c:\\\\Users\\\\JEEKUMA\\\\Desktop\\\\BLOB\\\\water.py', '__cached__': None, 'a': 10, 'b': 20, 'func': &lt;function func at 0x0000023AA0253E20&gt;}\n&gt;&gt;{'x': 30, 'y': 40}\n</code></pre> <p><code>globals()</code>\u00a0is a built-in function in python that is used to obtain the dictionary of global symbol table. Similar to\u00a0<code>locals()</code>\u00a0,\u00a0<code>globals()</code>\u00a0is used to obtain respective scope variable.</p> <pre><code>print(globals())\n\n\n{'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': &lt;_frozen_importlib_external.SourceFileLoader object at 0x0000022FC686C700&gt;, '__spec__': None, '__annotations__': {}, '__builtins__': &lt;module 'builtins' (built-in)&gt;, '__file__': 'c:\\\\Users\\\\JEEKUMA\\\\Desktop\\\\BLOB\\\\water.py', '__cached__': None}\n</code></pre>"},{"location":"pythonBuiltIns/#zipiterable","title":"zip(*iterable)","text":"<p>Iterate over several iterables in parallel, producing tuples with an item from each one.</p> <pre><code>for item in zip([1, 2, 3], ['sugar', 'spice', 'everything nice']):\n    print(item)\n\n&gt;&gt;(1, 'sugar')\n&gt;&gt;(2, 'spice')\n&gt;&gt;(3, 'everything nice')\n</code></pre> <p><code>zip()</code>\u00a0stops when the shortest iterable is exhausted.</p> <p>Below exmple shows how to zip and unzip.</p> <pre><code>x = [1,2,3,4,5]\ny = [6,7,8,9,10]\nzip_object = zip(x,y)\nprint(list(zip_object)) # after zipping two interables\n\n\np, q = zip(*zip(x,y)) # this is a way to unzip zipped iterables\nprint(list(p))\nprint(list(q))\n</code></pre>"},{"location":"pythonBuiltIns/#super","title":"super()","text":"<pre><code>class Student:\n    def __init__(self, name) -&gt; None:\n        self.student_name = name\n\nclass Marks(Student):\n    def __init__(self, name, marks) -&gt; None:\n        Student.__init__(self,name)\n        self.marks = marks\n\ns1 = Marks('farzi', 10)\nprint(s1.__dict__)\n\n\n\n'''the above code can be written using super class as below''\n\nclass Student:\n    def __init__(self, name) -&gt; None:\n        self.student_name = name\n\nclass Marks(Student):\n    def __init__(self, name, marks) -&gt; None:\n        super().__init__(name)\n        self.marks = marks\n\ns1 = Marks('farzi', 10)\nprint(s1.__dict__)\n</code></pre>"},{"location":"pythonBuiltIns/#slicestart-stop-step-method-in-python","title":"slice(start, stop [,step]) method in python","text":"<p>slice method is an alternate way of using\u00a0list[start:stop:step]\u00a0in python.</p> <pre><code>l = [1,6,3,2,8,6,89,23,5,25,76,87,42,61,90,22,13,45,78,65]\nprint(l)\n#[1,6,3,2,8,6,89,23,5,25,76,87,42,61,90,22,13,45,78,65]\n\nprint(l[0::2]) # one way of list slicing method.\n#1, 3, 8, 89, 5, 76, 42, 90, 13, 78]\n\nprint(l[slice(0,len(l),2)]) # alternate way of slicing\n#1, 3, 8, 89, 5, 76, 42, 90, 13, 78]\n</code></pre>"},{"location":"pythonBuiltIns/#__call__","title":"<code>__call__()</code>","text":"<p><code>__call__()</code>\u00a0funtion is practically used to make a class as a decorator and a class instance to be used as a function.</p> <pre><code>class trial:\n    def __init__(self, name) -&gt; None:\n        self.name = name\n\n    def __call__(self, *args: Any, **kwds: Any) -&gt; Any:\n        print(f\"the name is {self.name}\")\n\nboy = trial('kevin')\nboy() # object of the class trial called as a function.\n</code></pre>"},{"location":"pythonBuiltIns/#string-methods","title":"String Methods","text":"<pre><code>'''strings are immutable and can not be changed once it is assignedto a variable. But string methods on the other hand can be usedto create a new string with the existing one.'''\n\n\na=\"!!starwar!!\"\na.upper() # outputs a upper case version of the string\na.lower() # outputs a lower case version of the string\na.rstrip() # this method strips the occurance of the given \n#charachter at the end of the string. -&gt; !!starwar\na.strip() # strips the given char from both the sides -&gt; starwar\na.replace('war', 'jar') # replaces all occurance of `war` with `jar`\n# -&gt; !!starjar!!\n</code></pre> <pre><code>b= \"avenger.com\"\nb.split('.') # gives ['avenger', 'com']\nb.capitalize() # gives Avenger.com  It converts first char to capital\nb.count('com') # counts the occurrance of `com` in this string. -&gt; 1\nb.endswith('m') # returns a boolean if the string ends with m -&gt; True\n</code></pre> <pre><code>'''Both the below methods work the same way but when a given stringis not found find() return -1, index() returns an exception.'''\n\n\nc = \"Spiderman is an avenger\"\nc.find('is') # returns the index of the first occurance of `is`\nc.find('was') # returns -1 otherwise\n\nc.index('is') # returns the index of the first occurrance of `is`\nc.index('lwhoeu') # gives and exception saying ValueError\n</code></pre> <pre><code>isalnum(), isalpha(), islower()\nswapcase() # swaps teh case of the given string\ntitle() # converts the given strings case in to title case.\n</code></pre>"},{"location":"pythonBuiltIns/#list-methods","title":"List Methods","text":"<p>To initialize a list with an initial size we can do :</p> <pre><code>l = [None] * 5\n'''Here the length of the list is 5 and all the 5 elemets if the listis assigned with None'''\n</code></pre> <p>List is a mutable type. Any list methods used on a list will affect the original list.</p> <pre><code>a = [3,8,2,9,7,5,1,23,54]\na.append(4) #[3, 8, 2, 9, 7, 5, 1, 23, 54, 4]\na.sort() #[1, 2, 3, 4, 5, 7, 8, 9, 23, 54]\na.sort(reverse=True) #[54, 23, 9, 8, 7, 5, 4, 3, 2, 1]\n\na = [3,8,2,9,7,5,1,23,54]\na.reverse() #[54, 23, 1, 5, 7, 9, 2, 8, 3]\nprint(a.index(7)) # prints 4 as index of 7 in reversed list is 4\nprint(a.count(3)) # prints numer of occurrance of 3 in the list\n\n'''Here Changing an element of b changed the element of a. b is a reference of a '''\na = [3,8,2,9,7,5,1,23,54]\nb=a # assigning like this is not a best practice.\nb[0]=0\nprint(a) #[0, 8, 2, 9, 7, 5, 1, 23, 54]\n\na = [3,8,2,9,7,5,1,23,54]\nb=a.copy() # this is best practice as, any changes made in b remains in b.\nb[0]=0\nprint(a)#[3, 8, 2, 9, 7, 5, 1, 23, 54]\n\na = [3,8,2,9,7,5,1,23,54]\na.insert(4,100)\nprint(a) #[3, 8, 2, 9, 100, 7, 5, 1, 23, 54]\n</code></pre>"},{"location":"pythonBuiltIns/#f-strings-in-python","title":"f-strings in python","text":"<pre><code>spacecraft = 'voyager'\nyear = '1977'\nprint(f\"{spacecraft} is a fly by satellite launched in {year}\") \n#voyager is a fly by satellite launched in 1977\n\n# if a curly bracket is also needed in the string\nprint(f\"{spacecraft} is a fly by satellite launched in {year} \nweighs {{Nothing}}\")\n# voyager is a fly by satellite launched in 1977 weighs {Nothing}\n</code></pre>"},{"location":"pythonBuiltIns/#try-except-finally","title":"try-except-finally","text":"<p>In try-except-finally, a peice of code is tried. If exception occurs it can be caught in the except block.\u00a0Finally block always get executed no matter what.</p> <pre><code>'''demo of finally'''\ndef pool():\n    try:\n        something\n        return return_value\n    except:\n        error handling\n        return return_value\n    finally:\n        final wrap up lines\n\n'''Here even after the try or except block hits the return statementfinally gets executed. This is teh speciality of finaly block'''\n</code></pre>"},{"location":"pythonBuiltIns/#if-else-in-single-line-statement","title":"if-else in single line statement:","text":"<pre><code>print(\"4 greater than 2\") if 4&gt;2 else print(\"5 greater than 3 \") if 5&gt;3 else print(\"nothing\")\n</code></pre>"},{"location":"pythonBuiltIns/#file-handling","title":"File handling","text":"<pre><code>with open(\"file.txt\", \"r\") as f:\n    print(f.read(), \"\\n\", type(f)) # reads entire file till EOF\n    print(f.tell()) # gives current position of the pointer. -&gt; 766\n    f.seek(0) # seek to a required position in a file. Here file pointer\n    # seeks the 0th char and points to it -&gt; points to G here\n    print(f.tell()) # current position of pointer -&gt; 0\n    print(f.read(5)) # read 5 bytes from the current pointer position -&gt; Galax\n\nwith open(\"file.txt\", '+a') as f:    \n    f.truncate(300) # truncates the file contant into 300 bytes\n\n'''now reading the file would contain only 300 char'''\n</code></pre>"},{"location":"pythonBuiltIns/#decorators","title":"Decorators","text":"<p>Decorators take function as an argument and modify it and return a new function. Here raptor is a decorator that takes a function as an argument adds print statements at the beginning and end and returns a new functoin\u00a0endo()</p> <pre><code>def raptor(func):\n    def endo(*args):\n        print(\"hello form the decorator\")\n        func(*args)\n        print(\"Bye!! from Decorator\")\n    return endo\n\n@raptor\ndef avrage(a,b,c):\n    print(\"average is :\")\n    print((a+b+c)/3)\n\nif __name__ == \"__main__\":\n    avrage(8,1,6)\n\n\noutput : hello form the decorator\naverage is :\n5.0\nBye!! from Decorator\n</code></pre> <p>Below is a good boilerplate template for decorators in python that can be used to build more complex decorators.</p> <pre><code>def decorator(func):\n    def wrapper_decorator(*args, **kwargs):\n        # Do something before\n        value = func(*args, **kwargs)\n        # Do something after\n        return value\n    return wrapper_decorator\n</code></pre>"},{"location":"pythonBuiltIns/#asterisk-and-as-arguments-to-function","title":"Asterisk * and / as arguments to function","text":"<p>When you see an asterisk (*) in the funciton parameter list, it typically indicates that all the parameters following it are keyword-only arguments.</p> <pre><code>def fixture(  # noqa: F811\n    fixture_function: Optional[FixtureFunction] = None,\n    *,\n    scope: \"Union[_ScopeName, Callable[[str, Config], _ScopeName]]\" = \"function\",\n    params: Optional[Iterable[object]] = None,\n    autouse: bool = False,\n    ids: Optional[\n        Union[Sequence[Optional[object]], Callable[[Any], Optional[object]]]\n    ] = None,\n    name: Optional[str] = None,\n) -&gt; Union[FixtureFunctionMarker, FixtureFunction]:\n</code></pre>"},{"location":"pythonBuiltIns/#s-in-python","title":"%s in python","text":"<p>A string can be formed using below line where\u00a0<code>filename</code>\u00a0nad\u00a0<code>line</code>\u00a0are the strings that are printed in the place of\u00a0<code>%s</code></p> <pre><code>print(\"Bad line in config-file %s:\\n%s\" % (filename,line))\n</code></pre> <p>A plain string can be formed as below:</p> <pre><code>default_cfg = \"turtle_%s.cfg\" % cfgdict1[\"importconfig\"]\n</code></pre>"},{"location":"pythonBuiltIns/#reversed-and-reverse","title":"reversed() and reverse()","text":"<p><code>reverse()</code>\u00a0is used on the list and it modifies the original list into reversed list.</p> <p>On the other hand\u00a0<code>reversed()</code>\u00a0is a builtin funciton in python that reverses the original list and\u00a0provids a new list. The original list remains unchanged.</p> <pre><code>lst_ = [1,2,3,4,5,6,7,8,9,0]\n\nlst_.reverse()\nprint(lst_) \n&gt;&gt; [0, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nprint(list(reversed(lst_))) \n&gt;&gt; [0, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n</code></pre>"},{"location":"pythonBuiltIns/#sorted-and-sort","title":"Sorted() and sort()","text":"<p>Both of these functions use key as an argument where a callabe can be passed.</p> <p>Syntax of argument for both the functions are as:</p> <pre><code>sorted(iterable, /, *, key=None, reverse=False) -&gt; iterable\nsort(iterable, /, *, key=None, reverse=False) -&gt; None\n</code></pre> <pre><code>lst = [6,1,4,0,9,3,8,7,2,5]\n\nprint(sorted(lst)) #[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] Doesnt chaneg the original list\nprint(lst) #[6, 1, 4, 0, 9, 3, 8, 7, 2, 5]\n\nlst.sort()\nprint(lst) #[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] Changes the list\n</code></pre>"},{"location":"pythonBuiltIns/#staticmethod","title":"@staticmethod","text":"<p>Transform a method into a static method. A static method can be called either on the class (such as\u00a0<code>C.f()</code>) or on an instance (such as\u00a0<code>C().f()</code>). Moreover, they can be called as regular functions (such as\u00a0<code>f()</code>).</p> <p>A static method does not receive an implicit first argument. To declare a static method, use this idiom:</p> <pre><code>class C:\n    @staticmethod\n    def f(arg1, arg2, argN): ...\n</code></pre>"},{"location":"pythonBuiltIns/#roundnumber-ndigitsnone","title":"round(number, ndigits=None)","text":"<p>example, both\u00a0<code>round(0.5)</code>\u00a0and\u00a0<code>round(-0.5)</code>\u00a0are\u00a0<code>0</code>, and\u00a0<code>round(1.5)</code>\u00a0is\u00a0<code>2</code>. The return value is an integer if\u00a0ndigits\u00a0is omitted or\u00a0<code>None</code>. Otherwise, the return value has the same type as\u00a0number.</p> <p><code>round(2.675,\u00a02)</code>\u00a0gives\u00a0<code>2.67</code>\u00a0instead of the expected\u00a0<code>2.68</code>. This is not a bug.</p>"},{"location":"pythonBuiltIns/#class-strobject-reprobject-and-asciiobject","title":"class str(object), repr(object) and ascii(object)","text":""},{"location":"pythonBuiltIns/#strobjectb-encodingutf-8-errorsstrict","title":"str(object=b'',\u00a0encoding='utf-8',\u00a0errors='strict')","text":"<p>Return string version of the object. </p>"},{"location":"pythonBuiltIns/#reprobject","title":"repr(object)","text":"<p>Return a string containing a printable representation of an object. A class can control what this function returns for its instances by defining a\u00a0<code>__repr__()</code>\u00a0method.</p>"},{"location":"pythonBuiltIns/#asciiobject","title":"ascii(object)","text":"<p>The <code>ascii()</code> function in Python is used to generate a string representation of an object, similar to what the <code>repr()</code> function does. However, <code>ascii()</code> differs in that it escapes non-ASCII characters in the string returned by <code>repr()</code> using <code>\\x</code>, <code>\\u</code>, or <code>\\U</code> escapes. This means that any characters outside the ASCII range (0-127) will be represented using escape sequences.</p> <pre><code># Define a string with non-ASCII characters\ns = \"Caf\u00e9\"\n\n# Use repr() to get the string representation\nprint(\"Using repr():\", repr(s))  # Output: 'Caf\u00e9'\n\n# Use ascii() to get the ASCII representation with escape sequences\nprint(\"Using ascii():\", ascii(s))  # Output: 'Caf\\xe9'\n</code></pre> <pre><code>fring = \"\u20ae\u20b0\u20a9\ua7a6\ufbd4\"\nprint(ascii(fring))\n\n&gt;&gt; '\\u20ae\\u20b0\\u20a6\\u20a9\\ua7a6\\ufbd4'\n</code></pre>"},{"location":"pythonBuiltIns/#chr-ord-and-bin-hex-oct","title":"chr() ord() and bin() hex() oct()","text":""},{"location":"pythonBuiltIns/#ord-and-chr","title":"ord() and chr()","text":"<p><code>ord()</code>\u00a0and\u00a0<code>chr()</code>\u00a0are inverse to each other.</p> <p><code>ord()</code>\u00a0: gives unicode value of a character.</p> <p><code>chr()</code>\u00a0: gives character of a unicode value.</p> <pre><code>char = 'a'\nunicode_value = ord(char)\nchar_equivalent_of_unicode = chr(unicode_value)\n\nprint(f\"unicode = {unicode_value}\")\nprint(f\"Character equivalent to unicode value = {char_equivalent_of_unicode}\")\n</code></pre>"},{"location":"pythonBuiltIns/#bininteger","title":"bin(integer)","text":"<pre><code>print(bin(10))\n&gt;&gt; 0b1010\n</code></pre>"},{"location":"pythonBuiltIns/#hex","title":"hex()","text":"<pre><code>hex(255)\n'0xff'\n</code></pre>"},{"location":"pythonBuiltIns/#oct","title":"oct()","text":"<pre><code>oct(8)\n'0o10'\n</code></pre>"},{"location":"pythonBuiltIns/#iter-and-next","title":"iter() and next()","text":"<p><code>iter()</code>\u00a0creates an iterator object.</p> <p>with this iterator object use\u00a0<code>next()</code>\u00a0to iterate throughout.</p> <pre><code>iterator = iter(lst_) \nprint(next(iterator))\n</code></pre> <p><code>next()</code>\u00a0or\u00a0<code>__next__()</code>\u00a0could be used in association with the\u00a0<code>iter</code>\u00a0object to iterate through the values.</p> <pre><code>a = [1,2,23,3,5,6,7,8]\nItr = iter(a)\n\nfor _ in range(len(a)):\n    print(Itr.__next__()) \n&gt;&gt; 122335678\n</code></pre>"},{"location":"pythonBuiltIns/#min-and-max","title":"min() and max()","text":"<p>Takes iterable and gives max or min accordingly.</p> <p><code>min(*iterable*,\u00a0***,\u00a0*key=None*)</code></p> <p><code>min(*iterable*,\u00a0***,\u00a0*default*,\u00a0*key=None*)</code></p> <p><code>min(*arg1*,\u00a0*arg2*,\u00a0**args*,\u00a0*key=None*)</code></p> <p><code>max(*iterable*,\u00a0***,\u00a0*key=None*)</code></p> <p><code>max(*iterable*,\u00a0***,\u00a0*default*,\u00a0*key=None*)</code></p> <p><code>max(*arg1*,\u00a0*arg2*,\u00a0**args*,\u00a0*key=None*)</code></p>"},{"location":"pythonBuiltIns/#isinstance-and-issubclass","title":"isinstance() and issubclass()","text":"<p><code>isinstance(object, class)</code>\u00a0shows if the object is an instance of the given class.</p> <p><code>class</code>\u00a0attribute also accepts a tuple of classes, where thefunction returns true if\u00a0<code>object</code>\u00a0attribute is an instance of atlest one of the classes.</p> <pre><code>class planet:\n    pass\n\nclass Animal:\n    pass\n\nclass Dog():\n    pass\n\ndog_instance = Dog()\n\nprint(isinstance(dog_instance, Dog))\nprint(isinstance(dog_instance, (Dog, Animal)))\nprint(isinstance(dog_instance, (planet, Animal))) \n\n&gt;&gt;True\n&gt;&gt;True \n&gt;&gt;False\n</code></pre> <p><code>issubclass(class, classinfo)</code>\u00a0accepts two classes and checks if one class is the subclass of other.\u00a0<code>clsasinfo</code>\u00a0attribute can also accept a tuple of classes. Here the class has to be a subclass of either one of the classes in the tuple.</p> <pre><code>class Shape:\n    pass\n\nclass Circle(Shape):\n    pass\n\n# Check if Circle is a subclass of Shape\nresult = issubclass(Circle, Shape)\nprint(result)  # Output: True\n</code></pre>"},{"location":"pythonBuiltIns/#open","title":"open()","text":"<p>It is recomended to use\u00a0<code>open</code>\u00a0in the\u00a0<code>with</code>\u00a0statement as it takes care of closing the file once it exits\u00a0<code>with</code>\u00a0block. Even when an exception occur.</p> <p><code>fp</code>\u00a0is a file object. Like file pointer in other languages.</p> <pre><code>with open('abcd.txt', 'r') as fp:\n    ....\n</code></pre>"},{"location":"pythonBuiltIns/#mode-parameter-can-be","title":"mode parameter can be:","text":"mode descritption 'r' open the file in read mode 'w' open the file in write mode 'rb' or 'wb' open in binary mode"},{"location":"pythonBuiltIns/#reading-a-file-after-opening","title":"reading a file after opening:","text":"definition description .read(size=-1) reads the file based on byte size passed.default byte size is -1 which reads all teh bytes in the document. .readline(size=-1) reads one line. .readlines() reads all the lines of a document and returns a list. list(fp) is also equivalent to .readlines() where\u00a0<code>fp</code>, the file object is type casted to list"},{"location":"pythonBuiltIns/#readline","title":"readline()","text":"<pre><code># readline() to read a whole document\n\n\nwith open(r\"example.log\", 'r') as fp:\n    line_ = fp.readline()\n    while line_ != '':\n        print(line_)\n        line_ = fp.readline()\n</code></pre>"},{"location":"pythonBuiltIns/#readlines","title":"readlines()","text":"<pre><code># readlines() to read the whole document\n\n\nwith open(r\"example.log\", 'r') as fp:\n    for line in fp.readlines():\n        print(line)\n</code></pre>"},{"location":"pythonBuiltIns/#read","title":"read()","text":"<pre><code>with open(r\"example.log\", 'r') as fp:\n    print(fp.read()\n</code></pre>"},{"location":"pythonBuiltIns/#working-with-two-files-at-a-time","title":"working with two files at a time","text":"<pre><code>with open(r\"example.log\", 'r') as reader, open('writer.txt', 'w') as writer:\n    writer.write(reader.read())\n</code></pre>"},{"location":"pythonBuiltIns/#venv","title":"venv","text":"<pre><code>python -m venv .env\n\n\n# To clear the exisitng .env/ and create it again\npython -m venv .env --clear\n\n\n# To upgrade the python binary in virtual env with the system python\npython -m venv .env --upgrade\n\n\n# Install updated pip as soon as you create .env/\npython -m venv .env --upgrade-deps\n\n\n# Create multiple environments\n# Here three python envirinments are created in the exisitng directory.\npython -m venv .env/ .venv/ .environment/\n\n\n# Change the displayed command prompt name\npython -m venv .env --prompt=\"clinet_1\"\n</code></pre>"},{"location":"pythonBuiltIns/#miscellaneous","title":"Miscellaneous","text":""},{"location":"pythonBuiltIns/#three-ways-of-setting-attribute-value-of-a-class","title":"Three ways of setting attribute value of a class","text":"<p>This can be done in three ways</p> <pre><code>@dataclass\nclass Student:\n    name: str\n    grade: str\n    age:int \n\n\ns1 = Student('jeeva', 'C', 20)\nprint(f\"Student {s1.name} of age {s1.age} has {s1.grade} grade\")\nsetattr(s1, 'grade' , 'A')\nprint(f\"Student {s1.name} of age {s1.age} has {s1.grade} grade\")\ns1.grade = 'F'\nprint(f\"Student {s1.name} of age {s1.age} has {s1.grade} grade\")\n\n\n\n&gt;&gt;&gt; Student jeeva of age 20 has C grade\n&gt;&gt;&gt; Student jeeva of age 20 has A grade\n&gt;&gt;&gt; Student jeeva of age 20 has F grade\n</code></pre> <p>One is a conventional way where the attributes are given when declaring an instance of class\u00a0<code>s1</code></p> <p>Using\u00a0<code>setattr</code></p> <p>And using\u00a0<code>s1.grade = 'F'</code></p> <pre><code>if sys.version_info &gt;= (3, 8)\n</code></pre> <p>Above line is used to verify the version of python and based on that execute a certain code.</p>"},{"location":"pythonBuiltIns/#floor-division-operator","title":"Floor division operator","text":"<pre><code>print(15//4)\n</code></pre>"},{"location":"pythonBuiltIns/#match-case-statements-in-python","title":"Match case statements in python","text":"<p>These are valid form python 3.10. Match case is like switch case in C.</p>"},{"location":"smtp/","title":"SMTP in Python:","text":""},{"location":"smtp/#securely-send-mail-using-smtp_ssl","title":"Securely send mail using <code>SMTP_SSL</code>:","text":"<p>Its a best practice to store the password in the environment variables. When you create a new environment variable on Windows, it's important to note that changes to environment variables usually require restarting any applications or shells that were open before the variable was added.</p> <pre><code>import smtplib, ssl\n\nport = 465  # For SSL\npassword = &lt;password&gt;\n\n# Create a secure SSL context\ncontext = ssl.create_default_context()\n\nwith smtplib.SMTP_SSL(\"smtp.gmail.com\", port, context=context) as server:\n    server.login(\"my@gmail.com\", password)\n    # TODO: Send email here\n</code></pre>"},{"location":"smtp/#securely-send-mail-using-starttls","title":"Securely send mail using <code>starttls()</code>:","text":"<pre><code>with SMTP('smtp.gmail.com', 587) as smtp:\n    smtp.starttls()\n    smtp.login(email_Address, os.environ.get(\"GMAIL_APP_PSWD\"))\n    smtp.sendmail(email_Address, email_Address, message.encode('utf-8'))\n</code></pre> <p><code>smtp.gmail.com</code> is the smtp server of GMail.</p> <p><code>smtp.office365.com</code> is the smtp server of Outlook Mail.</p>"},{"location":"string/","title":"String Module in Python:","text":""},{"location":"string/#some-constants-defined-in-this-module","title":"Some constants defined in this module:","text":"<p>The constants defined in this module are:</p>"},{"location":"string/#stringascii_letters","title":"string.ascii_letters:","text":"<p>The concatenation of the\u00a0<code>ascii_lowercase</code>\u00a0and\u00a0<code>ascii_uppercase</code>\u00a0constants described below. This value is not locale-dependent.</p> <p><code>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</code></p>"},{"location":"string/#stringascii_lowercases","title":"string.ascii_lowercases:","text":"<p>The lowercase letters\u00a0<code>'abcdefghijklmnopqrstuvwxyz'</code>. This value is not locale-dependent and will not change.</p>"},{"location":"string/#unpacking-form-string","title":"Unpacking form string:","text":"<pre><code>print(\"{0} is your firt alphabet\".format(*\"jeevan\"))\n&gt;&gt; j is your firt alphabet\n\n\nprint('{2}, {1}, {0}'.format(*'abc'))      # unpacking argument sequence\n</code></pre>"},{"location":"string/#unpacking-from-variable-assigned-with-string","title":"Unpacking from variable assigned with string:","text":"<pre><code>a = '{0}'.format(*\"jeevan\")\nprint(a) \n&gt;&gt; j\n\n\ngroot = \"hello this is jeevan\"\na = '{0}'.format(*groot)\nprint(a)\n&gt;&gt; h\n</code></pre>"},{"location":"string/#alignment-of-the-text","title":"Alignment of the text:","text":"<p><code>:</code> is used in the format string to align the string to left, right or center.</p> <pre><code>'{:&lt;30}'.format('left aligned')\n&gt;&gt; 'left aligned                  '\n'{:&gt;30}'.format('right aligned')\n&gt;&gt; '                 right aligned'\n'{:^30}'.format('centered')\n&gt;&gt; '           centered           '\n'{:*^30}'.format('centered')  # use '*' as a fill char\n&gt;&gt;'***********centered***********'\n</code></pre>"},{"location":"string/#percentages","title":"Percentages:","text":"<pre><code>points = 19\ntotal = 22\nprint('Correct answers: {:.2%}'.format(points/total)) \n&gt;&gt;86.36%\n</code></pre>"},{"location":"ubuntu_server/","title":"Ubuntu-server","text":""},{"location":"ubuntu_server/#ssh","title":"ssh","text":"<p>To enable <code>ssh</code> in system in linux system;</p> <pre><code>sudo apt install openssh-server # for server\nsudo apt install openssh-client # for client\n</code></pre> <p>To enable <code>ssh</code> in windows system;</p> <p>Navigate to System -&gt; Optional Features -&gt; Add an optional feature in windows settings and find <code>OpenSSH Server</code> and enable it.</p> <p>Go to services and make the service run <code>automatically</code>.</p> <p>Similar steps could be followed to enable <code>OpenSSH Client</code> feature in Optional Features. Or <code>PuTTY</code> can be used as a client.</p> <p>To <code>ssh</code> from a Debian WSL to an Ubuntu-Server first you need to have <code>openssh-client</code> in the WSL. Now type the below command to enter into your server.</p> <pre><code>ssh username@&lt;ip-add of server&gt;\n</code></pre>"},{"location":"ubuntu_server/#to-get-rid-of-extering-password-to-login-to-remote-server","title":"to get rid of extering password to login to remote-server","text":"<p>Use SSH public key encryption to get rid of typing the password all the time when you login to your server. This requires you to generate ssh keypairs.</p> <p>To generate the SSH public and Private key</p> <pre><code>ssh-keygen -t rsa\n</code></pre> <p><code>rsa</code> is one algorithm among the list of algorithms <code>[dsa | ecdsa | ecdsa-sk | ed25519 | ed25519-sk | rsa]</code>. You can provide the <code>passphrase</code> if you wish. The default storage location of the public/private key file is <code>C:\\User\\\\&lt;user-name\\.ssh</code>.</p> <p>Copy the content of  <code>id_rsa.pub</code> file to a file called <code>authorized_keys</code> in <code>~/.ssh</code> folder in linux server.</p>"},{"location":"ubuntu_server/#scp","title":"scp","text":"<p><code>scp</code> is a file copy/file transfer protocol unlike ftp. It is most secure way of trasfering files between the remote systems.</p> <pre><code>scp \"D:\\girishree studio\\KIS_9487.JPG\" jeevan@192.168.30.6:/home/jeevan/Movies\n</code></pre>"},{"location":"ubuntu_server/#users","title":"users","text":""},{"location":"ubuntu_server/#add-user","title":"add user","text":"<pre><code>sudo adduser kite\n</code></pre> <p>This asks the <code>sudo</code> password and the new password to be created for the new user.</p>"},{"location":"ubuntu_server/#change-password","title":"change password","text":"<pre><code>sudo passwd &lt;username&gt;\n</code></pre>"},{"location":"ubuntu_server/#remove-user","title":"remove user","text":"<pre><code>sudo deluser &lt;username&gt;\n</code></pre>"},{"location":"ubuntu_server/#to-see-list-of-user","title":"to see list of user","text":"<pre><code>cat /etc/passwd\n</code></pre>"},{"location":"ubuntu_server/#x11","title":"X11","text":"<p>In order to run a GUI application in server X11 server can be used. </p> <ul> <li> <p>Start an X11 server in windows system Ex; Xming server</p> </li> <li> <p>Open PuTTY and enable the X11 configuratoin and login to server.</p> </li> <li> <p>Start a GUI application Ex; gedit</p> </li> </ul> <pre><code>sudo apt install gedit\ngedit\n</code></pre> <ul> <li>This will open the GUI in windows machine.</li> </ul>"},{"location":"ubuntu_server/#public-private-key-encryption","title":"Public-Private key encryption","text":"<p>Public key encrypts the data. Private key decrypts the data.</p>"},{"location":"ubuntu_server/#how-public-private-key-cryptography-works","title":"How Public-Private Key Cryptography Works","text":"<p>If A wants to send a message to B, A takes public key of B and encrypts the message with it and sends it to B. B uses the private key associated with his public key to decrypt the message. Since messgae is encrypted with B's Public key, it can only be decrypted by B's private key. So no middle man in between can decrypt the message and messgge is safe.</p> <p>However, with this form of messaging there is no way to authenticate the source of the message. Anonymous person C can act like A to send message to B. Bjust thinks that the message came from A but actually its not.</p> <p>To overcome this problem below methods are followed:</p>"},{"location":"ubuntu_server/#digital-signature","title":"Digital signature","text":"<p>B would not trust any message with which do not have a digital signature. In addition to message, A sends a Digital signature with it created by his private key. Since B knows A's public key, B can make sure the private key belongs to A by using A's public key. </p>"}]}